{
  "address": "0x5Ca9EfCF92bbC15ca521A34d6D6d17351Fd6E6C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        },
        {
          "internalType": "contract DataStore",
          "name": "_dataStore",
          "type": "address"
        },
        {
          "internalType": "contract EventEmitter",
          "name": "_eventEmitter",
          "type": "address"
        },
        {
          "internalType": "contract DepositStore",
          "name": "_depositStore",
          "type": "address"
        },
        {
          "internalType": "contract MarketStore",
          "name": "_marketStore",
          "type": "address"
        },
        {
          "internalType": "contract Oracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract FeeReceiver",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "BlockedFeature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "EmptyCompactedBlockNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyMarket",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minExecutionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "name": "InsufficientExecutionFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "MinMarketTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeTokenTransferError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__LogInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "OracleError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "signerInfo",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedOracleBlockNumbers",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedOracleTimestamps",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedDecimals",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMinPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMinPricesIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMaxPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMaxPricesIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address[]",
              "name": "priceFeedTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct OracleUtils.SetPricesParams",
          "name": "oracleParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingGas",
          "type": "uint256"
        }
      ],
      "name": "_executeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "callbackContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minMarketTokens",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldUnwrapNativeToken",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "executionFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "callbackGasLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct DepositUtils.CreateDepositParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createDeposit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataStore",
      "outputs": [
        {
          "internalType": "contract DataStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositStore",
      "outputs": [
        {
          "internalType": "contract DepositStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitter",
      "outputs": [
        {
          "internalType": "contract EventEmitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "signerInfo",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedOracleBlockNumbers",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedOracleTimestamps",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedDecimals",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMinPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMinPricesIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMaxPrices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "compactedMaxPricesIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address[]",
              "name": "priceFeedTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct OracleUtils.SetPricesParams",
          "name": "oracleParams",
          "type": "tuple"
        }
      ],
      "name": "executeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "contract FeeReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketStore",
      "outputs": [
        {
          "internalType": "contract MarketStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract Oracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleStore",
      "outputs": [
        {
          "internalType": "contract RoleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb154202bb6ca504530d4b9ac2abd81959ee7028489e2ea53888c60940c105d22",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0x5Ca9EfCF92bbC15ca521A34d6D6d17351Fd6E6C1",
    "transactionIndex": 2,
    "gasUsed": "5182604",
    "logsBloom": "0x
    "blockHash": "0x4f347b434b2216892a004563b18319fd14ba94276a389711ccb75ff10405f765",
    "transactionHash": "0xb154202bb6ca504530d4b9ac2abd81959ee7028489e2ea53888c60940c105d22",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 16614762,
        "transactionHash": "0xb154202bb6ca504530d4b9ac2abd81959ee7028489e2ea53888c60940c105d22",
        "address": "0x5Ca9EfCF92bbC15ca521A34d6D6d17351Fd6E6C1",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb11f15f206bda02c224edc744b0e50e46137046",
        "logIndex": 16,
        "blockHash": "0x4f347b434b2216892a004563b18319fd14ba94276a389711ccb75ff10405f765"
      }
    ],
    "blockNumber": 16614762,
    "cumulativeGasUsed": "5693225",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdF83f183CCB84bC1d506b8Df372e9Ca3b0a887Ef",
    "0xaC5C6D103DD3714fE9453F2F93fF66fce0fE9d6F",
    "0x05E5a185bE26b0D5c3DA2d783AcC0A1b4457ae4b",
    "0xfB14006e894Ecc87B0Bd099Ed831C4Ce82EE8c6E",
    "0x38139cB3f2158514236383ca48decAD1fC78283b",
    "0xCd4dA6e54d9D45ca2E2ddC1E356192213dF75878",
    "0x1D8eaAaBD7BFb82e29d1459B100d2BB11671ee0D"
  ],
  "numDeployments": 2,
  "solcInputHash": "3a2ad2f76d49af012eff08ed5468f1c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"},{\"internalType\":\"contract DataStore\",\"name\":\"_dataStore\",\"type\":\"address\"},{\"internalType\":\"contract EventEmitter\",\"name\":\"_eventEmitter\",\"type\":\"address\"},{\"internalType\":\"contract DepositStore\",\"name\":\"_depositStore\",\"type\":\"address\"},{\"internalType\":\"contract MarketStore\",\"name\":\"_marketStore\",\"type\":\"address\"},{\"internalType\":\"contract Oracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract FeeReceiver\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"BlockedFeature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"EmptyCompactedBlockNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyMarket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"InsufficientExecutionFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"MinMarketTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenTransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"OracleError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signerInfo\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedOracleBlockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedOracleTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMinPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMinPricesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMaxPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMaxPricesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"priceFeedTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct OracleUtils.SetPricesParams\",\"name\":\"oracleParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingGas\",\"type\":\"uint256\"}],\"name\":\"_executeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositUtils.CreateDepositParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createDeposit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataStore\",\"outputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStore\",\"outputs\":[{\"internalType\":\"contract DepositStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitter\",\"outputs\":[{\"internalType\":\"contract EventEmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signerInfo\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedOracleBlockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedOracleTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMinPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMinPricesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMaxPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compactedMaxPricesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"priceFeedTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct OracleUtils.SetPricesParams\",\"name\":\"oracleParams\",\"type\":\"tuple\"}],\"name\":\"executeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"contract FeeReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStore\",\"outputs\":[{\"internalType\":\"contract MarketStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleStore\",\"outputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathUD60x18__Exp2InputTooBig(uint256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathUD60x18__LogInputTooSmall(uint256)\":[{\"notice\":\"Emitted when the input is less than 1.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/DepositHandler.sol\":\"DepositHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../token/TokenUtils.sol\\\";\\nimport \\\"./FundReceiver.sol\\\";\\n\\n// @title Bank\\n// @dev Contract to handle storing and transferring of tokens\\ncontract Bank is FundReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) FundReceiver(_roleStore, _dataStore) {}\\n\\n    receive() external payable {}\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    //\\n    // @param dataStore DataStore\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function transferOut(\\n        DataStore dataStore,\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) external onlyController {\\n        _transferOut(dataStore, token, amount, receiver);\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    // handles native token transfers as well\\n    //\\n    // @param dataStore DataStore\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\\n    // before transferring\\n    function transferOut(\\n        DataStore dataStore,\\n        address token,\\n        uint256 amount,\\n        address receiver,\\n        bool shouldUnwrapNativeToken\\n    ) external onlyController {\\n        address wnt = TokenUtils.wnt(dataStore);\\n\\n        if (token == wnt && shouldUnwrapNativeToken) {\\n            _transferOutNativeToken(dataStore, token, amount, receiver);\\n        } else {\\n            _transferOut(dataStore, token, amount, receiver);\\n        }\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    //\\n    // @param dataStore DataStore\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function _transferOut(\\n        DataStore dataStore,\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        require(receiver != address(this), \\\"Bank: invalid receiver\\\");\\n\\n        TokenUtils.transfer(dataStore, token, receiver, amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    // @dev unwrap wrapped native tokens and transfer the native tokens from\\n    // this contract to a receiver\\n    //\\n    // @param dataStore DataStore\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function _transferOutNativeToken(\\n        DataStore dataStore,\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) internal {\\n        require(receiver != address(this), \\\"Bank: invalid receiver\\\");\\n\\n        TokenUtils.withdrawAndSendNativeToken(\\n            dataStore,\\n            token,\\n            receiver,\\n            amount\\n        );\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _afterTransferOut(address /* token */) internal virtual {}\\n}\\n\",\"keccak256\":\"0x512e20e761aed339d530e44841eff47d0a9d1f08ca13b1b75ab799dbede098a8\",\"license\":\"BUSL-1.1\"},\"contracts/bank/FundReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../token/TokenUtils.sol\\\";\\n\\n// @title FundReceiver\\n// @dev Contract to handle recovery of incorrectly sent native tokens\\ncontract FundReceiver is RoleModule {\\n    DataStore public immutable dataStore;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) RoleModule(_roleStore) {\\n        dataStore = _dataStore;\\n    }\\n\\n    // @dev users may incorrectly send the native token into this contract, allow it to be recovered\\n    //\\n    // @param receiver the address to recover the native token to\\n    // @param amount the amount of native token to recover\\n    function recoverNativeToken(address payable receiver, uint256 amount) external onlyController {\\n        TokenUtils.transferNativeToken(dataStore, receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xdd0d4ace281f573b325eebaa77e6148f2a9a642295aa0e8d5f9aca1f580cb332\",\"license\":\"BUSL-1.1\"},\"contracts/bank/StrictBank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./Bank.sol\\\";\\n\\n// @title StrictBank\\n// @dev a stricter version of Bank\\n//\\n// the Bank contract does not have functions to validate the amount of tokens\\n// transferred in\\n// the Bank contract will mainly assume that safeTransferFrom calls work correctly\\n// and that tokens were transferred into it if there was no revert\\n//\\n// the StrictBank contract keeps track of its internal token balance\\n// and uses recordTransferIn to compare its change in balance and return\\n// the amount of tokens received\\ncontract StrictBank is Bank {\\n    using SafeERC20 for IERC20;\\n\\n    // used to record token balances to evaluate amounts transferred in\\n    mapping (address => uint256) public tokenBalances;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) Bank(_roleStore, _dataStore) {}\\n\\n    // @dev records a token transfer into the contract\\n    // @param token the token to record the transfer for\\n    // @return the amount of tokens transferred in\\n    function recordTransferIn(address token) external onlyController returns (uint256) {\\n        return _recordTransferIn(token);\\n    }\\n\\n    // @dev records a token transfer into the contract\\n    // @param token the token to record the transfer for\\n    // @return the amount of tokens transferred in\\n    function _recordTransferIn(address token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[token];\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n\\n        return nextBalance - prevBalance;\\n    }\\n\\n    // @dev update the internal balance after tokens have been transferred out\\n    // this is called from the Bank contract\\n    // @param token the token that was transferred out\\n    function _afterTransferOut(address token) internal override {\\n        tokenBalances[token] = IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0f249badd6087b6d2e95e089a973affc08720b601317c29386d21ae6eb2058db\",\"license\":\"BUSL-1.1\"},\"contracts/callback/CallbackUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./IOrderCallbackReceiver.sol\\\";\\nimport \\\"./IDepositCallbackReceiver.sol\\\";\\nimport \\\"./IWithdrawalCallbackReceiver.sol\\\";\\n\\n// @title CallbackUtils\\n// @dev most features require a two step process to complete\\n// the user first sends a request transaction, then a second transaction is sent\\n// by a keeper to execute the request\\n//\\n// to allow for better composability with other contracts, a callback contract\\n// can be specified to be called after request executions or cancellations\\n//\\n// there are both before and after callbacks and half of the callbackGasLimit\\n// value is forwarded for each of these since both the before and after functions\\n// would be called\\nlibrary CallbackUtils {\\n    using Address for address;\\n    using Deposit for Deposit.Props;\\n    using Withdrawal for Withdrawal.Props;\\n    using Order for Order.Props;\\n\\n    // @dev called before a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit to be executed\\n    function beforeDepositExecution(bytes32 key, Deposit.Props memory deposit) internal {\\n        if (!isValidCallbackContract(deposit.callbackContract)) { return; }\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract).beforeDepositExecution{ gas: deposit.callbackGasLimit / 2 }(key, deposit) {\\n        } catch {}\\n    }\\n\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit) internal {\\n        if (!isValidCallbackContract(deposit.callbackContract)) { return; }\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract).afterDepositExecution{ gas: deposit.callbackGasLimit / 2 }(key, deposit) {\\n        } catch {}\\n    }\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit) internal {\\n        if (!isValidCallbackContract(deposit.callbackContract)) { return; }\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract).afterDepositCancellation{ gas: deposit.callbackGasLimit / 2 }(key, deposit) {\\n        } catch {}\\n    }\\n\\n    // @dev called before a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal to be executed\\n    function beforeWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal) internal {\\n        if (!isValidCallbackContract(withdrawal.callbackContract)) { return; }\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract).beforeWithdrawalExecution{ gas: withdrawal.callbackGasLimit / 2 }(key, withdrawal) {\\n        } catch {}\\n    }\\n\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal) internal {\\n        if (!isValidCallbackContract(withdrawal.callbackContract)) { return; }\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract).afterWithdrawalExecution{ gas: withdrawal.callbackGasLimit / 2 }(key, withdrawal) {\\n        } catch {}\\n    }\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal) internal {\\n        if (!isValidCallbackContract(withdrawal.callbackContract)) { return; }\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract).afterWithdrawalCancellation{ gas: withdrawal.callbackGasLimit / 2 }(key, withdrawal) {\\n        } catch {}\\n    }\\n\\n    // @dev called before an order execution\\n    // @param key the key of the order\\n    // @param order the order to be executed\\n    function beforeOrderExecution(bytes32 key, Order.Props memory order) internal {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).beforeOrderExecution{ gas: order.callbackGasLimit() / 2 }(key, order) {\\n        } catch {}\\n    }\\n\\n    // @dev called after an order execution\\n    // @param key the key of the order\\n    // @param order the order that was executed\\n    function afterOrderExecution(bytes32 key, Order.Props memory order) internal {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderExecution{ gas: order.callbackGasLimit() / 2 }(key, order) {\\n        } catch {}\\n    }\\n\\n    // @dev called after an order cancellation\\n    // @param key the key of the order\\n    // @param order the order that was cancelled\\n    function afterOrderCancellation(bytes32 key, Order.Props memory order) internal {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderCancellation{ gas: order.callbackGasLimit() / 2 }(key, order) {\\n        } catch {}\\n    }\\n\\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\\n    // @param key the key of the order\\n    // @param order the order that was frozen\\n    function afterOrderFrozen(bytes32 key, Order.Props memory order) internal {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderFrozen{ gas: order.callbackGasLimit() / 2 }(key, order) {\\n        } catch {}\\n    }\\n\\n    // @dev validates that the given address is a contract\\n    // @param callbackContract the contract to call\\n    function isValidCallbackContract(address callbackContract) internal view returns (bool) {\\n        if (callbackContract == address(0)) { return false; }\\n        if (!callbackContract.isContract()) { return false; }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa8af26798e0d89d4c4a471ade39f8c3d0904268a340bf6f3f9cefc683d3df70f\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IDepositCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../deposit/Deposit.sol\\\";\\n\\n// @title IDepositCallbackReceiver\\n// @dev interface for a deposit callback contract\\ninterface IDepositCallbackReceiver {\\n    // @dev called before a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit to be executed\\n    function beforeDepositExecution(bytes32 key, Deposit.Props memory deposit) external;\\n\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit) external;\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit) external;\\n}\\n\",\"keccak256\":\"0x1dadc48411b347839a7cd486e2121f8a0cf827875d7317cfe7eada1b829c3679\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IOrderCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../order/Order.sol\\\";\\n\\n// @title IOrderCallbackReceiver\\n// @dev interface for an order callback contract\\ninterface IOrderCallbackReceiver {\\n    // @dev called before an order execution\\n    // @param key the key of the order\\n    // @param order the order to be executed\\n    function beforeOrderExecution(bytes32 key, Order.Props memory order) external;\\n\\n    // @dev called after an order execution\\n    // @param key the key of the order\\n    // @param order the order that was executed\\n    function afterOrderExecution(bytes32 key, Order.Props memory order) external;\\n\\n    // @dev called after an order cancellation\\n    // @param key the key of the order\\n    // @param order the order that was cancelled\\n    function afterOrderCancellation(bytes32 key, Order.Props memory order) external;\\n\\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\\n    // @param key the key of the order\\n    // @param order the order that was frozen\\n    function afterOrderFrozen(bytes32 key, Order.Props memory order) external;\\n}\\n\",\"keccak256\":\"0x04570c94bf35994e38a98b538cfeef719cbe27ba6621f7d82396db3dcaa5a89b\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IWithdrawalCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../withdrawal/Withdrawal.sol\\\";\\n\\n// @title IWithdrawalCallbackReceiver\\n// @dev interface for a withdrawal callback contract\\ninterface IWithdrawalCallbackReceiver {\\n    // @dev called before a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal to be executed\\n    function beforeWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal) external;\\n\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal) external;\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal) external;\\n}\\n\",\"keccak256\":\"0x1d982f195dd09fbb4a1cbaae96307960db81e5c650e22d969c42b2957ef8d5bb\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ArbSys\\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\\n// value, the ArbSys interface is used to retrieve the L2 value\\ninterface ArbSys {\\n    function arbBlockNumber() external view returns (uint256);\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x97a2fcc4828af974d9e763db893b1188fec4d964ec3896611284678631dc5ffd\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArbSys.sol\\\";\\n\\n// @title Chain\\n// @dev Wrap the calls to retrieve chain variables to handle differences\\n// between chain implementations\\nlibrary Chain {\\n    uint256 constant public ARBITRUM_CHAIN_ID = 42161;\\n    uint256 constant public ARBITRUM_RINKEBY_CHAIN_ID = 421611;\\n\\n    ArbSys constant public arbSys = ArbSys(address(100));\\n\\n    // @dev return the current block's timestamp\\n    // @return the current block's timestamp\\n    function currentTimestamp() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    // @dev return the current block's number\\n    // @return the current block's number\\n    function currentBlockNumber() internal view returns (uint256) {\\n        if (block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_RINKEBY_CHAIN_ID) {\\n            return arbSys.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    // @dev return the current block's hash\\n    // @return the current block's hash\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_RINKEBY_CHAIN_ID) {\\n            return arbSys.arbBlockHash(blockNumber);\\n        }\\n\\n        return blockhash(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x6ab497c647065670b11a101c40f37343d9d7c7524b99edd949a1afa7f726e5c0\",\"license\":\"BUSL-1.1\"},\"contracts/data/DataStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\n// @title DataStore\\n// @dev DataStore for all general state values\\ncontract DataStore is RoleModule {\\n    using SafeCast for int256;\\n\\n    // store for uint values\\n    mapping(bytes32 => uint256) public uintValues;\\n    // store for int values\\n    mapping(bytes32 => int256) public intValues;\\n    // store for address values\\n    mapping(bytes32 => address) public addressValues;\\n    // store for bool values\\n    mapping(bytes32 => bool) public boolValues;\\n    // store for string values\\n    mapping(bytes32 => string) public stringValues;\\n    // store for bytes32 values\\n    mapping(bytes32 => bytes32) public dataValues;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev get the uint value for the given key\\n    // @param key the key of the value\\n    // @return the uint value for the key\\n    function getUint(bytes32 key) external view returns (uint256) {\\n        return uintValues[key];\\n    }\\n\\n    // @dev set the uint value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the uint value for the key\\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uintValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev add the input int value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = Calc.sum(uintValues[key], value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input int value to the existing uint value, prevent the uint\\n    // value from becoming negative if ensurePositiveValue is true\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @param ensurePositiveValue whether to ensure the uint value remains positive\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, int256 value, bool ensurePositiveValue) external onlyController returns (uint256) {\\n        uint256 uintValue = uintValues[key];\\n        if (ensurePositiveValue && value < 0 && (-value).toUint256() > uintValue) {\\n            uintValues[key] = 0;\\n            return 0;\\n        }\\n\\n        uint256 nextUint = Calc.sum(uintValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev subtract the input uint value from the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] - value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev get the int value for the given key\\n    // @param key the key of the value\\n    // @return the int value for the key\\n    function getInt(bytes32 key) external view returns (int256) {\\n        return intValues[key];\\n    }\\n\\n    // @dev set the int value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the int value for the key\\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        intValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev subtract the input int value from the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] - value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev get the address value for the given key\\n    // @param key the key of the value\\n    // @return the address value for the key\\n    function getAddress(bytes32 key) external view returns (address) {\\n        return addressValues[key];\\n    }\\n\\n    // @dev set the address value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the address value for the key\\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\\n        addressValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev get the bool value for the given key\\n    // @param key the key of the value\\n    // @return the bool value for the key\\n    function getBool(bytes32 key) external view returns (bool) {\\n        return boolValues[key];\\n    }\\n\\n    // @dev set the bool value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bool value for the key\\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\\n        boolValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev get the string value for the given key\\n    // @param key the key of the value\\n    // @return the string value for the key\\n    function getString(bytes32 key) external view returns (string memory) {\\n        return stringValues[key];\\n    }\\n\\n    // @dev set the string value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the string value for the key\\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\\n        stringValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev get the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @return the bytes32 value for the key\\n    function getData(bytes32 key) external view returns (bytes32) {\\n        return dataValues[key];\\n    }\\n\\n    // @dev set the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bytes32 value for the key\\n    function setData(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\\n        dataValues[key] = value;\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x26c4533ca42c443839a693ccfe1c5d3e8a9517306b1fcf5212daaa5fe790c6eb\",\"license\":\"BUSL-1.1\"},\"contracts/data/Keys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Keys\\n// @dev Keys for values in the DataStore\\nlibrary Keys {\\n    // @dev key for the address of the wrapped native token\\n    bytes32 public constant WNT = keccak256(abi.encode(\\\"WNT\\\"));\\n    // @dev key for the nonce value used in NonceUtils\\n    bytes32 public constant NONCE = keccak256(abi.encode(\\\"NONCE\\\"));\\n\\n    // @dev key for whether the create deposit feature is enabled\\n    bytes32 public constant CREATE_DEPOSIT_FEATURE = keccak256(abi.encode(\\\"CREATE_DEPOSIT_FEATURE\\\"));\\n    // @dev key for whether the execute deposit feature is enabled\\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE = keccak256(abi.encode(\\\"EXECUTE_DEPOSIT_FEATURE\\\"));\\n\\n    // @dev key for whether the create withdrawal feature is enabled\\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE = keccak256(abi.encode(\\\"CREATE_WITHDRAWAL_FEATURE\\\"));\\n    // @dev key for whether the execute withdrawal feature is enabled\\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE = keccak256(abi.encode(\\\"EXECUTE_WITHDRAWAL_FEATURE\\\"));\\n\\n    // @dev key for whether the create order feature is enabled\\n    bytes32 public constant CREATE_ORDER_FEATURE = keccak256(abi.encode(\\\"CREATE_ORDER_FEATURE\\\"));\\n    // @dev key for whether the execute order feature is enabled\\n    bytes32 public constant EXECUTE_ORDER_FEATURE = keccak256(abi.encode(\\\"EXECUTE_ORDER_FEATURE\\\"));\\n    // @dev key for whether the execute adl feature is enabled\\n    bytes32 public constant EXECUTE_ADL_FEATURE = keccak256(abi.encode(\\\"EXECUTE_ADL_FEATURE\\\"));\\n    // @dev key for whether the update order feature is enabled\\n    bytes32 public constant UPDATE_ORDER_FEATURE = keccak256(abi.encode(\\\"UPDATE_ORDER_FEATURE\\\"));\\n    // @dev key for whether the cancel order feature is enabled\\n    bytes32 public constant CANCEL_ORDER_FEATURE = keccak256(abi.encode(\\\"CANCEL_ORDER_FEATURE\\\"));\\n\\n    // @dev key for the minimum required oracle signers for an oracle observation\\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(abi.encode(\\\"MIN_ORACLE_SIGNERS\\\"));\\n    // @dev key for the minimum block confirmations before blockhash can be excluded for oracle signature validation\\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(abi.encode(\\\"MIN_ORACLE_BLOCK_CONFIRMATIONS\\\"));\\n    // @dev key for the maximum usable oracle price age in seconds\\n    bytes32 public constant MAX_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ORACLE_PRICE_AGE\\\"));\\n    // @dev key for the percentage amount of fees to be received for deposits\\n    bytes32 public constant FEE_RECEIVER_DEPOSIT_FACTOR = keccak256(abi.encode(\\\"FEE_RECEIVER_DEPOSIT_FACTOR\\\"));\\n    // @dev key for the percentage amount of fees to be received for withdrawals\\n    bytes32 public constant FEE_RECEIVER_WITHDRAWAL_FACTOR = keccak256(abi.encode(\\\"FEE_RECEIVER_WITHDRAWAL_FACTOR\\\"));\\n    // @dev key for the percentage amount of fees to be received for swaps\\n    bytes32 public constant FEE_RECEIVER_SWAP_FACTOR = keccak256(abi.encode(\\\"FEE_RECEIVER_SWAP_FACTOR\\\"));\\n    // @dev key for the percentage amount of fees to be received for positions\\n    bytes32 public constant FEE_RECEIVER_POSITION_FACTOR = keccak256(abi.encode(\\\"FEE_RECEIVER_POSITION_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when estimating execution fee\\n    bytes32 public constant ESTIMATED_FEE_BASE_GAS_LIMIT = keccak256(abi.encode(\\\"ESTIMATED_FEE_BASE_GAS_LIMIT\\\"));\\n    // @dev key for the multiplier used when estimating execution fee\\n    bytes32 public constant ESTIMATED_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"ESTIMATED_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when calculating execution fee\\n    bytes32 public constant EXECUTION_FEE_BASE_GAS_LIMIT = keccak256(abi.encode(\\\"EXECUTION_FEE_BASE_GAS_LIMIT\\\"));\\n    // @dev key for the multiplier used when calculating execution fee\\n    bytes32 public constant EXECUTION_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"EXECUTION_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the estimated gas limit for deposits\\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"DEPOSIT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for withdrawals\\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"WITHDRAWAL_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for single swaps\\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(abi.encode(\\\"SINGLE_SWAP_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for increase orders\\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"INCREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for decrease orders\\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"DECREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for swap orders\\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"SWAP_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for token transfers\\n    bytes32 public constant TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for native token transfers\\n    bytes32 public constant NATIVE_TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"NATIVE_TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n\\n    // @dev key for the max allowed leverage\\n    bytes32 public constant MAX_LEVERAGE = keccak256(abi.encode(\\\"MAX_LEVERAGE\\\"));\\n    // @dev key for the min allowed collateral in USD\\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(abi.encode(\\\"MIN_COLLATERAL_USD\\\"));\\n\\n    // @dev key for the position impact factor\\n    bytes32 public constant POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the position impact exponent factor\\n    bytes32 public constant POSITION_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the position fee factor\\n    bytes32 public constant POSITION_FEE_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_FACTOR\\\"));\\n    // @dev key for the swap impact factor\\n    bytes32 public constant SWAP_IMPACT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_FACTOR\\\"));\\n    // @dev key for the swap impact exponent factor\\n    bytes32 public constant SWAP_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the swap fee factor\\n    bytes32 public constant SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_FACTOR\\\"));\\n    // @dev key for the oracle type\\n    bytes32 public constant ORACLE_TYPE = keccak256(abi.encode(\\\"ORACLE_TYPE\\\"));\\n    // @dev key for open interest\\n    bytes32 public constant OPEN_INTEREST = keccak256(abi.encode(\\\"OPEN_INTEREST\\\"));\\n    // @dev key for open interest in tokens\\n    bytes32 public constant OPEN_INTEREST_IN_TOKENS = keccak256(abi.encode(\\\"OPEN_INTEREST_IN_TOKENS\\\"));\\n    // @dev key for collateral sum for a market\\n    bytes32 public constant COLLATERAL_SUM = keccak256(abi.encode(\\\"COLLATERAL_SUM\\\"));\\n    // @dev key for pool amount\\n    bytes32 public constant POOL_AMOUNT = keccak256(abi.encode(\\\"POOL_AMOUNT\\\"));\\n    // @dev key for position impact pool amount\\n    bytes32 public constant POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for swap impact pool amount\\n    bytes32 public constant SWAP_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"SWAP_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for price feed\\n    bytes32 public constant PRICE_FEED = keccak256(abi.encode(\\\"PRICE_FEED\\\"));\\n    // @dev key for price feed multiplier\\n    bytes32 public constant PRICE_FEED_MULTIPLIER = keccak256(abi.encode(\\\"PRICE_FEED_MULTIPLIER\\\"));\\n    // @dev key for stable price\\n    bytes32 public constant STABLE_PRICE = keccak256(abi.encode(\\\"STABLE_PRICE\\\"));\\n    // @dev key for reserve factor\\n    bytes32 public constant RESERVE_FACTOR = keccak256(abi.encode(\\\"RESERVE_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR = keccak256(abi.encode(\\\"MAX_PNL_FACTOR\\\"));\\n    // @dev key for max pnl factor for withdrawals\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_WITHDRAWALS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_WITHDRAWALS\\\"));\\n    // @dev key for latest ADL block\\n    bytes32 public constant LATEST_ADL_BLOCK = keccak256(abi.encode(\\\"LATEST_ADL_BLOCK\\\"));\\n    // @dev key for whether ADL is enabled\\n    bytes32 public constant IS_ADL_ENABLED = keccak256(abi.encode(\\\"IS_ADL_ENABLED\\\"));\\n    // @dev key for funding factor\\n    bytes32 public constant FUNDING_FACTOR = keccak256(abi.encode(\\\"FUNDING_FACTOR\\\"));\\n    // @dev key for funding amount per size\\n    bytes32 public constant FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"FUNDING_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for when funding was last updated at\\n    bytes32 public constant FUNDING_UPDATED_AT = keccak256(abi.encode(\\\"FUNDING_UPDATED_AT\\\"));\\n    // @dev key for claimable funding amount\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\\\"BORROWING_FACTOR\\\"));\\n    // @dev key for cumulative borrowing factor\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR\\\"));\\n    // @dev key for when the cumulative borrowing factor was last updated at\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\\\"));\\n    // @dev key for total borrowing amount\\n    bytes32 public constant TOTAL_BORROWING = keccak256(abi.encode(\\\"TOTAL_BORROWING\\\"));\\n    // @dev key for affiliate reward\\n    bytes32 public constant AFFILIATE_REWARD = keccak256(abi.encode(\\\"AFFILIATE_REWARD\\\"));\\n\\n    string public constant ORACLE_ERROR = \\\"ORACLE_ERROR\\\";\\n    bytes32 public constant ORACLE_ERROR_KEY = keccak256(abi.encode(ORACLE_ERROR));\\n\\n    string public constant EMPTY_POSITION_ERROR = \\\"EMPTY_POSITION_ERROR\\\";\\n    bytes32 public constant EMPTY_POSITION_ERROR_KEY = keccak256(abi.encode(EMPTY_POSITION_ERROR));\\n\\n    string public constant FROZEN_ORDER_ERROR = \\\"FROZEN_ORDER_ERROR\\\";\\n    bytes32 public constant FROZEN_ORDER_ERROR_KEY = keccak256(abi.encode(FROZEN_ORDER_ERROR));\\n\\n    string public constant UNACCEPTABLE_PRICE_ERROR = \\\"UNACCEPTABLE_PRICE_ERROR\\\";\\n    bytes32 public constant UNACCEPTABLE_PRICE_ERROR_KEY = keccak256(abi.encode(UNACCEPTABLE_PRICE_ERROR));\\n\\n    // @dev key for deposit gas limit\\n    // @param singleToken whether a single token or pair tokens are being deposited\\n    // @return key for deposit gas limit\\n    function depositGasLimitKey(bool singleToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DEPOSIT_GAS_LIMIT,\\n            singleToken\\n        ));\\n    }\\n\\n    // @dev key for withdrawal gas limit\\n    // @param singleToken whether a single token or pair tokens are being withdrawn\\n    // @return key for withdrawal gas limit\\n    function withdrawalGasLimitKey(bool singleToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            WITHDRAWAL_GAS_LIMIT,\\n            singleToken\\n        ));\\n    }\\n\\n    // @dev key for single swap gas limit\\n    // @return key for single swap gas limit\\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SINGLE_SWAP_GAS_LIMIT\\n        ));\\n    }\\n\\n    // @dev key for increase order gas limit\\n    // @return key for increase order gas limit\\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            INCREASE_ORDER_GAS_LIMIT\\n        ));\\n    }\\n\\n    // @dev key for decrease order gas limit\\n    // @return key for decrease order gas limit\\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DECREASE_ORDER_GAS_LIMIT\\n        ));\\n    }\\n\\n    // @dev key for swap order gas limit\\n    // @return key for swap order gas limit\\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_ORDER_GAS_LIMIT\\n        ));\\n    }\\n\\n    // @dev key for whether create deposit is enabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is enabled\\n    function createDepositFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_DEPOSIT_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute deposit is enabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is enabled\\n    function executeDepositFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_DEPOSIT_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create withdrawal is enabled\\n    // @param the create withdrawal module\\n    // @return key for whether create withdrawal is enabled\\n    function createWithdrawalFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_WITHDRAWAL_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute withdrawal is enabled\\n    // @param the execute withdrawal module\\n    // @return key for whether execute withdrawal is enabled\\n    function executeWithdrawalFeatureKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_WITHDRAWAL_FEATURE,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create order is enabled\\n    // @param the create order module\\n    // @return key for whether create order is enabled\\n    function createOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute order is enabled\\n    // @param the execute order module\\n    // @return key for whether execute order is enabled\\n    function executeOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute adl is enabled\\n    // @param the execute adl module\\n    // @return key for whether execute adl is enabled\\n    function executeAdlFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ADL_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether update order is enabled\\n    // @param the update order module\\n    // @return key for whether update order is enabled\\n    function updateOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UPDATE_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether cancel order is enabled\\n    // @param the cancel order module\\n    // @return key for whether cancel order is enabled\\n    function cancelOrderFeatureKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_ORDER_FEATURE,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for gas to forward for token transfer\\n    // @param the token to check\\n    // @return key for gas to forward for token transfer\\n    function tokenTransferGasLimit(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOKEN_TRANSFER_GAS_LIMIT,\\n            token\\n        ));\\n   }\\n\\n    // @dev key for position impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for position impact factor\\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n   }\\n\\n    // @dev key for position impact exponent factor\\n    // @param market the market address to check\\n    // @return key for position impact exponent factor\\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position fee factor\\n    // @param market the market address to check\\n    // @return key for position fee factor\\n    function positionFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for swap impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for swap impact factor\\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for swap impact exponent factor\\n    // @param market the market address to check\\n    // @return key for swap impact exponent factor\\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n\\n    // @dev key for swap fee factor\\n    // @param market the market address to check\\n    // @return key for swap fee factor\\n    function swapFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for oracle type\\n    // @param token the token to check\\n    // @return key for oracle type\\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TYPE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for open interest\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest\\n    function openInterestKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest in tokens\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest in tokens\\n    function openInterestInTokensKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_IN_TOKENS,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for collateral sum for a market\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for collateral sum\\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            COLLATERAL_SUM,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's pool\\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for amount of tokens in a market's position impact pool\\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's swap impact pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's swap impact pool\\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for reserve factor\\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for max pnl factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for max pnl factor\\n    function maxPnlFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_PNL_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for max pnl factor for withdrawals\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for max pnl factor for withdrawals\\n    function maxPnlFactorForWithdrawalsKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_PNL_FACTOR_FOR_WITHDRAWALS,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for latest adl block\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for latest adl block\\n    function latestAdlBlockKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            LATEST_ADL_BLOCK,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for whether adl is enabled\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for whether adl is enabled\\n    function isAdlEnabledKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ADL_ENABLED,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for funding factor\\n    // @param market the market to check\\n    // @return key for funding factor\\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for funding amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for funding amount per size\\n    function fundingAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for when funding was last updated\\n    // @param market the market to check\\n    // @return key for when funding was last updated\\n    function fundingUpdatedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_UPDATED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for borrowing factor\\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor\\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor updated at\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor updated at\\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for total borrowing amount\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for total borrowing amount\\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOTAL_BORROWING,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for price feed address\\n    // @param token the token to get the key for\\n    // @return key for price feed address\\n    function priceFeedKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for price feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for price feed multiplier\\n    function priceFeedMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for stable price value\\n    // @param token the token to get the key for\\n    // @return key for stable price value\\n    function stablePriceKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            STABLE_PRICE,\\n            token\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x316a2d5eb39cf43c044668eba8d7f1da1e1663c5d593ca1a37ef5ec3684e8d05\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Deposit\\n// @dev Struct for deposits\\nlibrary Deposit {\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param market the market to deposit to\\n    // @param longTokenAmount the amount of long tokens to deposit\\n    // @param shortTokenAmount the amount of short tokens to deposit\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // @param updatedAtBlock the block that the deposit was last updated at\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param data for any additional data\\n    struct Props {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtBlock;\\n        bool shouldUnwrapNativeToken;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xfd526e7103a94decbf1bd5cf691a622c2ca6bd570b6f90cbf6d39520daedd4ae\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\nimport \\\"./Deposit.sol\\\";\\n\\n// @title DepositStore\\n// @dev Store for deposits\\ncontract DepositStore is StrictBank {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    mapping(bytes32 => Deposit.Props) internal deposits;\\n    EnumerableSet.Bytes32Set internal depositKeys;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n\\n    // @dev set a deposit in the store\\n    // @param key the key of the deposit\\n    // @param deposit the deposit values to set\\n    function set(bytes32 key, Deposit.Props memory deposit) external onlyController {\\n        deposits[key] = deposit;\\n        depositKeys.add(key);\\n    }\\n\\n    // @dev delete a deposit from the store\\n    // @param key the key of the deposit to delete\\n    function remove(bytes32 key) external onlyController {\\n        delete deposits[key];\\n        depositKeys.remove(key);\\n    }\\n\\n    // @dev get a deposit from the store\\n    // @param key the key of the deposit\\n    // @return the deposit for the key\\n    function get(bytes32 key) external view returns (Deposit.Props memory) {\\n        return deposits[key];\\n    }\\n\\n    // @dev get the total number of deposits in the store\\n    // @return the total number of deposits in the store\\n    function getDepositCount() external view returns (uint256) {\\n        return depositKeys.length();\\n    }\\n\\n    // @dev get the deposit keys for the given indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the deposit keys for the given indexes\\n    function getDepositKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return depositKeys.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xdfb947351eaf73e0c165ae05f030699117e9e7d1e32e20264234906f65dca4ea\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\nimport \\\"./DepositStore.sol\\\";\\nimport \\\"../market/MarketStore.sol\\\";\\n\\nimport \\\"../nonce/NonceUtils.sol\\\";\\nimport \\\"../pricing/SwapPricingUtils.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../oracle/OracleUtils.sol\\\";\\n\\nimport \\\"../gas/GasUtils.sol\\\";\\nimport \\\"../callback/CallbackUtils.sol\\\";\\n\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../utils/Null.sol\\\";\\n\\n// @title DepositUtils\\n// @dev Library for deposit functions, to help with the depositing of liquidity\\n// into a market in return for market tokens\\nlibrary DepositUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Array for uint256[];\\n\\n    using Price for Price.Props;\\n\\n    // @dev CreateDepositParams struct used in createDeposit to avoid stack\\n    // too deep errors\\n    //\\n    // @param receiver the address to send the market tokens to\\n    // @param callbackContract the callback contract\\n    // @param market the market to deposit into\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    struct CreateDepositParams {\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        uint256 minMarketTokens;\\n        bool shouldUnwrapNativeToken;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n    }\\n\\n    // @dev ExecuteDepositParams struct used in executeDeposit to avoid stack\\n    // too deep errors\\n    //\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param depositStore DepositStore\\n    // @param marketStore MarketStore\\n    // @param oracle Oracle\\n    // @param feeReceiver FeeReceiver\\n    // @param key the key of the deposit to execute\\n    // @param oracleBlockNumbers the oracle block numbers for the prices in oracle\\n    // @param keeper the address of the keeper executing the deposit\\n    // @param startingGas the starting amount of gas\\n    struct ExecuteDepositParams {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        DepositStore depositStore;\\n        MarketStore marketStore;\\n        Oracle oracle;\\n        FeeReceiver feeReceiver;\\n        bytes32 key;\\n        uint256[] oracleBlockNumbers;\\n        address keeper;\\n        uint256 startingGas;\\n    }\\n\\n    // @dev _ExecuteDepositParams struct used in executeDeposit to avoid stack\\n    // too deep errors\\n    //\\n    // @param market the market to deposit into\\n    // @param account the depositing account\\n    // @param receiver the account to send the market tokens to\\n    // @param tokenIn the token to deposit, either the market.longToken or\\n    // market.shortToken\\n    // @param tokenOut the other token, if tokenIn is market.longToken then\\n    // tokenOut is market.shortToken and vice versa\\n    // @param tokenInPrice price of tokenIn\\n    // @param tokenOutPrice price of tokenOut\\n    // @param amount amount of tokenIn\\n    // @param priceImpactUsd price impact in USD\\n    struct _ExecuteDepositParams {\\n        Market.Props market;\\n        address account;\\n        address receiver;\\n        address tokenIn;\\n        address tokenOut;\\n        Price.Props tokenInPrice;\\n        Price.Props tokenOutPrice;\\n        uint256 amount;\\n        int256 priceImpactUsd;\\n    }\\n\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n\\n    // @dev creates a deposit in the depositStore\\n    //\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param depositStore DepositStore\\n    // @param marketStore MarketStore\\n    // @param account the depositing account\\n    // @param params CreateDepositParams\\n    function createDeposit(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        DepositStore depositStore,\\n        MarketStore marketStore,\\n        address account,\\n        CreateDepositParams memory params\\n    ) internal returns (bytes32) {\\n        Market.Props memory market = marketStore.get(params.market);\\n        MarketUtils.validateNonEmptyMarket(market);\\n\\n        uint256 longTokenAmount = depositStore.recordTransferIn(market.longToken);\\n        uint256 shortTokenAmount = depositStore.recordTransferIn(market.shortToken);\\n\\n        address wnt = TokenUtils.wnt(dataStore);\\n\\n        if (market.longToken == wnt) {\\n            longTokenAmount -= params.executionFee;\\n        } else if (market.shortToken == wnt) {\\n            shortTokenAmount -= params.executionFee;\\n        } else {\\n            uint256 wntAmount = depositStore.recordTransferIn(wnt);\\n            require(wntAmount == params.executionFee, \\\"DepositUtils: invalid wntAmount\\\");\\n        }\\n\\n        Deposit.Props memory deposit = Deposit.Props(\\n            account,\\n            params.receiver,\\n            params.callbackContract,\\n            market.marketToken,\\n            longTokenAmount,\\n            shortTokenAmount,\\n            params.minMarketTokens,\\n            Chain.currentBlockNumber(),\\n            params.shouldUnwrapNativeToken,\\n            params.executionFee,\\n            params.callbackGasLimit,\\n            Null.BYTES\\n        );\\n\\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteDepositGasLimit(dataStore, deposit);\\n        GasUtils.validateExecutionFee(dataStore, estimatedGasLimit, params.executionFee);\\n\\n        bytes32 key = NonceUtils.getNextKey(dataStore);\\n\\n        depositStore.set(key, deposit);\\n\\n        eventEmitter.emitDepositCreated(key, deposit);\\n\\n        return key;\\n    }\\n\\n    // @dev executes a deposit\\n    // @param params ExecuteDepositParams\\n    function executeDeposit(ExecuteDepositParams memory params) internal {\\n        Deposit.Props memory deposit = params.depositStore.get(params.key);\\n        require(deposit.account != address(0), \\\"DepositUtils: empty deposit\\\");\\n\\n        if (!params.oracleBlockNumbers.areEqualTo(deposit.updatedAtBlock)) {\\n            revert(Keys.ORACLE_ERROR);\\n        }\\n\\n        CallbackUtils.beforeDepositExecution(params.key, deposit);\\n\\n        Market.Props memory market = params.marketStore.get(deposit.market);\\n\\n        Price.Props memory longTokenPrice = params.oracle.getPrimaryPrice(market.longToken);\\n        Price.Props memory shortTokenPrice = params.oracle.getPrimaryPrice(market.shortToken);\\n\\n        uint256 longTokenUsd = deposit.longTokenAmount * longTokenPrice.midPrice();\\n        uint256 shortTokenUsd = deposit.shortTokenAmount * shortTokenPrice.midPrice();\\n\\n        uint256 receivedMarketTokens;\\n\\n        int256 priceImpactUsd = SwapPricingUtils.getPriceImpactUsd(\\n            SwapPricingUtils.GetPriceImpactUsdParams(\\n                params.dataStore,\\n                market.marketToken,\\n                market.longToken,\\n                market.shortToken,\\n                longTokenPrice.midPrice(),\\n                shortTokenPrice.midPrice(),\\n                (deposit.longTokenAmount * longTokenPrice.midPrice()).toInt256(),\\n                (deposit.shortTokenAmount * shortTokenPrice.midPrice()).toInt256()\\n            )\\n        );\\n\\n        // since tokens were recorded as transferred in during the createDeposit step\\n        // to save gas costs we assume that _transferOut should always correctly transfer the tokens\\n        // to the marketToken\\n        // it is possible for a token to return true even if the transfer is not entirely fulfilled\\n        // this should still work unless the token has custom behavior that conditionally blocks transfers\\n        // even if the sender has sufficient balance\\n        // this will not work correctly for tokens with a burn mechanism, those need to be separately handled\\n        if (deposit.longTokenAmount > 0) {\\n            params.depositStore.transferOut(params.dataStore, market.longToken, deposit.longTokenAmount, market.marketToken);\\n\\n            _ExecuteDepositParams memory _params = _ExecuteDepositParams(\\n                market,\\n                deposit.account,\\n                deposit.receiver,\\n                market.longToken,\\n                market.shortToken,\\n                longTokenPrice,\\n                shortTokenPrice,\\n                deposit.longTokenAmount,\\n                priceImpactUsd * longTokenUsd.toInt256() / (longTokenUsd + shortTokenUsd).toInt256()\\n            );\\n\\n            receivedMarketTokens += _executeDeposit(params, _params);\\n        }\\n\\n        if (deposit.shortTokenAmount > 0) {\\n            params.depositStore.transferOut(params.dataStore, market.shortToken, deposit.shortTokenAmount, market.marketToken);\\n\\n            _ExecuteDepositParams memory _params = _ExecuteDepositParams(\\n                market,\\n                deposit.account,\\n                deposit.receiver,\\n                market.shortToken,\\n                market.longToken,\\n                shortTokenPrice,\\n                longTokenPrice,\\n                deposit.shortTokenAmount,\\n                priceImpactUsd * shortTokenUsd.toInt256() / (longTokenUsd + shortTokenUsd).toInt256()\\n            );\\n\\n            receivedMarketTokens += _executeDeposit(params, _params);\\n        }\\n\\n        if (receivedMarketTokens < deposit.minMarketTokens) {\\n            revert MinMarketTokens(receivedMarketTokens, deposit.minMarketTokens);\\n        }\\n\\n        params.depositStore.remove(params.key);\\n\\n        params.eventEmitter.emitDepositExecuted(params.key);\\n\\n        CallbackUtils.afterDepositExecution(params.key, deposit);\\n\\n        GasUtils.payExecutionFee(\\n            params.dataStore,\\n            params.depositStore,\\n            deposit.executionFee,\\n            params.startingGas,\\n            params.keeper,\\n            deposit.account\\n        );\\n    }\\n\\n    // @dev cancels a deposit, funds are sent back to the user\\n    //\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param depositStore DepositStore\\n    // @param marketStore MarketStore\\n    // @param key the key of the deposit to cancel\\n    // @param keeper the address of the keeper\\n    // @param startingGas the starting gas amount\\n    function cancelDeposit(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        DepositStore depositStore,\\n        MarketStore marketStore,\\n        bytes32 key,\\n        address keeper,\\n        uint256 startingGas\\n    ) internal {\\n        Deposit.Props memory deposit = depositStore.get(key);\\n        require(deposit.account != address(0), \\\"DepositUtils: empty deposit\\\");\\n\\n        Market.Props memory market = marketStore.get(deposit.market);\\n        if (deposit.longTokenAmount > 0) {\\n            depositStore.transferOut(\\n                dataStore,\\n                market.longToken,\\n                deposit.longTokenAmount,\\n                deposit.account,\\n                deposit.shouldUnwrapNativeToken\\n            );\\n        }\\n\\n        if (deposit.shortTokenAmount > 0) {\\n            depositStore.transferOut(\\n                dataStore,\\n                market.shortToken,\\n                deposit.shortTokenAmount,\\n                deposit.account,\\n                deposit.shouldUnwrapNativeToken\\n            );\\n        }\\n\\n        depositStore.remove(key);\\n\\n        eventEmitter.emitDepositCancelled(key);\\n\\n        CallbackUtils.afterDepositCancellation(key, deposit);\\n\\n        GasUtils.payExecutionFee(\\n            dataStore,\\n            depositStore,\\n            deposit.executionFee,\\n            startingGas,\\n            keeper,\\n            deposit.account\\n        );\\n    }\\n\\n    // @dev executes a deposit\\n    // @param params ExecuteDepositParams\\n    // @param _params _ExecuteDepositParams\\n    function _executeDeposit(ExecuteDepositParams memory params, _ExecuteDepositParams memory _params) internal returns (uint256) {\\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\\n            params.dataStore,\\n            _params.market.marketToken,\\n            _params.amount,\\n            Keys.FEE_RECEIVER_DEPOSIT_FACTOR\\n        );\\n\\n        PricingUtils.transferFees(\\n            params.dataStore,\\n            params.feeReceiver,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            fees.feeReceiverAmount,\\n            FeeUtils.DEPOSIT_FEE\\n        );\\n\\n        params.eventEmitter.emitSwapFeesCollected(keccak256(abi.encode(\\\"deposit\\\")), fees);\\n\\n        return _processDeposit(params, _params, fees.amountAfterFees, fees.feesForPool);\\n    }\\n\\n    // @dev processes a deposit\\n    // @param params ExecuteDepositParams\\n    // @param _params _ExecuteDepositParams\\n    // @param amountAfterFees the deposit amount after fees\\n    // @param feesForPool the amount of fees for the pool\\n    function _processDeposit(\\n        ExecuteDepositParams memory params,\\n        _ExecuteDepositParams memory _params,\\n        uint256 amountAfterFees,\\n        uint256 feesForPool\\n    ) internal returns (uint256) {\\n        uint256 mintAmount;\\n\\n        uint256 poolValue = MarketUtils.getPoolValue(\\n            params.dataStore,\\n            _params.market,\\n            _params.tokenIn == _params.market.longToken ? _params.tokenInPrice : _params.tokenOutPrice,\\n            _params.tokenIn == _params.market.shortToken ? _params.tokenInPrice : _params.tokenOutPrice,\\n            params.oracle.getPrimaryPrice(_params.market.indexToken),\\n            true\\n        );\\n        uint256 supply = MarketUtils.getMarketTokenSupply(MarketToken(payable(_params.market.marketToken)));\\n\\n        if (_params.priceImpactUsd > 0) {\\n            // when there is a positive price impact factor,\\n            // tokens from the swap impact pool are used to mint additional market tokens for the user\\n            // for example, if 50,000 USDC is deposited and there is a positive price impact\\n            // an additional 0.005 ETH may be used to mint market tokens\\n            // the swap impact pool is decreased by the used amount\\n            //\\n            // priceImpactUsd is calculated based on pricing assuming only depositAmount of tokenIn\\n            // was added to the pool\\n            // since impactAmount of tokenOut is added to the pool here, the calculation of\\n            // the tokenInPrice would not be entirely accurate\\n            int256 positiveImpactAmount = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenOut,\\n                _params.tokenOutPrice,\\n                _params.priceImpactUsd\\n            );\\n\\n            // calculate the usd amount using positiveImpactAmount since it may\\n            // be capped by the max available amount in the impact pool\\n            mintAmount += MarketUtils.usdToMarketTokenAmount(\\n                positiveImpactAmount.toUint256() * _params.tokenOutPrice.min,\\n                poolValue,\\n                supply\\n            );\\n\\n            // deposit the token out, that was withdrawn from the impact pool, to mint market tokens\\n            MarketUtils.applyDeltaToPoolAmount(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenOut,\\n                positiveImpactAmount\\n            );\\n        } else {\\n            // when there is a negative price impact factor,\\n            // less of the deposit amount is used to mint market tokens\\n            // for example, if 10 ETH is deposited and there is a negative price impact\\n            // only 9.995 ETH may be used to mint market tokens\\n            // the remaining 0.005 ETH will be stored in the swap impact pool\\n            int256 negativeImpactAmount = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenIn,\\n                _params.tokenInPrice,\\n                _params.priceImpactUsd\\n            );\\n            amountAfterFees -= (-negativeImpactAmount).toUint256();\\n        }\\n\\n        mintAmount += MarketUtils.usdToMarketTokenAmount(\\n            amountAfterFees * _params.tokenInPrice.min,\\n            poolValue,\\n            supply\\n        );\\n\\n        MarketUtils.applyDeltaToPoolAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            (amountAfterFees + feesForPool).toInt256()\\n        );\\n\\n        MarketToken(payable(_params.market.marketToken)).mint(_params.receiver, mintAmount);\\n\\n        return mintAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x5056ef0db481fec6ef259533d52e5aeb246c0725dab948897906dbd394e209f4\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../pricing/SwapPricingUtils.sol\\\";\\nimport \\\"../pricing/PositionPricingUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    // @param key the position's key\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    // @param isLong whether the position is long or short\\n    // @param executionPrice the price the position increase was executed at\\n    // @param sizeDeltaUsd the amount of size the position was increased by\\n    // @param collateralDeltaAmount the amount of collateral that was deposited into the position\\n    event PositionIncrease(\\n        bytes32 key,\\n        address indexed account,\\n        address indexed market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaInUsd,\\n        int256 collateralDeltaAmount\\n    );\\n\\n    // @param key the position's key\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    // @param isLong whether the position is long or short\\n    // @param executionPrice the price the position decrease was executed at\\n    // @param sizeDeltaUsd the amount of size the position was decreased by\\n    // @param collateralDeltaAmount the amount of collateral that was withdrawn from the position\\n    // @param positionPnlUsd the pnl realized\\n    // @param pnlAmountForPool the pnl amount for the pool\\n    // @param remainingCollateralAmount the amount of collateral remaining\\n    // @param outputAmount the amount sent to the user\\n    event PositionDecrease(\\n        bytes32 key,\\n        address indexed account,\\n        address indexed market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaInUsd,\\n        int256 collateralDeltaAmount,\\n        int256 positionPnlUsd,\\n        int256 pnlAmountForPool,\\n        int256 remainingCollateralAmount,\\n        uint256 outputAmount\\n    );\\n\\n    // @param key the key of the deposit\\n    // @param deposit the created deposit\\n    event DepositCreated(bytes32 key, Deposit.Props deposit);\\n    // @param key the key of the deposit\\n    event DepositExecuted(bytes32 key);\\n    // @param key the key of the deposit\\n    event DepositCancelled(bytes32 key);\\n\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the created withdrawal\\n    event WithdrawalCreated(bytes32 key, Withdrawal.Props withdrawal);\\n    // @param key the key of the withdrawal\\n    event WithdrawalExecuted(bytes32 key);\\n    // @param key the key of the withdrawal\\n    event WithdrawalCancelled(bytes32 key);\\n\\n    // @param key the key of the order\\n    // @param order the order created\\n    event OrderCreated(bytes32 key, Order.Props order);\\n    // @param key the key of the order\\n    // @param sizeDeltaUsd the updated sizeDeltaUsd\\n    // @param triggerPrice the updated triggerPrice\\n    // @param acceptablePrice the updated acceptablePrice\\n    event OrderUpdated(\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 triggerPrice,\\n        uint256 acceptablePrice\\n    );\\n    // @param key the key of the order\\n    // @param reason the reason the order was cancelled\\n    event OrderCancelled(bytes32 key, string reason);\\n    // @param key the key of the order\\n    event OrderExecuted(bytes32 key);\\n    // @param key the key of the order\\n    // @param reason the reason the order was frozen\\n    event OrderFrozen(bytes32 key, string reason);\\n\\n    // @param action the type of swap\\n    // @param fees SwapPricingUtils.SwapFees\\n    event SwapFeesCollected(bytes32 action, SwapPricingUtils.SwapFees fees);\\n    // @param isIncrease whether it is position increase or decrease\\n    // @param fees PositionPricingUtils.PositionFees\\n    event PositionFeesCollected(bool isIncrease, PositionPricingUtils.PositionFees fees);\\n\\n    // @param market the market of the pool\\n    // @param token the token of the pool\\n    // @param delta the update amount\\n    // @param nextValue the new pool amount\\n    event PoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue);\\n    // @param market the market of the swap impact pool\\n    // @param token the token of the swap impact pool\\n    // @param delta the update amount\\n    // @param nextValue the new swap impact pool amount\\n    event SwapImpactPoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue);\\n    // @param market the market of the position impact pool\\n    // @param token the token of the position impact pool\\n    // @param delta the update amount\\n    // @param nextValue the new position impact pool amount\\n    event PositionImpactPoolAmountUpdated(address market, int256 delta, uint256 nextValue);\\n    // @param market the market for the open interest\\n    // @param collateralToken the collateralToken for the open interest\\n    // @param isLong whether the open interest is for long or short\\n    // @param delta the update amount\\n    // @param nextValue the new open interest amount\\n    event OpenInterestUpdated(address market, address collateralToken, bool isLong, int256 delta, uint256 nextValue);\\n    // @param market the market for the open interest in tokens\\n    // @param collateralToken the collateralToken for the open interest in tokens\\n    // @param isLong whether the open interest is for long or short\\n    // @param delta the update amount\\n    // @param nextValue the new open interest amount in tokens\\n    event OpenInterestInTokensUpdated(address market, address collateralToken, bool isLong, int256 delta, uint256 nextValue);\\n    // @param market the market for the claimable funding\\n    // @param token the token for the claimable funding\\n    // @param account the account for the claimable funding\\n    // @param delta the update amount\\n    // @param nextvalue the new claimable funding\\n    event ClaimableFundingUpdated(address market, address token, address account, uint256 delta, uint256 nextValue);\\n    // @param market the market for the claimed funding fees\\n    // @param token the token claimed\\n    // @param account the account that claimed\\n    // @param receiver the address that received the claimed amount\\n    // @param amount the amount claimed\\n    event FundingFeesClaimed(address market, address token, address account, address receiver, uint256 amount);\\n    // @param pnlToPoolFactor the pnl to pool factor\\n    // @param maxPnlFactor the max pnl factor\\n    // @param shouldEnableAdl whether ADL should be enabled\\n    event AdlStateUpdated(int256 pnlToPoolFactor, uint256 maxPnlFactor, bool shouldEnableAdl);\\n    // @param market the trading market\\n    // @param token the token the discount was in\\n    // @param trader the trader who received the discount\\n    // @param amount the discount amount\\n    event TraderReferralDiscountApplied(address market, address token, address trader, uint256 amount);\\n    // @param market the trading market\\n    // @param token the token reward is in\\n    // @param affiliate the affiliate who received the reward\\n    // @param trader the trader who made the trade\\n    // @param amount the reward amount\\n    event AffiliateRewardEarned(address market, address token, address affiliate, address trader, uint256 amount);\\n    // @param market the trading market\\n    // @param token the token reward is in\\n    // @param account the account that claimed the reward\\n    // @param receiver the address that received the claimed amount\\n    // @param amount the reward amount\\n    event AffiliateRewardClaimed(address market, address token, address account, address receiver, uint256 amount);\\n\\n    // @param fundingFeeAmount the funding fee amount to be paid\\n    // @param collateralAmount the amount of collateral in the position\\n    event InsufficientFundingFeePayment(uint256 fundingFeeAmount, uint256 collateralAmount);\\n\\n    // @param market the trading market\\n    // @param collateralToken the collateral token\\n    // @param isLong whether it is for the long or short side\\n    // @param delta the update amount\\n    // @param nextvalue the new collateral sum\\n    event CollateralSumUpdated(\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    );\\n\\n    // @param token the token for the price\\n    // @param minPrice the min price of the token\\n    // @param maxPrice the max price of the token\\n    // @param isPrimary whether it is the primary price\\n    // @param isPriceFeed whether the price is from a price feed\\n    event OraclePriceUpdated(address token, uint256 minPrice, uint256 maxPrice, bool isPrimary, bool isPriceFeed);\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @param market the market of the pool\\n    // @param token the token of the pool\\n    // @param delta the update amount\\n    // @param nextValue the new pool amount\\n    function emitPoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue) external onlyController {\\n        emit PoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    // @param market the market of the swap impact pool\\n    // @param token the token of the swap impact pool\\n    // @param delta the update amount\\n    // @param nextValue the new swap impact pool amount\\n    function emitSwapImpactPoolAmountUpdated(address market, address token, int256 delta, uint256 nextValue) external onlyController {\\n        emit SwapImpactPoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    // @param market the market of the position impact pool\\n    // @param token the token of the position impact pool\\n    // @param delta the update amount\\n    // @param nextValue the new position impact pool amount\\n    function emitPositionImpactPoolAmountUpdated(address market, int256 delta, uint256 nextValue) external onlyController {\\n        emit PositionImpactPoolAmountUpdated(market, delta, nextValue);\\n    }\\n\\n    // @param market the market for the open interest\\n    // @param collateralToken the collateralToken for the open interest\\n    // @param isLong whether the open interest is for long or short\\n    // @param delta the update amount\\n    // @param nextValue the new open interest amount\\n    function emitOpenInterestUpdated(address market, address collateralToken, bool isLong, int256 delta, uint256 nextValue) external onlyController {\\n        emit OpenInterestUpdated(market, collateralToken, isLong, delta, nextValue);\\n    }\\n\\n    // @param market the market for the open interest in tokens\\n    // @param collateralToken the collateralToken for the open interest in tokens\\n    // @param isLong whether the open interest is for long or short\\n    // @param delta the update amount\\n    // @param nextValue the new open interest amount in tokens\\n    function emitOpenInterestInTokensUpdated(address market, address collateralToken, bool isLong, int256 delta, uint256 nextValue) external onlyController {\\n        emit OpenInterestInTokensUpdated(market, collateralToken, isLong, delta, nextValue);\\n    }\\n\\n    // @param market the market for the claimable funding\\n    // @param token the token for the claimable funding\\n    // @param account the account for the claimable funding\\n    // @param delta the update amount\\n    // @param nextvalue the new claimable funding\\n    function emitClaimableFundingUpdated(address market, address token, address account, uint256 delta, uint256 nextValue) external onlyController {\\n        emit ClaimableFundingUpdated(market, token, account, delta, nextValue);\\n    }\\n\\n    // @param market the market for the claimed funding fees\\n    // @param token the token claimed\\n    // @param account the account that claimed\\n    // @param receiver the address that received the claimed amount\\n    // @param amount the amount claimed\\n    function emitFundingFeesClaimed(address market, address token, address account, address receiver, uint256 amount) external onlyController {\\n        emit FundingFeesClaimed(market, token, account, receiver, amount);\\n    }\\n\\n    // @param pnlToPoolFactor the pnl to pool factor\\n    // @param maxPnlFactor the max pnl factor\\n    // @param shouldEnableAdl whether ADL should be enabled\\n    function emitAdlStateUpdated(int256 pnlToPoolFactor, uint256 maxPnlFactor, bool shouldEnableAdl) external onlyController {\\n        emit AdlStateUpdated(pnlToPoolFactor, maxPnlFactor, shouldEnableAdl);\\n    }\\n\\n    // @param market the trading market\\n    // @param token the token the discount was in\\n    // @param trader the trader who received the discount\\n    // @param amount the discount amount\\n    function emitTraderReferralDiscountApplied(address market, address token, address trader, uint256 amount) external onlyController {\\n        emit TraderReferralDiscountApplied(market, token, trader, amount);\\n    }\\n\\n    // @param market the trading market\\n    // @param token the token reward is in\\n    // @param affiliate the affiliate who received the reward\\n    // @param trader the trader who made the trade\\n    // @param amount the reward amount\\n    function emitAffiliateRewardEarned(address market, address token, address affiliate, address trader, uint256 amount) external onlyController {\\n        emit AffiliateRewardEarned(market, token, affiliate, trader, amount);\\n    }\\n\\n    // @param market the trading market\\n    // @param token the token reward is in\\n    // @param account the account that claimed the reward\\n    // @param receiver the address that received the claimed amount\\n    // @param amount the reward amount\\n    function emitAffiliateRewardClaimed(address market, address token, address account, address receiver, uint256 amount) external onlyController {\\n        emit AffiliateRewardClaimed(market, token, account, receiver, amount);\\n    }\\n\\n    // @param market the trading market\\n    // @param collateralToken the collateral token\\n    // @param isLong whether it is for the long or short side\\n    // @param delta the update amount\\n    // @param nextvalue the new collateral sum\\n    function emitCollateralSumUpdated(\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external onlyController {\\n        emit CollateralSumUpdated(market, collateralToken, isLong, delta, nextValue);\\n    }\\n\\n    // @param key the key of the order\\n    // @param order the order created\\n    function emitOrderCreated(bytes32 key, Order.Props memory order) external onlyController {\\n        emit OrderCreated(key, order);\\n    }\\n\\n    // @param key the key of the order\\n    function emitOrderExecuted(bytes32 key) external onlyController {\\n        emit OrderExecuted(key);\\n    }\\n\\n    // @param key the key of the order\\n    // @param sizeDeltaUsd the updated sizeDeltaUsd\\n    // @param triggerPrice the updated triggerPrice\\n    // @param acceptablePrice the updated acceptablePrice\\n    function emitOrderUpdated(\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 triggerPrice,\\n        uint256 acceptablePrice\\n    ) external onlyController {\\n        emit OrderUpdated(key, sizeDeltaUsd, triggerPrice, acceptablePrice);\\n    }\\n\\n    // @param key the key of the order\\n    // @param reason the reason the order was cancelled\\n    function emitOrderCancelled(bytes32 key, string memory reason) external onlyController {\\n        emit OrderCancelled(key, reason);\\n    }\\n\\n    // @param key the key of the order\\n    // @param reason the reason the order was frozen\\n    function emitOrderFrozen(bytes32 key, string memory reason) external onlyController {\\n        emit OrderFrozen(key, reason);\\n    }\\n\\n    // @param key the key of the deposit\\n    // @param deposit the created deposit\\n    function emitDepositCreated(bytes32 key, Deposit.Props memory deposit) external onlyController {\\n        emit DepositCreated(key, deposit);\\n    }\\n\\n    // @param key the key of the deposit\\n    function emitDepositExecuted(bytes32 key) external onlyController {\\n        emit DepositExecuted(key);\\n    }\\n\\n    // @param key the key of the deposit\\n    function emitDepositCancelled(bytes32 key) external onlyController {\\n        emit DepositCancelled(key);\\n    }\\n\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the created withdrawal\\n    function emitWithdrawalCreated(bytes32 key, Withdrawal.Props memory withdrawal) external onlyController {\\n        emit WithdrawalCreated(key, withdrawal);\\n    }\\n\\n    // @param key the key of the withdrawal\\n    function emitWithdrawalExecuted(bytes32 key) external onlyController {\\n        emit WithdrawalExecuted(key);\\n    }\\n\\n    // @param key the key of the withdrawal\\n    function emitWithdrawalCancelled(bytes32 key) external onlyController {\\n        emit WithdrawalCancelled(key);\\n    }\\n\\n    // @param action the type of swap\\n    // @param fees SwapPricingUtils.SwapFees\\n    function emitSwapFeesCollected(bytes32 action, SwapPricingUtils.SwapFees calldata fees) external onlyController {\\n        emit SwapFeesCollected(action, fees);\\n    }\\n\\n    // @param isIncrease whether it is position increase or decrease\\n    // @param fees PositionPricingUtils.PositionFees\\n    function emitPositionFeesCollected(bool isIncrease, PositionPricingUtils.PositionFees calldata fees) external onlyController {\\n        emit PositionFeesCollected(isIncrease, fees);\\n    }\\n\\n    // @param token the token for the price\\n    // @param minPrice the min price of the token\\n    // @param maxPrice the max price of the token\\n    // @param isPrimary whether it is the primary price\\n    // @param isPriceFeed whether the price is from a price feed\\n    function emitOraclePriceUpdated(address token, uint256 minPrice, uint256 maxPrice, bool isPrimary, bool isPriceFeed) external onlyController {\\n        emit OraclePriceUpdated(token, minPrice, maxPrice, isPrimary, isPriceFeed);\\n    }\\n\\n    // @param key the position's key\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    // @param isLong whether the position is long or short\\n    // @param executionPrice the price the position increase was executed at\\n    // @param sizeDeltaUsd the amount of size the position was increased by\\n    // @param collateralDeltaAmount the amount of collateral that was deposited into the position\\n    function emitPositionIncrease(\\n        bytes32 key,\\n        address account,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaUsd,\\n        int256 collateralDeltaAmount\\n    ) external onlyController {\\n        emit PositionIncrease(\\n            key,\\n            account,\\n            market,\\n            collateralToken,\\n            isLong,\\n            executionPrice,\\n            sizeDeltaUsd,\\n            collateralDeltaAmount\\n        );\\n    }\\n\\n    // @param key the position's key\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    // @param isLong whether the position is long or short\\n    // @param executionPrice the price the position decrease was executed at\\n    // @param sizeDeltaUsd the amount of size the position was decreased by\\n    // @param collateralDeltaAmount the amount of collateral that was withdrawn from the position\\n    // @param positionPnlUsd the pnl realized\\n    // @param pnlAmountForPool the pnl amount for the pool\\n    // @param remainingCollateralAmount the amount of collateral remaining\\n    // @param outputAmount the amount sent to the user\\n    function emitPositionDecrease(\\n        bytes32 key,\\n        address account,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 executionPrice,\\n        uint256 sizeDeltaUsd,\\n        int256 collateralDeltaAmount,\\n        int256 positionPnlUsd,\\n        int256 pnlAmountForPool,\\n        int256 remainingCollateralAmount,\\n        uint256 outputAmount\\n    ) external onlyController {\\n        emit PositionDecrease(\\n            key,\\n            account,\\n            market,\\n            collateralToken,\\n            isLong,\\n            executionPrice,\\n            sizeDeltaUsd,\\n            collateralDeltaAmount,\\n            positionPnlUsd,\\n            pnlAmountForPool,\\n            remainingCollateralAmount,\\n            outputAmount\\n        );\\n    }\\n\\n    // @param fundingFeeAmount the funding fee amount to be paid\\n    // @param collateralAmount the amount of collateral in the position\\n    function emitInsufficientFundingFeePayment(uint256 fundingFeeAmount, uint256 collateralAmount) external onlyController {\\n        emit InsufficientFundingFeePayment(fundingFeeAmount, collateralAmount);\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function log1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function log2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function log3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function log4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfb676e84be872d368804d01ab6ef0d9b01052d3749e9cc8cce77c0c89892c483\",\"license\":\"BUSL-1.1\"},\"contracts/exchange/DepositHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../bank/FundReceiver.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../feature/FeatureUtils.sol\\\";\\n\\nimport \\\"../market/Market.sol\\\";\\nimport \\\"../market/MarketStore.sol\\\";\\nimport \\\"../market/MarketToken.sol\\\";\\n\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../deposit/DepositStore.sol\\\";\\nimport \\\"../deposit/DepositUtils.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../oracle/OracleModule.sol\\\";\\n\\n// @title DepositHandler\\n// @dev Contract to handle creation, execution and cancellation of deposits\\ncontract DepositHandler is ReentrancyGuard, FundReceiver, OracleModule {\\n    EventEmitter public immutable eventEmitter;\\n    DepositStore public immutable depositStore;\\n    MarketStore public immutable marketStore;\\n    Oracle public immutable oracle;\\n    FeeReceiver public immutable feeReceiver;\\n\\n    constructor(\\n        RoleStore _roleStore,\\n        DataStore _dataStore,\\n        EventEmitter _eventEmitter,\\n        DepositStore _depositStore,\\n        MarketStore _marketStore,\\n        Oracle _oracle,\\n        FeeReceiver _feeReceiver\\n    ) FundReceiver(_roleStore, _dataStore) {\\n        eventEmitter = _eventEmitter;\\n        depositStore = _depositStore;\\n        marketStore = _marketStore;\\n        oracle = _oracle;\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    receive() external payable {}\\n\\n    // @dev creates a deposit in the deposit store\\n    // @param account the depositing account\\n    // @param params DepositUtils.CreateDepositParams\\n    function createDeposit(\\n        address account,\\n        DepositUtils.CreateDepositParams calldata params\\n    ) external nonReentrant onlyController returns (bytes32) {\\n        FeatureUtils.validateFeature(dataStore, Keys.createDepositFeatureKey(address(this)));\\n\\n        return DepositUtils.createDeposit(\\n            dataStore,\\n            eventEmitter,\\n            depositStore,\\n            marketStore,\\n            account,\\n            params\\n        );\\n    }\\n\\n    // @dev executes a deposit\\n    // @param key the key of the deposit to execute\\n    // @param oracleParams OracleUtils.SetPricesParams\\n    function executeDeposit(\\n        bytes32 key,\\n        OracleUtils.SetPricesParams calldata oracleParams\\n    ) external nonReentrant onlyOrderKeeper {\\n        uint256 startingGas = gasleft();\\n\\n        try this._executeDeposit(\\n            key,\\n            oracleParams,\\n            msg.sender,\\n            startingGas\\n        ) {\\n        } catch Error(string memory reason) {\\n            // revert instead of cancel if the reason for failure is due to oracle params\\n            if (keccak256(abi.encode(reason)) == Keys.ORACLE_ERROR_KEY) {\\n                revert(reason);\\n            }\\n\\n            DepositUtils.cancelDeposit(\\n                dataStore,\\n                eventEmitter,\\n                depositStore,\\n                marketStore,\\n                key,\\n                msg.sender,\\n                startingGas\\n            );\\n        } catch {\\n            DepositUtils.cancelDeposit(\\n                dataStore,\\n                eventEmitter,\\n                depositStore,\\n                marketStore,\\n                key,\\n                msg.sender,\\n                startingGas\\n            );\\n        }\\n    }\\n\\n    // @dev executes a deposit\\n    // @param oracleParams OracleUtils.SetPricesParams\\n    // @param keeper the keeper executing the deposit\\n    // @param startingGas the starting gas\\n    function _executeDeposit(\\n        bytes32 key,\\n        OracleUtils.SetPricesParams memory oracleParams,\\n        address keeper,\\n        uint256 startingGas\\n    ) external\\n        onlySelf\\n        withOraclePrices(oracle, dataStore, eventEmitter, oracleParams)\\n    {\\n        FeatureUtils.validateFeature(dataStore, Keys.executeDepositFeatureKey(address(this)));\\n\\n        uint256[] memory oracleBlockNumbers = OracleUtils.getUncompactedOracleBlockNumbers(\\n            oracleParams.compactedOracleBlockNumbers,\\n            oracleParams.tokens.length\\n        );\\n\\n        DepositUtils.ExecuteDepositParams memory params = DepositUtils.ExecuteDepositParams(\\n            dataStore,\\n            eventEmitter,\\n            depositStore,\\n            marketStore,\\n            oracle,\\n            feeReceiver,\\n            key,\\n            oracleBlockNumbers,\\n            keeper,\\n            startingGas\\n        );\\n\\n        DepositUtils.executeDeposit(params);\\n    }\\n}\\n\",\"keccak256\":\"0x7085f47d6d74dc76ee5a2b439a0d6f5a5f800b52f853342f1d9c3ada7d65cb0b\",\"license\":\"BUSL-1.1\"},\"contracts/feature/FeatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\n// @title FeatureUtils\\n// @dev Library to validate if a feature is enabled or blocked\\nlibrary FeatureUtils {\\n    error BlockedFeature(bytes32 key);\\n\\n    // @dev get whether a feature is blocked\\n    // @param dataStore DataStore\\n    // @param key the feature key\\n    // @return whether the feature is blocked\\n    function isFeatureBlocked(DataStore dataStore, bytes32 key) internal view returns (bool) {\\n        return dataStore.getBool(key);\\n    }\\n\\n    // @dev validate whether a feature is enabled, reverts if the feature is blocked\\n    // @param dataStore DataStore\\n    // @param key the feature key\\n    function validateFeature(DataStore dataStore, bytes32 key) internal view {\\n        if (isFeatureBlocked(dataStore, key)) {\\n            revert BlockedFeature(key);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd84e5f2215b2756241b5ac93313c68cc3e765ec5a9e7b40db17d41fec12ed981\",\"license\":\"BUSL-1.1\"},\"contracts/fee/FeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/Bank.sol\\\";\\n\\n// @title FeeReceiver\\n// @dev Contract to receive fees\\ncontract FeeReceiver is Bank {\\n    // @param key the fee action\\n    // @param token the fee token\\n    // @param amount the fee amount\\n    event FeeReceived(bytes32 key, address token, uint256 amount);\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) Bank(_roleStore, _dataStore) {}\\n\\n    // @dev called after a fee is received\\n    // @param key the fee action\\n    // @param token the fee token\\n    // @param amount the fee amount\\n    function notifyFeeReceived(bytes32 key, address token, uint256 amount) external {\\n        emit FeeReceived(key, token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6ee5c037f5c76a2bc80a09f531da8858e27f1fe9a2ad9a1a734b25009170ca32\",\"license\":\"BUSL-1.1\"},\"contracts/fee/FeeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title FeeUtils\\n// @dev Library for fee actions\\nlibrary FeeUtils {\\n    // @dev key for deposit fees\\n    bytes32 public constant DEPOSIT_FEE = keccak256(abi.encode(\\\"DEPOSIT_FEE\\\"));\\n    // @dev key for withdrawal fees\\n    bytes32 public constant WITHDRAWAL_FEE = keccak256(abi.encode(\\\"WITHDRAWAL_FEE\\\"));\\n    // @dev key for swap fees\\n    bytes32 public constant SWAP_FEE = keccak256(abi.encode(\\\"SWAP_FEE\\\"));\\n    // @dev key for position fees\\n    bytes32 public constant POSITION_FEE = keccak256(abi.encode(\\\"POSITION_FEE\\\"));\\n}\\n\",\"keccak256\":\"0x3340d9c143a4d1b8a912bdb8975cf46378a19c3b12431ff33a2b9a42e9a626e1\",\"license\":\"BUSL-1.1\"},\"contracts/gas/GasUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../withdrawal/Withdrawal.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\nimport \\\"../order/OrderBaseUtils.sol\\\";\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title GasUtils\\n// @dev Library for execution fee estimation and payments\\nlibrary GasUtils {\\n    using Order for Order.Props;\\n\\n    // @param keeper address of the keeper\\n    // @param amount the amount of execution fee received\\n    event KeeperExecutionFee(address keeper, uint256 amount);\\n    // @param user address of the user\\n    // @param amount the amount of execution fee refunded\\n    event UserRefundFee(address user, uint256 amount);\\n\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n\\n    // @dev pay the keeper the execution fee and refund any excess amount to the user\\n    //\\n    // @param dataStore DataStore\\n    // @param bank the StrictBank contract holding the execution fee\\n    // @param executionFee the executionFee amount\\n    // @param startingGas the starting gas\\n    // @param keeper the keeper to pay\\n    // @param user the user to refund\\n    function payExecutionFee(\\n        DataStore dataStore,\\n        StrictBank bank,\\n        uint256 executionFee,\\n        uint256 startingGas,\\n        address keeper,\\n        address user\\n    ) external {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        bank.transferOut(dataStore, wnt, executionFee, address(this));\\n        IWNT(wnt).withdraw(executionFee);\\n\\n        uint256 gasUsed = startingGas - gasleft();\\n        uint256 executionFeeForKeeper = adjustGasUsage(dataStore, gasUsed) * tx.gasprice;\\n\\n        if (executionFeeForKeeper > executionFee) {\\n            executionFeeForKeeper = executionFee;\\n        }\\n\\n        TokenUtils.transferNativeToken(\\n            dataStore,\\n            keeper,\\n            executionFeeForKeeper\\n        );\\n\\n        emit KeeperExecutionFee(keeper, executionFeeForKeeper);\\n\\n        uint256 refundFeeForUser = executionFee - executionFeeForKeeper;\\n        if (refundFeeForUser == 0) {\\n            return;\\n        }\\n\\n        TokenUtils.transferNativeToken(\\n            dataStore,\\n            user,\\n            refundFeeForUser\\n        );\\n\\n        emit UserRefundFee(user, refundFeeForUser);\\n    }\\n\\n    // @dev validate that the provided executionFee is sufficient based on the estimatedGasLimit\\n    // @param dataStore DataStore\\n    // @param estimatedGasLimit the estimated gas limit\\n    // @param executionFee the execution fee provided\\n    function validateExecutionFee(DataStore dataStore, uint256 estimatedGasLimit, uint256 executionFee) internal view {\\n        uint256 gasLimit = adjustGasLimitForEstimate(dataStore, estimatedGasLimit);\\n        uint256 minExecutionFee = gasLimit * tx.gasprice;\\n        if (executionFee < minExecutionFee) {\\n            revert InsufficientExecutionFee(minExecutionFee, executionFee);\\n        }\\n    }\\n\\n    // @dev adjust the gas usage to pay a small amount to keepers\\n    // @param dataStore DataStore\\n    // @param gasUsed the amount of gas used\\n    function adjustGasUsage(DataStore dataStore, uint256 gasUsed) internal view returns (uint256) {\\n        uint256 baseGasLimit = dataStore.getUint(Keys.EXECUTION_FEE_BASE_GAS_LIMIT);\\n        uint256 multiplierFactor = dataStore.getUint(Keys.EXECUTION_FEE_MULTIPLIER_FACTOR);\\n        uint256 gasLimit = baseGasLimit + Precision.applyFactor(gasUsed, multiplierFactor);\\n        return gasLimit;\\n    }\\n\\n    // @dev adjust the estimated gas limit to help ensure the execution fee is sufficient during\\n    // the actual execution\\n    // @param dataStore DataStore\\n    // @param estimatedGasLimit the estimated gas limit\\n    function adjustGasLimitForEstimate(DataStore dataStore, uint256 estimatedGasLimit) internal view returns (uint256) {\\n        uint256 baseGasLimit = dataStore.getUint(Keys.ESTIMATED_FEE_BASE_GAS_LIMIT);\\n        uint256 multiplierFactor = dataStore.getUint(Keys.ESTIMATED_FEE_MULTIPLIER_FACTOR);\\n        uint256 gasLimit = baseGasLimit + Precision.applyFactor(estimatedGasLimit, multiplierFactor);\\n        return gasLimit;\\n    }\\n\\n    // @dev the estimated gas limit for deposits\\n    // @param dataStore DataStore\\n    // @param deposit the deposit to estimate the gas limit for\\n    function estimateExecuteDepositGasLimit(DataStore dataStore, Deposit.Props memory deposit) internal view returns (uint256) {\\n        if (deposit.longTokenAmount == 0 || deposit.shortTokenAmount == 0) {\\n            return dataStore.getUint(Keys.depositGasLimitKey(true)) + deposit.callbackGasLimit;\\n        }\\n\\n        return dataStore.getUint(Keys.depositGasLimitKey(false)) + deposit.callbackGasLimit;\\n    }\\n\\n    // @dev the estimated gas limit for withdrawals\\n    // @param dataStore DataStore\\n    // @param withdrawal the withdrawal to estimate the gas limit for\\n    function estimateExecuteWithdrawalGasLimit(DataStore dataStore, Withdrawal.Props memory withdrawal) internal view returns (uint256) {\\n        if (withdrawal.marketTokensLongAmount == 0 || withdrawal.marketTokensShortAmount == 0) {\\n            return dataStore.getUint(Keys.withdrawalGasLimitKey(true)) + withdrawal.callbackGasLimit;\\n        }\\n\\n        return dataStore.getUint(Keys.withdrawalGasLimitKey(false)) + withdrawal.callbackGasLimit;\\n    }\\n\\n    // @dev the estimated gas limit for orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteOrderGasLimit(DataStore dataStore, Order.Props memory order) internal view returns (uint256) {\\n        if (OrderBaseUtils.isIncreaseOrder(order.orderType())) {\\n            return estimateExecuteIncreaseOrderGasLimit(dataStore, order);\\n        }\\n\\n        if (OrderBaseUtils.isDecreaseOrder(order.orderType())) {\\n            return estimateExecuteDecreaseOrderGasLimit(dataStore, order);\\n        }\\n\\n        if (OrderBaseUtils.isSwapOrder(order.orderType())) {\\n            return estimateExecuteSwapOrderGasLimit(dataStore, order);\\n        }\\n\\n        OrderBaseUtils.revertUnsupportedOrderType();\\n    }\\n\\n    // @dev the estimated gas limit for increase orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteIncreaseOrderGasLimit(DataStore dataStore, Order.Props memory order) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        return dataStore.getUint(Keys.increaseOrderGasLimitKey()) + gasPerSwap * order.swapPath().length + order.callbackGasLimit();\\n    }\\n\\n    // @dev the estimated gas limit for decrease orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteDecreaseOrderGasLimit(DataStore dataStore, Order.Props memory order) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        return dataStore.getUint(Keys.decreaseOrderGasLimitKey()) + gasPerSwap * order.swapPath().length + order.callbackGasLimit();\\n    }\\n\\n    // @dev the estimated gas limit for swap orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteSwapOrderGasLimit(DataStore dataStore, Order.Props memory order) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        return dataStore.getUint(Keys.swapOrderGasLimitKey()) + gasPerSwap * order.swapPath().length + order.callbackGasLimit();\\n    }\\n}\\n\",\"keccak256\":\"0x9a032ece5f49985987c6fb496fea71245b9233ee1ec97a925791e92e23061804\",\"license\":\"BUSL-1.1\"},\"contracts/gov/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Governable\\n// @dev Contract to allow for governance restricted functions\\ncontract Governable {\\n    address public gov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    error Unauthorized(address msgSender, string role);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    // @dev updates the gov value to the input _gov value\\n    // @param _gov the value to update to\\n    function setGov(address _gov) external onlyGov {\\n        _setGov(_gov);\\n    }\\n\\n    // @dev updates the gov value to the input _gov value\\n    // @param _gov the value to update to\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x3a7f4c36ac230d902ab66dcb36a0cd2cde8543df032608b19b35e617f3be8c0d\",\"license\":\"BUSL-1.1\"},\"contracts/market/Market.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Market\\n// @dev Struct for markets\\n//\\n// Markets support both spot and perp trading, they are created by specifying a\\n// long collateral token, short collateral token and index token.\\n//\\n// Examples:\\n//\\n// - ETH/USD market with long collateral as ETH, short collateral as a stablecoin, index token as ETH\\n// - BTC/USD market with long collateral as WBTC, short collateral as a stablecoin, index token as BTC\\n// - SOL/USD market with long collateral as ETH, short collateral as a stablecoin, index token as SOL\\n//\\n// Liquidity providers can deposit either the long or short collateral token or\\n// both to mint liquidity tokens.\\n//\\n// The long collateral token is used to back long positions, while the short\\n// collateral token is used to back short positions.\\n//\\n// Liquidity providers take on the profits and losses of traders for the market\\n// that they provide liquidity for.\\n//\\n// Having separate markets allows for risk isolation, liquidity providers are\\n// only exposed to the markets that they deposit into, this potentially allow\\n// for permissionless listings.\\n//\\n// Traders can use either the long or short token as collateral for the market.\\nlibrary Market {\\n    // @param marketToken address of the market token for the market\\n    // @param indexToken address of the index token for the market\\n    // @param longToken address of the long token for the market\\n    // @param shortToken address of the short token for the market\\n    // @param data for any additional data\\n    struct Props {\\n        address marketToken;\\n        address indexToken;\\n        address longToken;\\n        address shortToken;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x04d275d095db0383c35f22c196d87e07ab6652b5fb6833513b9613b52fd3df87\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Market.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title MarketStore\\n// @dev Store for markets\\ncontract MarketStore is StrictBank {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Market for Market.Props;\\n\\n    mapping(address => Market.Props) internal markets;\\n    EnumerableSet.AddressSet internal marketTokens;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n\\n    // @dev set a market in the store\\n    // @param marketToken address of the market token of the market\\n    // @param market the market values to set\\n    function set(address marketToken, Market.Props memory market) external onlyController {\\n        markets[marketToken] = market;\\n        marketTokens.add(marketToken);\\n    }\\n\\n    // @dev delete a market from the store\\n    // @param marketToken the address of the market to delete\\n    function remove(address marketToken) external onlyController {\\n        delete markets[marketToken];\\n        marketTokens.remove(marketToken);\\n    }\\n\\n    // @dev check if a market exists\\n    // @param marketToken the address of the market to check\\n    function contains(address marketToken) external view returns (bool) {\\n        return marketTokens.contains(marketToken);\\n    }\\n\\n    // @dev get a market from the store\\n    // @param marketToken the address of the market token of the market\\n    // @return the market\\n    function get(address marketToken) external view returns (Market.Props memory) {\\n        return markets[marketToken];\\n    }\\n\\n    // @dev get the total number of markets in the store\\n    // @return the total number of markets in the store\\n    function getMarketCount() external view returns (uint256) {\\n        return marketTokens.length();\\n    }\\n\\n    // @dev get the market keys for the given indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the market keys for the given indexes\\n    function getMarketKeys(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return marketTokens.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x51fb3e1a309ba6ae4ebf88d2179899870bc6fa25161a8052366640296c7add93\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../bank/Bank.sol\\\";\\n\\n// @title MarketToken\\n// @dev The market token for a market, stores funds for the market and keeps track\\n// of the liquidity owners\\ncontract MarketToken is ERC20, Bank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) ERC20(\\\"GMX Market\\\", \\\"GM\\\") Bank(_roleStore, _dataStore) {\\n    }\\n\\n    // @dev mint market tokens to an account\\n    // @param account the account to mint to\\n    // @param amount the amount of tokens to mint\\n    function mint(address account, uint256 amount) external onlyController {\\n        _mint(account, amount);\\n    }\\n\\n    // @dev burn market tokens from an account\\n    // @param account the account to burn tokens for\\n    // @param amount the amount of tokens to burn\\n    function burn(address account, uint256 amount) external onlyController {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b725d7baf6258117529a8d7627195a088b1b45d7490ec9866974c10429d6f\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../deposit/DepositStore.sol\\\";\\nimport \\\"../withdrawal/Withdrawal.sol\\\";\\n\\nimport \\\"../market/Market.sol\\\";\\nimport \\\"../market/MarketToken.sol\\\";\\nimport \\\"../market/MarketStore.sol\\\";\\nimport \\\"../position/Position.sol\\\";\\nimport \\\"../position/PositionStore.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\n\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\nimport \\\"../fee/FeeReceiver.sol\\\";\\nimport \\\"../fee/FeeUtils.sol\\\";\\n\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\n// @title MarketUtils\\n// @dev Library for market functions\\nlibrary MarketUtils {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    using Deposit for Deposit.Props;\\n    using Market for Market.Props;\\n    using Position for Position.Props;\\n    using Order for Order.Props;\\n    using Price for Price.Props;\\n\\n    // @dev struct to store the prices of tokens of a market\\n    // @param indexTokenPrice price of the market's index token\\n    // @param longTokenPrice price of the market's long token\\n    // @param shortTokenPrice price of the market's short token\\n    struct MarketPrices {\\n        Price.Props indexTokenPrice;\\n        Price.Props longTokenPrice;\\n        Price.Props shortTokenPrice;\\n    }\\n\\n    // @dev _GetNextFundingAmountPerSizeCache struct used in getNextFundingAmountPerSize\\n    // to avoid stack too deep errors\\n    //\\n    // @param longOpenInterestWithLongCollateral amount of long open interest using the long token as collateral\\n    // @param longOpenInterestWithShortCollateral amount of long open interest using the short token as collateral\\n    // @param shortOpenInterestWithLongCollateral amount of short open interest using the long token as collateral\\n    // @param shortOpenInterestWithShortCollateral amount of short open interest using the short token as collateral\\n    //\\n    // @param longOpenInterest total long open interest for the market\\n    // @param shortOpenInterest total short open interest for the market\\n    //\\n    // @param longCollateralFundingPerSizeForLongs funding per size for longs using the long token as collateral\\n    // @param longCollateralFundingPerSizeForShorts funding per size for shorts using the long token as collateral\\n    // @param shortCollateralFundingPerSizeForLongs funding per size for longs using the short token as collateral\\n    // @param longCollateralFundingPerSizeForShorts funding per size for shorts using the short token as collateral\\n    //\\n    // @param durationInSeconds duration in seconds since the last funding update\\n    // @param fundingFactor the funding factor for the market\\n    //\\n    // @param diffUsd the absolute difference in long and short open interest for the market\\n    // @param totalOpenInterest the total long and short open interest for the market\\n    // @param fundingUsd the funding amount in USD\\n    //\\n    // @param fundingUsdForLongCollateral the funding amount in USD for positions using the long token as collateral\\n    // @param fundingUsdForShortCollateral the funding amount in USD for positions using the short token as collateral\\n    //\\n    // @param fundingAmountPerSizeForLongCollateralForLongs the next funding amount per size for longs using the long token as collateral\\n    // @param fundingAmountPerSizeForShortCollateralForLongs the next funding amount per size for longs using the short token as collateral\\n    // @param fundingAmountPerSizeForLongCollateralForShorts the next funding amount per size for shorts using the long token as collateral\\n    // @param fundingAmountPerSizeForShortCollateralForShorts the next funding amount per size for shorts using the short token as collateral\\n    struct _GetNextFundingAmountPerSizeCache {\\n        uint256 longOpenInterestWithLongCollateral;\\n        uint256 longOpenInterestWithShortCollateral;\\n        uint256 shortOpenInterestWithLongCollateral;\\n        uint256 shortOpenInterestWithShortCollateral;\\n\\n        uint256 longOpenInterest;\\n        uint256 shortOpenInterest;\\n\\n        int256 longCollateralFundingPerSizeForLongs;\\n        int256 longCollateralFundingPerSizeForShorts;\\n        int256 shortCollateralFundingPerSizeForLongs;\\n        int256 shortCollateralFundingPerSizeForShorts;\\n\\n        uint256 durationInSeconds;\\n        uint256 fundingFactor;\\n\\n        uint256 diffUsd;\\n        uint256 totalOpenInterest;\\n        uint256 fundingUsd;\\n\\n        uint256 fundingUsdForLongCollateral;\\n        uint256 fundingUsdForShortCollateral;\\n\\n        uint256 fundingAmountPerSizeForLongCollateralForLongs;\\n        uint256 fundingAmountPerSizeForShortCollateralForLongs;\\n        uint256 fundingAmountPerSizeForLongCollateralForShorts;\\n        uint256 fundingAmountPerSizeForShortCollateralForShorts;\\n    }\\n\\n    // the first item of the swap path indicates if\\n    // any pre-swap is needed to unify the pnlToken and collateralToken for decrease positions\\n    address public constant NO_SWAP = address(1);\\n    address public constant SWAP_PNL_TOKEN_TO_COLLATERAL_TOKEN = address(2);\\n    address public constant SWAP_COLLATERAL_TOKEN_TO_PNL_TOKEN = address(3);\\n\\n    error EmptyMarket();\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n\\n    // @dev get the market token's price\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longTokenPrice the price of the long token\\n    // @param shortTokenPrice the price of the short token\\n    // @param indexTokenPrice the price of the index token\\n    // @param maximize whether to maximize or minimize the market token price\\n    // @return returns the market token's price\\n    function getMarketTokenPrice(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        Price.Props memory indexTokenPrice,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        uint256 poolValue = getPoolValue(dataStore, market, longTokenPrice, shortTokenPrice, indexTokenPrice, maximize);\\n        if (poolValue == 0) { return 0; }\\n\\n        uint256 supply = getMarketTokenSupply(MarketToken(payable(market.marketToken)));\\n\\n        // it may be possible for supply to be zero here\\n        return poolValue * Precision.WEI_PRECISION / supply;\\n    }\\n\\n    // @dev get the total supply of the marketToken\\n    // @param marketToken the marketToken\\n    // @return the total supply of the marketToken\\n    function getMarketTokenSupply(MarketToken marketToken) internal view returns (uint256) {\\n        return marketToken.totalSupply();\\n    }\\n\\n    // @dev get the opposite token of the market\\n    // if the inputToken is the longToken return the shortToken and vice versa\\n    // @param inputToken the input token\\n    // @param market the market values\\n    // @return the opposite token\\n    function getOppositeToken(address inputToken, Market.Props memory market) internal pure returns (address) {\\n        if (inputToken == market.longToken) {\\n            return market.shortToken;\\n        }\\n        if (inputToken == market.shortToken) {\\n            return market.longToken;\\n        }\\n\\n        revert(\\\"MarketUtils: invalid inputToken\\\");\\n    }\\n\\n    // @dev get the token price from the stored MarketPrices\\n    // @param token the token to get the price for\\n    // @param the market values\\n    // @param the market token prices\\n    // @return the token price from the stored MarketPrices\\n    function getCachedTokenPrice(address token, Market.Props memory market, MarketPrices memory prices) internal pure returns (Price.Props memory) {\\n        if (token == market.longToken) {\\n            return prices.longTokenPrice;\\n        }\\n        if (token == market.shortToken) {\\n            return prices.shortTokenPrice;\\n        }\\n        if (token == market.indexToken) {\\n            return prices.indexTokenPrice;\\n        }\\n\\n        revert(\\\"MarketUtils: invalid token\\\");\\n    }\\n\\n    // @dev return the latest prices for the market tokens\\n    // the secondary price for market.indexToken is overwritten for certain order\\n    // types, use this value instead of the primary price for positions\\n    // @param market the market values\\n    // @param oracle Oracle\\n    function getMarketPricesForPosition(Market.Props memory market, Oracle oracle) internal view returns (MarketPrices memory) {\\n        return MarketPrices(\\n            oracle.getLatestPrice(market.indexToken),\\n            oracle.getLatestPrice(market.longToken),\\n            oracle.getLatestPrice(market.shortToken)\\n        );\\n    }\\n\\n    // @dev get the usd value of either the long or short tokens in the pool\\n    // without accounting for the pnl of open positions\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param whether to return the value for the long or short token\\n    // @return the usd value of either the long or short tokens in the pool\\n    function getPoolUsdWithoutPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        address token = isLong ? market.longToken : market.shortToken;\\n        uint256 poolAmount = getPoolAmount(dataStore, market.marketToken, token);\\n        uint256 tokenPrice = isLong ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\\n        return poolAmount * tokenPrice;\\n    }\\n\\n    // @dev get the USD value of a pool\\n    // the value of a pool is the worth of the liquidity provider tokens in the pool - pending trader pnl\\n    // we use the token index prices to calculate this and ignore price impact since if all positions were closed the\\n    // net price impact should be zero\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param longTokenPrice price of the long token\\n    // @param shortTokenPrice price of the short token\\n    // @param indexTokenPrice price of the index token\\n    // @param maximize whether to maximize or minimize the pool value\\n    // @return the USD value of a pool\\n    function getPoolValue(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        Price.Props memory indexTokenPrice,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        uint256 longTokenAmount = getPoolAmount(dataStore, market.marketToken, market.longToken);\\n        uint256 shortTokenAmount = getPoolAmount(dataStore, market.marketToken, market.shortToken);\\n\\n        uint256 value;\\n\\n        value = longTokenAmount * longTokenPrice.pickPrice(maximize);\\n        value += shortTokenAmount * shortTokenPrice.pickPrice(maximize);\\n\\n        value += getTotalBorrowingFees(dataStore, market.marketToken, market.longToken, market.shortToken, true);\\n        value += getTotalBorrowingFees(dataStore, market.marketToken, market.longToken, market.shortToken, false);\\n\\n        uint256 impactPoolAmount = getPositionImpactPoolAmount(dataStore, market.marketToken);\\n        value += impactPoolAmount * indexTokenPrice.pickPrice(maximize);\\n\\n        // !maximize should be used for net pnl as a larger pnl leads to a smaller pool value\\n        // and a smaller pnl leads to a larger pool value\\n        int256 pnl = getNetPnl(dataStore, market.marketToken, market.longToken, market.shortToken, indexTokenPrice, !maximize);\\n\\n        return Calc.sum(value, -pnl);\\n    }\\n\\n    // @dev get the net pending pnl for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param maximize whether to maximize or minimize the net pnl\\n    // @return the net pending pnl for a market\\n    function getNetPnl(\\n        DataStore dataStore,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        Price.Props memory indexTokenPrice,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        int256 longPnl = getPnl(dataStore, market, longToken, shortToken, indexTokenPrice, true, maximize);\\n        int256 shortPnl = getPnl(dataStore, market, longToken, shortToken, indexTokenPrice, false, maximize);\\n\\n        return longPnl + shortPnl;\\n    }\\n\\n    // @dev get the pending pnl for a market for either longs or shorts\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param isLong whether to get the pnl for longs or shorts\\n    // @param maximize whether to maximize or minimize the net pnl\\n    // @return the pending pnl for a market for either longs or shorts\\n    function getPnl(\\n        DataStore dataStore,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        Price.Props memory indexTokenPrice,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        int256 openInterest = getOpenInterest(dataStore, market, longToken, shortToken, isLong).toInt256();\\n        uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, longToken, shortToken, isLong);\\n        if (openInterest == 0 || openInterestInTokens == 0) {\\n            return 0;\\n        }\\n\\n        uint256 price = indexTokenPrice.pickPriceForPnl(isLong, maximize);\\n\\n        // openInterest is the cost of all positions, openInterestValue is the current worth of all positions\\n        int256 openInterestValue = (openInterestInTokens * price).toInt256();\\n        int256 pnl = isLong ? openInterestValue - openInterest : openInterest - openInterestValue;\\n\\n        return pnl;\\n    }\\n\\n    // @dev get the amount of tokens in the pool\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return the amount of tokens in the pool\\n    function getPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.poolAmountKey(market, token));\\n    }\\n\\n    // @dev increment the claimable funding amount\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the trading market\\n    // @param token the claimable token\\n    // @param account the account to increment for\\n    // @param delta the amount to increment\\n    function incrementClaimableFundingAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.incrementUint(\\n            Keys.claimableFundingAmountKey(market, token, account),\\n            delta\\n        );\\n\\n        eventEmitter.emitClaimableFundingUpdated(market, token, account, delta, nextValue);\\n    }\\n\\n    // @dev claim funding fees\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to claim for\\n    // @param token the token to claim\\n    // @param account the account to claim for\\n    // @param receiver the receiver to send the amount to\\n    function claimFundingFees(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver\\n    ) internal {\\n        bytes32 key = Keys.claimableFundingAmountKey(market, token, account);\\n\\n        uint256 claimableAmount = dataStore.getUint(key);\\n        dataStore.setUint(key, 0);\\n\\n        MarketToken(payable(market)).transferOut(\\n            dataStore,\\n            token,\\n            claimableAmount,\\n            receiver\\n        );\\n\\n        eventEmitter.emitFundingFeesClaimed(\\n            market,\\n            token,\\n            account,\\n            receiver,\\n            claimableAmount\\n        );\\n    }\\n\\n    // @dev apply a delta to the pool amount\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param token the token to apply to\\n    // @param delta the delta amount\\n    function applyDeltaToPoolAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.poolAmountKey(market, token),\\n            delta\\n        );\\n\\n        eventEmitter.emitPoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    // @dev cap the input priceImpactUsd by the available amount in the position impact pool\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param tokenPrice the price of the token\\n    // @param priceImpactUsd the calculated USD price impact\\n    // @return the capped priceImpactUsd\\n    function getCappedPositionImpactUsd(\\n        DataStore dataStore,\\n        address market,\\n        Price.Props memory tokenPrice,\\n        int256 priceImpactUsd\\n    ) internal view returns (int256) {\\n        if (priceImpactUsd < 0) {\\n            return priceImpactUsd;\\n        }\\n\\n        uint256 impactPoolAmount = getPositionImpactPoolAmount(dataStore, market);\\n        int256 maxPositiveImpactUsd = (impactPoolAmount * tokenPrice.min).toInt256();\\n\\n        if (priceImpactUsd > maxPositiveImpactUsd) {\\n            priceImpactUsd = maxPositiveImpactUsd;\\n        }\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev get the position impact pool amount\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return the position impact pool amount\\n    function getPositionImpactPoolAmount(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.positionImpactPoolAmountKey(market));\\n    }\\n\\n    // @dev get the swap impact pool amount\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return the swap impact pool amount\\n    function getSwapImpactPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.swapImpactPoolAmountKey(market, token));\\n    }\\n\\n    // @dev apply a delta to the swap impact pool\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param token the token to apply to\\n    // @param delta the delta amount\\n    function applyDeltaToSwapImpactPool(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.swapImpactPoolAmountKey(market, token),\\n            delta\\n        );\\n\\n        eventEmitter.emitSwapImpactPoolAmountUpdated(market, token, delta, nextValue);\\n    }\\n\\n    // @dev apply a delta to the position impact pool\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param delta the delta amount\\n    function applyDeltaToPositionImpactPool(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.positionImpactPoolAmountKey(market),\\n            delta,\\n            true\\n        );\\n\\n        eventEmitter.emitPositionImpactPoolAmountUpdated(market, delta, nextValue);\\n    }\\n\\n    // @dev apply a delta to the open interest\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param collateralToken the collateralToken to apply to\\n    // @param isLong whether to apply to the long or short side\\n    // @param delta the delta amount\\n    function applyDeltaToOpenInterest(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.openInterestKey(market, collateralToken, isLong),\\n            delta\\n        );\\n\\n        eventEmitter.emitOpenInterestUpdated(market, collateralToken, isLong, delta, nextValue);\\n    }\\n\\n    // @dev apply a delta to the open interest in tokens\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param collateralToken the collateralToken to apply to\\n    // @param isLong whether to apply to the long or short side\\n    // @param delta the delta amount\\n    function applyDeltaToOpenInterestInTokens(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.openInterestInTokensKey(market, collateralToken, isLong),\\n            delta\\n        );\\n\\n        eventEmitter.emitOpenInterestInTokensUpdated(market, collateralToken, isLong, delta, nextValue);\\n    }\\n\\n    // @dev apply a delta to the collateral sum\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param collateralToken the collateralToken to apply to\\n    // @param isLong whether to apply to the long or short side\\n    // @param delta the delta amount\\n    function applyDeltaToCollateralSum(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.collateralSumKey(market, collateralToken, isLong),\\n            delta\\n        );\\n\\n        eventEmitter.emitCollateralSumUpdated(market, collateralToken, isLong, delta, nextValue);\\n    }\\n\\n    // @dev update the funding amount per size values\\n    // @param dataStore DataStore\\n    // @param prices the prices of the market tokens\\n    // @param market the market to update\\n    // @param longToken the market's long token\\n    // @param shortToken the market's short token\\n    function updateFundingAmountPerSize(\\n        DataStore dataStore,\\n        MarketPrices memory prices,\\n        address market,\\n        address longToken,\\n        address shortToken\\n    ) external {\\n        (\\n            int256 longCollateralFundingPerSizeForLongs,\\n            int256 longCollateralFundingPerSizeForShorts,\\n            int256 shortCollateralFundingPerSizeForLongs,\\n            int256 shortCollateralFundingPerSizeForShorts\\n        ) = getNextFundingAmountPerSize(dataStore, prices, market, longToken, shortToken);\\n\\n        setFundingAmountPerSize(dataStore, market, longToken, true, longCollateralFundingPerSizeForLongs);\\n        setFundingAmountPerSize(dataStore, market, longToken, false, longCollateralFundingPerSizeForShorts);\\n        setFundingAmountPerSize(dataStore, market, shortToken, true, shortCollateralFundingPerSizeForLongs);\\n        setFundingAmountPerSize(dataStore, market, shortToken, false, shortCollateralFundingPerSizeForShorts);\\n\\n        dataStore.setUint(Keys.fundingUpdatedAtKey(market), block.timestamp);\\n    }\\n\\n    // @dev get the next funding amount per size values\\n    // @param dataStore DataStore\\n    // @param prices the prices of the market tokens\\n    // @param market the market to update\\n    // @param longToken the market's long token\\n    // @param shortToken the market's short token\\n    function getNextFundingAmountPerSize(\\n        DataStore dataStore,\\n        MarketPrices memory prices,\\n        address market,\\n        address longToken,\\n        address shortToken\\n    ) internal view returns (int256, int256, int256, int256) {\\n        _GetNextFundingAmountPerSizeCache memory cache;\\n        cache.longOpenInterestWithLongCollateral = getOpenInterest(dataStore, market, longToken, true);\\n        cache.longOpenInterestWithShortCollateral = getOpenInterest(dataStore, market, shortToken, true);\\n        cache.shortOpenInterestWithLongCollateral = getOpenInterest(dataStore, market, longToken, false);\\n        cache.shortOpenInterestWithShortCollateral = getOpenInterest(dataStore, market, shortToken, false);\\n\\n        cache.longOpenInterest = cache.longOpenInterestWithLongCollateral + cache.longOpenInterestWithShortCollateral;\\n        cache.shortOpenInterest = cache.shortOpenInterestWithLongCollateral + cache.shortOpenInterestWithShortCollateral;\\n\\n        cache.longCollateralFundingPerSizeForLongs = getFundingAmountPerSize(dataStore, market, longToken, true);\\n        cache.longCollateralFundingPerSizeForShorts = getFundingAmountPerSize(dataStore, market, longToken, false);\\n        cache.shortCollateralFundingPerSizeForLongs = getFundingAmountPerSize(dataStore, market, shortToken, true);\\n        cache.shortCollateralFundingPerSizeForShorts = getFundingAmountPerSize(dataStore, market, shortToken, false);\\n\\n        if (cache.longOpenInterest == 0 || cache.shortOpenInterest == 0) {\\n            return (\\n                cache.longCollateralFundingPerSizeForLongs,\\n                cache.longCollateralFundingPerSizeForShorts,\\n                cache.shortCollateralFundingPerSizeForLongs,\\n                cache.shortCollateralFundingPerSizeForShorts\\n            );\\n        }\\n\\n        cache.durationInSeconds = getSecondsSinceFundingUpdated(dataStore, market);\\n        cache.fundingFactor = getFundingFactor(dataStore, market);\\n\\n        cache.diffUsd = Calc.diff(cache.longOpenInterest, cache.shortOpenInterest);\\n        cache.totalOpenInterest = cache.longOpenInterest + cache.shortOpenInterest;\\n        cache.fundingUsd = (cache.fundingFactor * cache.diffUsd * cache.durationInSeconds) / cache.totalOpenInterest;\\n\\n        if (cache.longOpenInterest > cache.shortOpenInterest) {\\n            cache.fundingUsdForLongCollateral = cache.fundingUsd * cache.longOpenInterestWithLongCollateral / cache.longOpenInterest;\\n            cache.fundingUsdForShortCollateral = cache.fundingUsd * cache.longOpenInterestWithShortCollateral / cache.longOpenInterest;\\n        } else {\\n            cache.fundingUsdForLongCollateral = cache.fundingUsd * cache.shortOpenInterestWithLongCollateral / cache.shortOpenInterest;\\n            cache.fundingUsdForShortCollateral = cache.fundingUsd * cache.shortOpenInterestWithShortCollateral / cache.shortOpenInterest;\\n        }\\n\\n        // use Precision.FLOAT_PRECISION here because fundingUsdForLongCollateral or fundingUsdForShortCollateral divided by longTokenPrice\\n        // will give an amount in number of tokens which may be quite a small value and could become zero after being divided by longOpenInterest\\n        // the result will be the amount in number of tokens multiplied by Precision.FLOAT_PRECISION per 1 USD of size\\n        cache.fundingAmountPerSizeForLongCollateralForLongs = getPerSizeValue(cache.fundingUsdForLongCollateral / prices.longTokenPrice.max, cache.longOpenInterest);\\n        cache.fundingAmountPerSizeForShortCollateralForLongs = getPerSizeValue(cache.fundingUsdForShortCollateral / prices.shortTokenPrice.max, cache.longOpenInterest);\\n        cache.fundingAmountPerSizeForLongCollateralForShorts = getPerSizeValue(cache.fundingUsdForLongCollateral / prices.longTokenPrice.max, cache.shortOpenInterest);\\n        cache.fundingAmountPerSizeForShortCollateralForShorts = getPerSizeValue(cache.fundingUsdForShortCollateral / prices.shortTokenPrice.max, cache.shortOpenInterest);\\n\\n        if (cache.longOpenInterest > cache.shortOpenInterest) {\\n            // longs pay shorts\\n            cache.longCollateralFundingPerSizeForLongs += cache.fundingAmountPerSizeForLongCollateralForLongs.toInt256();\\n            cache.shortCollateralFundingPerSizeForLongs += cache.fundingAmountPerSizeForShortCollateralForLongs.toInt256();\\n            cache.shortCollateralFundingPerSizeForLongs -= cache.fundingAmountPerSizeForLongCollateralForShorts.toInt256();\\n            cache.shortCollateralFundingPerSizeForShorts -= cache.fundingAmountPerSizeForShortCollateralForShorts.toInt256();\\n        } else {\\n            // shorts pay longs\\n            cache.longCollateralFundingPerSizeForLongs -= cache.fundingAmountPerSizeForLongCollateralForLongs.toInt256();\\n            cache.shortCollateralFundingPerSizeForLongs -= cache.fundingAmountPerSizeForShortCollateralForLongs.toInt256();\\n            cache.shortCollateralFundingPerSizeForLongs += cache.fundingAmountPerSizeForLongCollateralForShorts.toInt256();\\n            cache.shortCollateralFundingPerSizeForShorts += cache.fundingAmountPerSizeForShortCollateralForShorts.toInt256();\\n        }\\n\\n        return (\\n            cache.longCollateralFundingPerSizeForLongs,\\n            cache.longCollateralFundingPerSizeForShorts,\\n            cache.shortCollateralFundingPerSizeForLongs,\\n            cache.shortCollateralFundingPerSizeForShorts\\n        );\\n    }\\n\\n    // @dev update the cumulative borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to update\\n    // @param longToken the market's long token\\n    // @param shortToken the market's short token\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to update the long or short side\\n    function updateCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        MarketPrices memory prices,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        bool isLong\\n    ) external {\\n        uint256 borrowingFactor = getNextCumulativeBorrowingFactor(dataStore, prices, market, longToken, shortToken, isLong);\\n        setCumulativeBorrowingFactor(dataStore, market, isLong, borrowingFactor);\\n        dataStore.setUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market, isLong), block.timestamp);\\n    }\\n\\n    // @dev calculate the per size value based on the amount and totalSize\\n    // @param amount the amount\\n    // @param totalSize the total size\\n    // @return the per size value\\n    function getPerSizeValue(uint256 amount, uint256 totalSize) internal pure returns (uint256) {\\n        return (amount * Precision.FLOAT_PRECISION) / (totalSize / Precision.FLOAT_PRECISION);\\n    }\\n\\n    // @dev get the ratio of pnl to pool value\\n    // @param dataStore DataStore\\n    // @param marketStore MarketStore\\n    // @param oracle Oracle\\n    // @param market the trading market\\n    // @param isLong whether to get the value for the long or short side\\n    // @param maximize whether to maximize the factor\\n    // @return (pnl of positions) / (long or short pool value)\\n    function getPnlToPoolFactor(\\n        DataStore dataStore,\\n        MarketStore marketStore,\\n        Oracle oracle,\\n        address market,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        Market.Props memory _market = marketStore.get(market);\\n        MarketUtils.MarketPrices memory prices = MarketUtils.MarketPrices(\\n            oracle.getPrimaryPrice(_market.indexToken),\\n            oracle.getPrimaryPrice(_market.longToken),\\n            oracle.getPrimaryPrice(_market.shortToken)\\n        );\\n\\n        return getPnlToPoolFactor(dataStore, _market, prices, isLong, maximize);\\n    }\\n\\n    // @dev get the ratio of pnl to pool value\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to get the value for the long or short side\\n    // @param maximize whether to maximize the factor\\n    // @return (pnl of positions) / (long or short pool value)\\n    function getPnlToPoolFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong);\\n\\n        int256 pnl = getPnl(\\n            dataStore,\\n            market.marketToken,\\n            market.longToken,\\n            market.shortToken,\\n            prices.indexTokenPrice,\\n            isLong,\\n            maximize\\n        );\\n\\n        return pnl * Precision.FLOAT_PRECISION.toInt256() / poolUsd.toInt256();\\n    }\\n\\n    // @dev validate that the amount of tokens required to be reserved for positions\\n    // is below the configured threshold\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to check the long or short side\\n    function validateReserve(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view {\\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong);\\n\\n        uint256 reserveFactor = getReserveFactor(dataStore, market.marketToken, isLong);\\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\\n\\n        uint256 reservedUsd;\\n        if (isLong) {\\n            // for longs calculate the reserved USD based on the open interest and current indexTokenPrice\\n            // this works well for e.g. an ETH / USD market with long collateral token as WETH\\n            // the available amount to be reserved would scale with the price of ETH\\n            // this also works for e.g. a SOL / USD market with long collateral token as WETH\\n            // if the price of SOL increases more than the price of ETH, additional amounts would be\\n            // automatically reserved\\n            uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market.marketToken, market.longToken, market.shortToken, isLong);\\n            reservedUsd = openInterestInTokens * prices.indexTokenPrice.max;\\n        } else {\\n            // for shorts use the open interest as the reserved USD value\\n            // this works well for e.g. an ETH / USD market with short collateral token as USDC\\n            // the available amount to be reserved would not change with the price of ETH\\n            reservedUsd = getOpenInterest(dataStore, market.marketToken, market.longToken, market.shortToken, isLong);\\n        }\\n\\n        if (reservedUsd > maxReservedUsd) {\\n            revert InsufficientReserve(reservedUsd, maxReservedUsd);\\n        }\\n    }\\n\\n    // @dev update the swap impact pool amount, if it is a positive impact amount\\n    // cap the impact amount to the amount available in the swap impact pool\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param token the token to apply to\\n    // @param tokenPrice the price of the token\\n    // @param priceImpactUsd the USD price impact\\n    function applySwapImpactWithCap(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        Price.Props memory tokenPrice,\\n        int256 priceImpactUsd\\n    ) internal returns (int256) {\\n        // positive impact: minimize impactAmount, use tokenPrice.max\\n        // negative impact: maximize impactAmount, use tokenPrice.min\\n        uint256 price = priceImpactUsd > 0 ? tokenPrice.max : tokenPrice.min;\\n\\n        int256 impactAmount;\\n\\n        if (priceImpactUsd > 0) {\\n            // round positive impactAmount down, this will be deducted from the swap impact pool for the user\\n            impactAmount = priceImpactUsd / price.toInt256();\\n\\n            int256 maxImpactAmount = getSwapImpactPoolAmount(dataStore, market, token).toInt256();\\n            if (impactAmount > maxImpactAmount) {\\n                impactAmount = maxImpactAmount;\\n            }\\n        } else {\\n            // round negative impactAmount up, this will be deducted from the user\\n            impactAmount = Calc.roundUpDivision(priceImpactUsd, price);\\n        }\\n\\n        // if there is a positive impact, the impact pool amount should be reduced\\n        // if there is a negative impact, the impact pool amount should be increased\\n        applyDeltaToSwapImpactPool(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            token,\\n            -impactAmount\\n        );\\n\\n        return impactAmount;\\n    }\\n\\n    // @dev get the funding fee amount to be deducted or distributed\\n    //\\n    // a hasPendingFundingFee value is returned to indicate if there is a non-zero\\n    // pending funding fee even though the current funding fee is zero\\n    // this is because it is possible for there to be a funding fee that is too small\\n    // resulting in the fundingFeeAmount being zero after rounding\\n    // in this case the position's fundingAmountPerSize should not be updated, otherwise\\n    // a user could avoid paying funding fees by continually updating the position\\n    // before the funding fee becomes large enough to be chargeable\\n    //\\n    // @param latestFundingAmountPerSize the latest funding amount per size\\n    // @param positionFundingAmountPerSize the funding amount per size for the position\\n    // @param positionSizeInUsd the position size in USD\\n    //\\n    // @return (hasPendingFundingFee, fundingFeeAmount)\\n    function getFundingFeeAmount(\\n        int256 latestFundingAmountPerSize,\\n        int256 positionFundingAmountPerSize,\\n        uint256 positionSizeInUsd\\n    ) internal pure returns (bool, int256) {\\n        // the position is just being opened, so there are no funding fees\\n        if (positionFundingAmountPerSize == 0) {\\n            return (false, 0);\\n        }\\n\\n        int256 diff = (latestFundingAmountPerSize - positionFundingAmountPerSize);\\n        int256 amount = diff * (positionSizeInUsd.toInt256() / Precision.FLOAT_PRECISION.toInt256()) / Precision.FLOAT_PRECISION.toInt256();\\n\\n        return (amount == 0, amount);\\n    }\\n\\n    // @dev get the borrowing fees for a position\\n    // @param dataStore DataStore\\n    // @param position Position.Props\\n    // @return the borrowing fees for a position\\n    function getBorrowingFees(DataStore dataStore, Position.Props memory position) internal view returns (uint256) {\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, position.market, position.isLong);\\n        uint256 diffFactor = cumulativeBorrowingFactor - position.borrowingFactor;\\n        return Precision.applyFactor(position.sizeInUsd, diffFactor);\\n    }\\n\\n    // @dev get either the long or short open interest for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to get the long or short open interest\\n    // @return the long or short open interest for a market\\n    function getOpenInterest(\\n        DataStore dataStore,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 openInterestUsingLongTokenAsCollateral = getOpenInterest(dataStore, market, longToken, isLong);\\n        uint256 openInterestUsingShortTokenAsCollateral = getOpenInterest(dataStore, market, shortToken, isLong);\\n\\n        return openInterestUsingLongTokenAsCollateral + openInterestUsingShortTokenAsCollateral;\\n    }\\n\\n    // @dev the long and short open interest for a market based on the collateral token used\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateral token to check\\n    // @param isLong whether to check the long or short side\\n    function getOpenInterest(\\n        DataStore dataStore,\\n        address market,\\n        address collateralToken,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestKey(market, collateralToken, isLong));\\n    }\\n\\n    // @dev the long and short open interest in tokens for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to check the long or short side\\n    function getOpenInterestInTokens(\\n        DataStore dataStore,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 openInterestUsingLongTokenAsCollateral = getOpenInterestInTokens(dataStore, market, longToken, isLong);\\n        uint256 openInterestUsingShortTokenAsCollateral = getOpenInterestInTokens(dataStore, market, shortToken, isLong);\\n\\n        return openInterestUsingLongTokenAsCollateral + openInterestUsingShortTokenAsCollateral;\\n    }\\n\\n    // @dev the long and short open interest in tokens for a market based on the collateral token used\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateral token to check\\n    // @param isLong whether to check the long or short side\\n    function getOpenInterestInTokens(\\n        DataStore dataStore,\\n        address market,\\n        address collateralToken,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestInTokensKey(market, collateralToken, isLong));\\n    }\\n\\n    // @dev get the sum of open interest and pnl for a market\\n    // getOpenInterestInTokens * tokenPrice would not reflect pending positive pnl\\n    // for short positions, so getOpenInterestWithPnl should be used if that info is needed\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param isLong whether to check the long or short side\\n    // @param maximize whether to maximize or minimize the value\\n    // @return the sum of open interest and pnl for a market\\n    function getOpenInterestWithPnl(\\n        DataStore dataStore,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        Price.Props memory indexTokenPrice,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        uint256 openInterest = getOpenInterest(dataStore, market, longToken, shortToken, isLong);\\n        int256 pnl = getPnl(dataStore, market, longToken, shortToken, indexTokenPrice, isLong, maximize);\\n        return Calc.sum(openInterest, pnl);\\n    }\\n\\n    // @dev get the total amount of position collateral for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the total amount of position collateral for a market\\n    function getCollateralSum(DataStore dataStore, address market, address collateralToken, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.collateralSumKey(market, collateralToken, isLong));\\n    }\\n\\n    // @dev get the reserve factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the reserve factor for a market\\n    function getReserveFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.reserveFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the max pnl factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the max pnl factor for a market\\n    function getMaxPnlFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxPnlFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the max pnl factor for withdrawals a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the max pnl factor for withdrawals for a market\\n    function getMaxPnlFactorForWithdrawals(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxPnlFactorForWithdrawalsKey(market, isLong));\\n    }\\n\\n    // @dev get the funding factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return the funding factor for a market\\n    function getFundingFactor(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.fundingFactorKey(market));\\n    }\\n\\n    // @dev get the funding amount per size for a market based on collateralToken\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short size\\n    // @return the funding amount per size for a market based on collateralToken\\n    function getFundingAmountPerSize(DataStore dataStore, address market, address collateralToken, bool isLong) internal view returns (int256) {\\n        return dataStore.getInt(Keys.fundingAmountPerSizeKey(market, collateralToken, isLong));\\n    }\\n\\n    // @dev set the funding amount per size for a market based on collateralToken\\n    // @param dataStore DataStore\\n    // @param market the market to set\\n    // @param collateralToken the collateralToken to set\\n    // @param isLong whether to set it for the long or short side\\n    // @param value the value to set the funding amount per size to\\n    function setFundingAmountPerSize(DataStore dataStore, address market, address collateralToken, bool isLong, int256 value) internal returns (int256) {\\n        return dataStore.setInt(Keys.fundingAmountPerSizeKey(market, collateralToken, isLong), value);\\n    }\\n\\n    // @dev get the number of seconds since funding was updated for a market\\n    // @param market the market to check\\n    // @return the number of seconds since funding was updated for a market\\n    function getSecondsSinceFundingUpdated(DataStore dataStore, address market) internal view returns (uint256) {\\n        uint256 updatedAt = dataStore.getUint(Keys.fundingUpdatedAtKey(market));\\n        if (updatedAt == 0) { return 0; }\\n        return block.timestamp - updatedAt;\\n    }\\n\\n    // @dev get the borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the borrowing factor for a market\\n    function getBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.borrowingFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the cumulative borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the cumulative borrowing factor for a market\\n    function getCumulativeBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorKey(market, isLong));\\n    }\\n\\n    // @dev set the cumulative borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to set\\n    // @param isLong whether to set the long or short side\\n    // @param value the value to set the cumulative borrowing factor to\\n    function setCumulativeBorrowingFactor(DataStore dataStore, address market, bool isLong, uint256 value) internal {\\n        dataStore.setUint(Keys.cumulativeBorrowingFactorKey(market, isLong), value);\\n    }\\n\\n    // @dev get the timestamp of when the cumulative borrowing factor was last updated\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the timestamp of when the cumulative borrowing factor was last updated\\n    function getCumulativeBorrowingFactorUpdatedAt(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market, isLong));\\n    }\\n\\n    // @dev get the number of seconds since the cumulative borrowing factor was last updated\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the number of seconds since the cumulative borrowing factor was last updated\\n    function getSecondsSinceCumulativeBorrowingFactorUpdated(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        uint256 updatedAt = getCumulativeBorrowingFactorUpdatedAt(dataStore, market, isLong);\\n        if (updatedAt == 0) { return 0; }\\n        return block.timestamp - updatedAt;\\n    }\\n\\n    // @dev update the total borrowing amount after a position changes size\\n    // @param dataStore DataStore\\n    // @param market the market to update\\n    // @param isLong whether to update the long or short side\\n    // @param prevPositionSizeInUsd the previous position size in USD\\n    // @param prevPositionBorrowingFactor the previous position borrowing factor\\n    // @param nextPositionSizeInUsd the next position size in USD\\n    // @param nextPositionBorrowingFactor the next position borrowing factor\\n    function updateTotalBorrowing(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        uint256 prevPositionSizeInUsd,\\n        uint256 prevPositionBorrowingFactor,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) internal {\\n        uint256 totalBorrowing = getNextTotalBorrowing(\\n            dataStore,\\n            market,\\n            isLong,\\n            prevPositionSizeInUsd,\\n            prevPositionBorrowingFactor,\\n            nextPositionSizeInUsd,\\n            nextPositionBorrowingFactor\\n        );\\n\\n        setTotalBorrowing(dataStore, market, isLong, totalBorrowing);\\n    }\\n\\n    // @dev get the next total borrowing amount after a position changes size\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @param prevPositionSizeInUsd the previous position size in USD\\n    // @param prevPositionBorrowingFactor the previous position borrowing factor\\n    // @param nextPositionSizeInUsd the next position size in USD\\n    // @param nextPositionBorrowingFactor the next position borrowing factor\\n    function getNextTotalBorrowing(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        uint256 prevPositionSizeInUsd,\\n        uint256 prevPositionBorrowingFactor,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) internal view returns (uint256) {\\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market, isLong);\\n        totalBorrowing -= prevPositionSizeInUsd * prevPositionBorrowingFactor;\\n        totalBorrowing += nextPositionSizeInUsd * nextPositionBorrowingFactor;\\n\\n        return totalBorrowing;\\n    }\\n\\n    // @dev get the next cumulative borrowing factor\\n    // @param dataStore DataStore\\n    // @param prices the prices of the market tokens\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to check the long or short side\\n    function getNextCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        MarketPrices memory prices,\\n        address market,\\n        address longToken,\\n        address shortToken,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 durationInSeconds = getSecondsSinceCumulativeBorrowingFactorUpdated(dataStore, market, isLong);\\n        uint256 borrowingFactor = getBorrowingFactor(dataStore, market, isLong);\\n\\n        uint256 openInterestWithPnl = getOpenInterestWithPnl(dataStore, market, longToken, shortToken, prices.indexTokenPrice, isLong, true);\\n\\n        uint256 poolAmount = getPoolAmount(dataStore, market, isLong ? longToken : shortToken);\\n        uint256 poolTokenPrice = isLong ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\\n        uint256 poolUsd = poolAmount * poolTokenPrice;\\n\\n        uint256 adjustedFactor = durationInSeconds * borrowingFactor * openInterestWithPnl / poolUsd;\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, market, isLong);\\n\\n        return cumulativeBorrowingFactor + adjustedFactor;\\n    }\\n\\n    // @dev get the total borrowing fees\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to check the long or short side\\n    function getTotalBorrowingFees(DataStore dataStore, address market, address longToken, address shortToken, bool isLong) internal view returns (uint256) {\\n        uint256 openInterest = getOpenInterest(dataStore, market, longToken, shortToken, isLong);\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, market, isLong);\\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market, isLong);\\n        return openInterest * cumulativeBorrowingFactor - totalBorrowing;\\n    }\\n\\n    // @dev get the total borrowing value\\n    // the total borrowing value is the sum of position.borrowingFactor * position.size\\n    // for all positions of the market\\n    // if borrowing APR is 1000% for 100 years, the cumulativeBorrowingFactor could be as high as 100 * 1000 * (10 ** 30)\\n    // since position.size is a USD value with 30 decimals, under this scenario, there may be overflow issues\\n    // if open interest exceeds (2 ** 256) / (10 ** 30) / (100 * 1000 * (10 ** 30)) => 1,157,920,900,000 USD\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the total borrowing value\\n    function getTotalBorrowing(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.totalBorrowingKey(market, isLong));\\n    }\\n\\n    // @dev set the total borrowing value\\n    // @param dataStore DataStore\\n    // @param market the market to set\\n    // @param isLong whether to set the long or short side\\n    // @param value the value to set to\\n    function setTotalBorrowing(DataStore dataStore, address market, bool isLong, uint256 value) internal returns (uint256) {\\n        return dataStore.setUint(Keys.totalBorrowingKey(market, isLong), value);\\n    }\\n\\n    // @dev convert a USD value to number of market tokens\\n    // @param usdValue the input USD value\\n    // @param poolValue the value of the pool\\n    // @param supply the supply of market tokens\\n    // @return the number of market tokens\\n    function usdToMarketTokenAmount(\\n        uint256 usdValue,\\n        uint256 poolValue,\\n        uint256 supply\\n    ) internal pure returns (uint256) {\\n        if (supply == 0 || poolValue == 0) {\\n            return Precision.floatToWei(usdValue);\\n        }\\n\\n        // round market tokens down\\n        return supply * usdValue / poolValue;\\n    }\\n\\n    // @dev convert a number of market tokens to its USD value\\n    // @param marketTokenAmount the input number of market tokens\\n    // @param poolValue the value of the pool\\n    // @param supply the supply of market tokens\\n    // @return the USD value of the market tokens\\n    function marketTokenAmountToUsd(\\n        uint256 marketTokenAmount,\\n        uint256 poolValue,\\n        uint256 supply\\n    ) internal pure returns (uint256) {\\n        if (supply == 0 || poolValue == 0) {\\n            return 0;\\n        }\\n\\n        return marketTokenAmount * poolValue / supply;\\n    }\\n\\n    // @dev validate that a market exists\\n    // @param market the market to check\\n    function validateNonEmptyMarket(Market.Props memory market) internal pure {\\n        if (market.marketToken == address(0)) {\\n            revert EmptyMarket();\\n        }\\n    }\\n\\n    // @dev get a list of market values based on an input array of market addresses\\n    // @param marketStore MarketStore\\n    // @param swapPath list of market addresses\\n    function getMarkets(MarketStore marketStore, address[] memory swapPath) internal view returns (Market.Props[] memory) {\\n        Market.Props[] memory markets = new Market.Props[](swapPath.length);\\n\\n        for (uint256 i = 0; i < swapPath.length; i++) {\\n            address marketAddress = swapPath[i];\\n            if (\\n                marketAddress == NO_SWAP ||\\n                marketAddress == SWAP_PNL_TOKEN_TO_COLLATERAL_TOKEN ||\\n                marketAddress == SWAP_COLLATERAL_TOKEN_TO_PNL_TOKEN\\n            ) {\\n                    continue;\\n            }\\n\\n            Market.Props memory market = marketStore.get(marketAddress);\\n            validateNonEmptyMarket(market);\\n            markets[i] = market;\\n        }\\n\\n        return markets;\\n    }\\n}\\n\",\"keccak256\":\"0x09a295d0190108582317b94896ecb5d1caa17c71a07c80b85324e7fae8c70b0e\",\"license\":\"BUSL-1.1\"},\"contracts/nonce/NonceUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\n// @title NonceUtils\\n// @dev Library to keep track of an incrementing nonce value\\nlibrary NonceUtils {\\n    // @dev get the current nonce value\\n    // @param dataStore DataStore\\n    function getCurrentNonce(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.NONCE);\\n    }\\n\\n    // @dev increment the current nonce value\\n    // @param dataStore DataStore\\n    // @return the new nonce value\\n    function incrementNonce(DataStore dataStore) internal returns (uint256) {\\n        return dataStore.incrementUint(Keys.NONCE, 1);\\n    }\\n\\n    // @dev convenience function to create a bytes32 hash using the next nonce\\n    // it would be possible to use the nonce directly as an ID / key\\n    // however, for positions the key is a bytes32 value based on a hash of\\n    // the position values\\n    // so bytes32 is used instead for a standard key type\\n    // @param dataStore DataStore\\n    // @return bytes32 hash using the next nonce value\\n    function getNextKey(DataStore dataStore) internal returns (bytes32) {\\n        uint256 nonce = incrementNonce(dataStore);\\n        bytes32 key = keccak256(abi.encode(nonce));\\n\\n        return key;\\n    }\\n}\\n\",\"keccak256\":\"0x72fab6525c6ad6c7abe7f018f6bfda0b359099c829ef7f5f05f29b7e43c68862\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// @title IPriceFeed\\n// @dev Interface for a price feed\\ninterface IPriceFeed {\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xe85508440a7b9fc8b60b2594cc6d3bbc547d62bba1097ee85740faa84a4aae46\",\"license\":\"MIT\"},\"contracts/oracle/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\nimport \\\"./OracleStore.sol\\\";\\nimport \\\"./OracleUtils.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\nimport \\\"../chain/Chain.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\nimport \\\"../utils/Bits.sol\\\";\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\n// @title Oracle\\n// @dev Contract to validate and store signed values\\ncontract Oracle is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Price for Price.Props;\\n\\n    // @dev _SetPricesCache struct used in setPrices to avoid stack too deep errors\\n    // @param minBlockConfirmations the minimum block confirmations before the block\\n    // hash is not required to be part of the signed message for validation\\n    // @param prevOracleBlockNumber the previous oracle block number of the loop\\n    // @param oracleBlockNumber the current oracle block number of the loop\\n    // @param oracleTimestamp the current oracle timestamp of the loop\\n    // @param blockHash the hash of the current oracleBlockNumber of the loop\\n    // @param token the address of the current token of the loop\\n    // @param precision the precision used for multiplying\\n    // @param tokenOracleType the oracle type of the token, this allows oracle keepers\\n    // to sign prices based on different methodologies, and the oracle can be configured\\n    // to accept prices based on a specific methodology\\n    // @param priceIndex the current price index to retrieve from compactedMinPrices and compactedMaxPrices\\n    // to construct the minPrices and maxPrices array\\n    // @param signatureIndex the current signature index to retrieve from the signatures array\\n    // @param maxPriceAge the max allowed age of price values\\n    // @param minPriceIndex the index of the min price in minPrices for the current signer\\n    // @param maxPriceIndex the index of the max price in maxPrices for the current signer\\n    // @param minPrices the min prices\\n    // @param maxPrices the max prices\\n    struct _SetPricesCache {\\n        uint256 minBlockConfirmations;\\n        uint256 prevOracleBlockNumber;\\n        uint256 oracleBlockNumber;\\n        uint256 oracleTimestamp;\\n        bytes32 blockHash;\\n        address token;\\n        uint256 precision;\\n        bytes32 tokenOracleType;\\n        uint256 priceIndex;\\n        uint256 signatureIndex;\\n        uint256 maxPriceAge;\\n        uint256 minPriceIndex;\\n        uint256 maxPriceIndex;\\n        uint256[] minPrices;\\n        uint256[] maxPrices;\\n    }\\n\\n    bytes32 public immutable SALT;\\n\\n    uint256 public constant SIGNER_INDEX_LENGTH = 16;\\n    // subtract 1 as the first slot is used to store number of signers\\n    uint256 public constant MAX_SIGNERS = 256 / SIGNER_INDEX_LENGTH - 1;\\n    // signer indexes are recorded in a signerIndexFlags uint256 value to check for uniqueness\\n    uint256 public constant MAX_SIGNER_INDEX = 256;\\n\\n    OracleStore public oracleStore;\\n\\n    // tokensWithPrices stores the tokens with prices that have been set\\n    // this is used in clearAllPrices to help ensure that all token prices\\n    // set in setPrices are cleared after use\\n    EnumerableSet.AddressSet internal tokensWithPrices;\\n    // prices for the same token can be sent multiple times in one txn\\n    // the prices can be for different block numbers\\n    // the first occurrence of the token's price will be stored in primaryPrices\\n    // the second occurrence will be stored in secondaryPrices\\n    mapping(address => Price.Props) public primaryPrices;\\n    mapping(address => Price.Props) public secondaryPrices;\\n    // customPrices can be used to store custom price values\\n    // these prices will be cleared in clearAllPrices\\n    mapping(address => Price.Props) public customPrices;\\n\\n    error EmptyTokens();\\n    error InvalidBlockNumber(uint256 blockNumber);\\n    error MaxPriceAgeExceeded(uint256 blockNumber);\\n    error MinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error MaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 oracleBlockNumber, uint256 prevOracleBlockNumber);\\n    error MinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error MaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyPriceFeedMultiplier(address token);\\n    error EmptyFeedPrice(address token);\\n    error InvalidSignature(address recoveredSigner, address expectedSigner);\\n    error MaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error DuplicateSigner(uint256 signerIndex);\\n    error EmptyPrice(address token);\\n    error EmptyPrimaryPrice(address token);\\n    error EmptySecondaryPrice(address token);\\n    error EmptyLatestPrice(address token);\\n    error EmptyCustomPrice(address token);\\n\\n    constructor(\\n        RoleStore _roleStore,\\n        OracleStore _oracleStore\\n    ) RoleModule(_roleStore) {\\n        oracleStore = _oracleStore;\\n\\n        // sign prices with only the chainid and oracle name so that there is\\n        // less config required in the oracle nodes\\n        SALT = keccak256(abi.encode(block.chainid, \\\"xget-oracle-v1\\\"));\\n    }\\n\\n    // @dev validate and store signed prices\\n    //\\n    // The setPrices function is used to set the prices of tokens in the Oracle contract.\\n    // It accepts an array of tokens and a signerInfo parameter. The signerInfo parameter\\n    // contains information about the signers that have signed the transaction to set the prices.\\n    // The first 16 bits of the signerInfo parameter contain the number of signers, and the following\\n    // bits contain the index of each signer in the oracleStore. The function checks that the number\\n    // of signers is greater than or equal to the minimum number of signers required, and that\\n    // the signer indices are unique and within the maximum signer index. The function then calls\\n    // _setPrices and _setPricesFromPriceFeeds to set the prices of the tokens.\\n    //\\n    // Oracle prices are signed as a value together with a precision, this allows\\n    // prices to be compacted as uint32 values.\\n    //\\n    // The signed prices represent the price of one unit of the token using a value\\n    // with 30 decimals of precision.\\n    //\\n    // Representing the prices in this way allows for conversions between token amounts\\n    // and fiat values to be simplified, e.g. to calculate the fiat value of a given\\n    // number of tokens the calculation would just be: `token amount * oracle price`,\\n    // to calculate the token amount for a fiat value it would be: `fiat value / oracle price`.\\n    //\\n    // The trade-off of this simplicity in calculation is that tokens with a small USD\\n    // price and a lot of decimals may have precision issues it is also possible that\\n    // a token's price changes significantly and results in requiring higher precision.\\n    //\\n    // ## Example 1\\n    //\\n    // The price of ETH is 5000, and ETH has 18 decimals.\\n    //\\n    // The price of one unit of ETH is `5000 / (10 ^ 18), 5 * (10 ^ -15)`.\\n    //\\n    // To handle the decimals, multiply the value by `(10 ^ 30)`.\\n    //\\n    // Price would be stored as `5000 / (10 ^ 18) * (10 ^ 30) => 5000 * (10 ^ 12)`.\\n    //\\n    // For gas optimization, these prices are sent to the oracle in the form of a uint8\\n    // decimal multiplier value and uint32 price value.\\n    //\\n    // If the decimal multiplier value is set to 8, the uint32 value would be `5000 * (10 ^ 12) / (10 ^ 8) => 5000 * (10 ^ 4)`.\\n    //\\n    // With this config, ETH prices can have a maximum value of `(2 ^ 32) / (10 ^ 4) => 4,294,967,296 / (10 ^ 4) => 429,496.7296` with 4 decimals of precision.\\n    //\\n    // ## Example 2\\n    //\\n    // The price of BTC is 60,000, and BTC has 8 decimals.\\n    //\\n    // The price of one unit of BTC is `60,000 / (10 ^ 8), 6 * (10 ^ -4)`.\\n    //\\n    // Price would be stored as `60,000 / (10 ^ 8) * (10 ^ 30) => 6 * (10 ^ 26) => 60,000 * (10 ^ 22)`.\\n    //\\n    // BTC prices maximum value: `(2 ^ 64) / (10 ^ 2) => 4,294,967,296 / (10 ^ 2) => 42,949,672.96`.\\n    //\\n    // Decimals of precision: 2.\\n    //\\n    // ## Example 3\\n    //\\n    // The price of USDC is 1, and USDC has 6 decimals.\\n    //\\n    // The price of one unit of USDC is `1 / (10 ^ 6), 1 * (10 ^ -6)`.\\n    //\\n    // Price would be stored as `1 / (10 ^ 6) * (10 ^ 30) => 1 * (10 ^ 24)`.\\n    //\\n    // USDC prices maximum value: `(2 ^ 64) / (10 ^ 6) => 4,294,967,296 / (10 ^ 6) => 4294.967296`.\\n    //\\n    // Decimals of precision: 6.\\n    //\\n    // ## Example 4\\n    //\\n    // The price of DG is 0.00000001, and DG has 18 decimals.\\n    //\\n    // The price of one unit of DG is `0.00000001 / (10 ^ 18), 1 * (10 ^ -26)`.\\n    //\\n    // Price would be stored as `1 * (10 ^ -26) * (10 ^ 30) => 1 * (10 ^ 3)`.\\n    //\\n    // DG prices maximum value: `(2 ^ 64) / (10 ^ 11) => 4,294,967,296 / (10 ^ 11) => 0.04294967296`.\\n    //\\n    // Decimals of precision: 11.\\n    //\\n    // ## Decimal Multiplier\\n    //\\n    // The formula to calculate what the decimal multiplier value should be set to:\\n    //\\n    // Decimals: 30 - (token decimals) - (number of decimals desired for precision)\\n    //\\n    // - ETH: 30 - 18 - 4 => 8\\n    // - BTC: 30 - 8 - 2 => 20\\n    // - USDC: 30 - 6 - 6 => 18\\n    // - DG: 30 - 18 - 11 => 1\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param params OracleUtils.SetPricesParams\\n    function setPrices(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        OracleUtils.SetPricesParams memory params\\n    ) external onlyController {\\n        require(tokensWithPrices.length() == 0, \\\"Oracle: tokensWithPrices not cleared\\\");\\n\\n        if (params.tokens.length == 0) { revert EmptyTokens(); }\\n\\n        // first 16 bits of signer info contains the number of signers\\n        address[] memory signers = new address[](params.signerInfo & Bits.BITMASK_16);\\n\\n        if (signers.length < dataStore.getUint(Keys.MIN_ORACLE_SIGNERS)) {\\n            revert MinOracleSigners(signers.length, dataStore.getUint(Keys.MIN_ORACLE_SIGNERS));\\n        }\\n\\n        if (signers.length > MAX_SIGNERS) {\\n            revert MaxOracleSigners(signers.length, MAX_SIGNERS);\\n        }\\n\\n        uint256 signerIndexFlags;\\n\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            uint256 signerIndex = params.signerInfo >> (16 + 16 * i) & Bits.BITMASK_16;\\n\\n            if (signerIndex >= MAX_SIGNER_INDEX) {\\n                revert MaxSignerIndex(signerIndex, MAX_SIGNER_INDEX);\\n            }\\n\\n            uint256 signerIndexBit = 1 << signerIndex;\\n\\n            if (signerIndexFlags & signerIndexBit != 0) {\\n                revert DuplicateSigner(signerIndex);\\n            }\\n\\n            signerIndexFlags = signerIndexFlags | signerIndexBit;\\n\\n            signers[i] = oracleStore.getSigner(signerIndex);\\n        }\\n\\n        _setPrices(\\n            dataStore,\\n            eventEmitter,\\n            signers,\\n            params\\n        );\\n\\n        _setPricesFromPriceFeeds(dataStore, eventEmitter, params.priceFeedTokens);\\n    }\\n\\n    // @dev set the secondary price\\n    // @param token the token to set the price for\\n    // @param price the price value to set to\\n    function setSecondaryPrice(address token, Price.Props memory price) external onlyController {\\n        secondaryPrices[token] = price;\\n    }\\n\\n    // @dev set a custom price\\n    // @param token the token to set the price for\\n    // @param price the price value to set to\\n    function setCustomPrice(address token, Price.Props memory price) external onlyController {\\n        customPrices[token] = price;\\n    }\\n\\n    // @dev clear all prices\\n    function clearAllPrices() external onlyController {\\n        uint256 length = tokensWithPrices.length();\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = tokensWithPrices.at(0);\\n            delete primaryPrices[token];\\n            delete secondaryPrices[token];\\n            delete customPrices[token];\\n            tokensWithPrices.remove(token);\\n        }\\n    }\\n\\n    // @dev get the length of tokensWithPrices\\n    // @return the length of tokensWithPrices\\n    function getTokensWithPricesCount() external view returns (uint256) {\\n        return tokensWithPrices.length();\\n    }\\n\\n    // @dev get the tokens of tokensWithPrices for the specified indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the tokens of tokensWithPrices for the specified indexes\\n    function getTokensWithPrices(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return tokensWithPrices.valuesAt(start, end);\\n    }\\n\\n    // @dev get the primary price of a token\\n    // @param token the token to get the price for\\n    // @return the primary price of a token\\n    function getPrimaryPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory price = primaryPrices[token];\\n        if (price.isEmpty()) { revert EmptyPrimaryPrice(token); }\\n        return price;\\n    }\\n\\n    // @dev get the secondary price of a token\\n    // @param token the token to get the price for\\n    // @return the secondary price of a token\\n    function getSecondaryPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory price = secondaryPrices[token];\\n        if (price.isEmpty()) { revert EmptySecondaryPrice(token); }\\n        return price;\\n    }\\n\\n    // @dev get the latest price of a token\\n    // @param token the token to get the price for\\n    // @return the latest price of a token\\n    function getLatestPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory primaryPrice = primaryPrices[token];\\n        Price.Props memory secondaryPrice = secondaryPrices[token];\\n\\n        if (!secondaryPrice.isEmpty()) {\\n            return secondaryPrice;\\n        }\\n\\n        if (!primaryPrice.isEmpty()) {\\n            return primaryPrice;\\n        }\\n\\n        revert EmptyLatestPrice(token);\\n    }\\n\\n    // @dev get the custom price of a token\\n    // @param token the token to get the price for\\n    // @return the custom price of a token\\n    function getCustomPrice(address token) external view returns (Price.Props memory) {\\n        Price.Props memory price = customPrices[token];\\n        if (price.isEmpty()) { revert EmptyCustomPrice(token); }\\n        return price;\\n    }\\n\\n    // @dev get the price feed address for a token\\n    // @param dataStore DataStore\\n    // @param token the token to get the price feed for\\n    // @return the price feed for the token\\n    function getPriceFeed(DataStore dataStore, address token) public view returns (IPriceFeed) {\\n        address priceFeedAddress = dataStore.getAddress(Keys.priceFeedKey(token));\\n        require(priceFeedAddress != address(0), \\\"Oracle: invalid price feed\\\");\\n\\n        return IPriceFeed(priceFeedAddress);\\n    }\\n\\n    // @dev get the stable price of a token\\n    // @param dataStore DataStore\\n    // @param token the token to get the price for\\n    // @return the stable price of the token\\n    function getStablePrice(DataStore dataStore, address token) public view returns (uint256) {\\n        return dataStore.getUint(Keys.stablePriceKey(token));\\n    }\\n\\n    // @dev get the multiplier value to convert the external price feed price to the price of 1 unit of the token\\n    // represented with 30 decimals\\n    // for example, if USDC has 6 decimals and a price of 1 USD, one unit of USDC would have a price of\\n    // 1 / (10 ^ 6) * (10 ^ 30) => 1 * (10 ^ 24)\\n    // if the external price feed has 8 decimals, the price feed price would be 1 * (10 ^ 8)\\n    // in this case the priceFeedMultiplier should be 10 ^ 46\\n    // the conversion of the price feed price would be 1 * (10 ^ 8) * (10 ^ 46) / (10 ^ 30) => 1 * (10 ^ 24)\\n    // formula for decimals for price feed multiplier: 60 - (external price feed decimals) - (token decimals)\\n    //\\n    // @param dataStore DataStore\\n    // @param token the token to get the price feed multiplier for\\n    // @return the price feed multipler\\n    function getPriceFeedMultiplier(DataStore dataStore, address token) public view returns (uint256) {\\n        uint256 multiplier = dataStore.getUint(Keys.priceFeedMultiplierKey(token));\\n\\n        if (multiplier == 0) {\\n            revert EmptyPriceFeedMultiplier(token);\\n        }\\n\\n        return multiplier;\\n    }\\n\\n    // @dev validate and set prices\\n    // The _setPrices() function is a helper function that is called by the\\n    // setPrices() function. It takes in several parameters: a DataStore contract\\n    // instance, an EventEmitter contract instance, an array of signers, and an\\n    // OracleUtils.SetPricesParams struct containing information about the tokens\\n    // and their prices.\\n    // The function first initializes a _SetPricesCache struct to store some temporary\\n    // values that will be used later in the function. It then loops through the array\\n    // of tokens and sets the corresponding values in the cache struct. For each token,\\n    // the function also loops through the array of signers and validates the signatures\\n    // for the min and max prices for that token. If the signatures are valid, the\\n    // function calculates the median min and max prices and sets them in the DataStore\\n    // contract.\\n    // Finally, the function emits an event to signal that the prices have been set.\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param signers the signers of the prices\\n    // @param params OracleUtils.SetPricesParams\\n    function _setPrices(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address[] memory signers,\\n        OracleUtils.SetPricesParams memory params\\n    ) internal {\\n        _SetPricesCache memory cache;\\n        cache.minBlockConfirmations = dataStore.getUint(Keys.MIN_ORACLE_BLOCK_CONFIRMATIONS);\\n        cache.maxPriceAge = dataStore.getUint(Keys.MAX_ORACLE_PRICE_AGE);\\n\\n        for (uint256 i = 0; i < params.tokens.length; i++) {\\n            cache.oracleBlockNumber = OracleUtils.getUncompactedOracleBlockNumber(params.compactedOracleBlockNumbers, i);\\n            cache.oracleTimestamp = OracleUtils.getUncompactedOracleTimestamp(params.compactedOracleTimestamps, i);\\n\\n            if (cache.oracleBlockNumber > Chain.currentBlockNumber()) {\\n                revert InvalidBlockNumber(cache.oracleBlockNumber);\\n            }\\n\\n            if (cache.oracleTimestamp + cache.maxPriceAge < Chain.currentTimestamp()) {\\n                revert MaxPriceAgeExceeded(cache.oracleTimestamp);\\n            }\\n\\n            // block numbers must be in ascending order\\n            if (cache.oracleBlockNumber < cache.prevOracleBlockNumber) {\\n                revert BlockNumbersNotSorted(cache.oracleBlockNumber, cache.prevOracleBlockNumber);\\n            }\\n            cache.prevOracleBlockNumber = cache.oracleBlockNumber;\\n\\n            cache.blockHash = bytes32(0);\\n            if (Chain.currentBlockNumber() - cache.oracleBlockNumber <= cache.minBlockConfirmations) {\\n                cache.blockHash = Chain.getBlockHash(cache.oracleBlockNumber);\\n            }\\n\\n            cache.token = params.tokens[i];\\n            cache.precision = 10 ** OracleUtils.getUncompactedDecimal(params.compactedDecimals, i);\\n            cache.tokenOracleType = dataStore.getData(Keys.oracleTypeKey(cache.token));\\n\\n            cache.minPrices = new uint256[](signers.length);\\n            cache.maxPrices = new uint256[](signers.length);\\n\\n            for (uint256 j = 0; j < signers.length; j++) {\\n                cache.priceIndex = i * signers.length + j;\\n                cache.minPrices[j] = OracleUtils.getUncompactedPrice(params.compactedMinPrices, cache.priceIndex);\\n                cache.maxPrices[j] = OracleUtils.getUncompactedPrice(params.compactedMaxPrices, cache.priceIndex);\\n\\n                if (j == 0) { continue; }\\n\\n                // validate that minPrices are sorted in ascending order\\n                if (cache.minPrices[j - 1] > cache.minPrices[j]) {\\n                    revert MinPricesNotSorted(cache.token, cache.minPrices[j], cache.minPrices[j - 1]);\\n                }\\n\\n                // validate that maxPrices are sorted in ascending order\\n                if (cache.maxPrices[j - 1] > cache.maxPrices[j]) {\\n                    revert MaxPricesNotSorted(cache.token, cache.maxPrices[j], cache.maxPrices[j - 1]);\\n                }\\n            }\\n\\n            for (uint256 j = 0; j < signers.length; j++) {\\n                cache.signatureIndex = i * signers.length + j;\\n                cache.minPriceIndex = OracleUtils.getUncompactedPriceIndex(params.compactedMinPricesIndexes, cache.signatureIndex);\\n                cache.maxPriceIndex = OracleUtils.getUncompactedPriceIndex(params.compactedMaxPricesIndexes, cache.signatureIndex);\\n\\n                _validateSigner(\\n                    cache.oracleBlockNumber,\\n                    cache.oracleTimestamp,\\n                    cache.blockHash,\\n                    cache.token,\\n                    cache.tokenOracleType,\\n                    cache.precision,\\n                    cache.minPrices[cache.minPriceIndex],\\n                    cache.maxPrices[cache.maxPriceIndex],\\n                    params.signatures[cache.signatureIndex],\\n                    signers[j]\\n                );\\n            }\\n\\n            uint256 medianMinPrice = Array.getMedian(cache.minPrices) * cache.precision;\\n            uint256 medianMaxPrice = Array.getMedian(cache.maxPrices) * cache.precision;\\n\\n            if (medianMinPrice == 0 || medianMaxPrice == 0) {\\n                revert EmptyPrice(cache.token);\\n            }\\n\\n            if (primaryPrices[cache.token].isEmpty()) {\\n                eventEmitter.emitOraclePriceUpdated(cache.token, medianMinPrice, medianMaxPrice, true, false);\\n\\n                primaryPrices[cache.token] = Price.Props(\\n                    medianMinPrice,\\n                    medianMaxPrice\\n                );\\n            } else {\\n                eventEmitter.emitOraclePriceUpdated(cache.token, medianMinPrice, medianMaxPrice, false, false);\\n\\n                secondaryPrices[cache.token] = Price.Props(\\n                    medianMinPrice,\\n                    medianMaxPrice\\n                );\\n            }\\n\\n            tokensWithPrices.add(cache.token);\\n        }\\n    }\\n\\n    // @dev set prices using external price feeds to save costs for tokens with stable prices\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param priceFeedTokens the tokens to set the prices using the price feeds for\\n    function _setPricesFromPriceFeeds(DataStore dataStore, EventEmitter eventEmitter, address[] memory priceFeedTokens) internal {\\n        for (uint256 i = 0; i < priceFeedTokens.length; i++) {\\n            address token = priceFeedTokens[i];\\n\\n            require(primaryPrices[token].isEmpty(), \\\"Oracle: price already set\\\");\\n\\n            IPriceFeed priceFeed = getPriceFeed(dataStore, token);\\n\\n            (\\n                /* uint80 roundID */,\\n                int256 _price,\\n                /* uint256 startedAt */,\\n                /* uint256 timestamp */,\\n                /* uint80 answeredInRound */\\n            ) = priceFeed.latestRoundData();\\n\\n            uint256 price = SafeCast.toUint256(_price);\\n            uint256 precision = getPriceFeedMultiplier(dataStore, token);\\n\\n            price = price * precision / Precision.FLOAT_PRECISION;\\n\\n            if (price == 0) {\\n                revert EmptyFeedPrice(token);\\n            }\\n\\n            uint256 stablePrice = getStablePrice(dataStore, token);\\n\\n            Price.Props memory priceProps;\\n\\n            if (stablePrice > 0) {\\n                priceProps = Price.Props(\\n                    price < stablePrice ? price : stablePrice,\\n                    price < stablePrice ? stablePrice : price\\n                );\\n            } else {\\n                priceProps = Price.Props(\\n                    price,\\n                    price\\n                );\\n            }\\n\\n            primaryPrices[token] = priceProps;\\n\\n            tokensWithPrices.add(token);\\n\\n            eventEmitter.emitOraclePriceUpdated(token, priceProps.min, priceProps.max, true, true);\\n        }\\n    }\\n\\n    // @dev validate the signer of a price\\n    // @param oracleBlockNumber the block number used for the signed message hash\\n    // @param oracleTimestamp the timestamp used for the signed message hash\\n    // @param blockHash the block hash used for the signed message hash\\n    // @param token the token used for the signed message hash\\n    // @param precision the precision used for the signed message hash\\n    // @param minPrice the min price used for the signed message hash\\n    // @param maxPrice the max price used for the signed message hash\\n    // @param signature the signer's signature\\n    // @param expectedSigner the address of the expected signer\\n    function _validateSigner(\\n        uint256 oracleBlockNumber,\\n        uint256 oracleTimestamp,\\n        bytes32 blockHash,\\n        address token,\\n        bytes32 tokenOracleType,\\n        uint256 precision,\\n        uint256 minPrice,\\n        uint256 maxPrice,\\n        bytes memory signature,\\n        address expectedSigner\\n    ) internal view {\\n        bytes32 digest = ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encode(\\n                SALT,\\n                oracleBlockNumber,\\n                oracleTimestamp,\\n                blockHash,\\n                token,\\n                tokenOracleType,\\n                precision,\\n                minPrice,\\n                maxPrice\\n            ))\\n        );\\n\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        if (recoveredSigner != expectedSigner) {\\n            revert InvalidSignature(recoveredSigner, expectedSigner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4fb2224d07df2ea743ae8bd335994c28b33e6ef0414505726fc099e03939814\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\n// @title OracleModule\\n// @dev Provides convenience functions for interacting with the Oracle\\ncontract OracleModule {\\n    event OracleError(string reason);\\n\\n    // @dev sets oracle prices, perform any additional tasks required,\\n    // and clear the oracle prices after\\n    //\\n    // care should be taken to avoid re-entrancy while using this call\\n    // since re-entrancy could allow functions to be called with prices\\n    // meant for a different type of transaction\\n    // the tokensWithPrices.length check in oracle.setPrices should help\\n    // mitigate this\\n    //\\n    // @param oracle Oracle\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param params OracleUtils.SetPricesParams\\n    modifier withOraclePrices(\\n        Oracle oracle,\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        OracleUtils.SetPricesParams memory params\\n    ) {\\n        try oracle.setPrices(dataStore, eventEmitter, params) {\\n        } catch Error(string memory reason) {\\n            emit OracleError(reason);\\n            revert(Keys.ORACLE_ERROR);\\n        }\\n        _;\\n        oracle.clearAllPrices();\\n    }\\n}\\n\",\"keccak256\":\"0x9f8f877faeab0ad2e87b6c03324d18b5772ac94b4ae97882b9163bfb34a924d3\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\n// @title OracleStore\\n// @dev Stores the list of oracle signers\\ncontract OracleStore is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n\\n    event SignerAdded(address signer);\\n    event SignerRemoved(address signer);\\n\\n    EnumerableSet.AddressSet internal signers;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev adds a signer\\n    // @param account address of the signer to add\\n    function addSigner(address account) external onlyController {\\n        signers.add(account);\\n        emit SignerAdded(account);\\n    }\\n\\n    // @dev removes a signer\\n    // @param account address of the signer to remove\\n    function removeSigner(address account) external onlyController {\\n        signers.remove(account);\\n        emit SignerRemoved(account);\\n    }\\n\\n    // @dev get the total number of signers\\n    // @return the total number of signers\\n    function getSignerCount() external view returns (uint256) {\\n        return signers.length();\\n    }\\n\\n    // @dev get the signer at the specified index\\n    // @param index the index of the signer to get\\n    // @return the signer at the specified index\\n    function getSigner(uint256 index) external view returns (address) {\\n        return signers.at(index);\\n    }\\n\\n    // @dev get the signers for the specified indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the signers for the specified indexes\\n    function getSigners(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return signers.valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xc40276ff66d49f8385e3789393e9b34ea16d4eb35d488ae62219473644a754fd\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../utils/Bits.sol\\\";\\n\\n// @title OracleUtils\\n// @dev Libary for oracle functions\\nlibrary OracleUtils {\\n    // @dev SetPricesParams struct for values required in Oracle.setPrices\\n    // @param signerInfo compacted indexes of signers, the index is used to retrieve\\n    // the signer address from the OracleStore\\n    // @param tokens list of tokens to set prices for\\n    // @param compactedOracleBlockNumbers compacted oracle block numbers\\n    // @param compactedOracleTimestamps compacted oracle timestamps\\n    // @param compactedDecimals compacted decimals for prices\\n    // @param compactedMinPrices compacted min prices\\n    // @param compactedMinPricesIndexes compacted min price indexes\\n    // @param compactedMaxPrices compacted max prices\\n    // @param compactedMaxPricesIndexes compacted max price indexes\\n    // @param signatures signatures of the oracle signers\\n    // @param priceFeedTokens tokens to set prices for based on an external price feed value\\n    struct SetPricesParams {\\n        uint256 signerInfo;\\n        address[] tokens;\\n        uint256[] compactedOracleBlockNumbers;\\n        uint256[] compactedOracleTimestamps;\\n        uint256[] compactedDecimals;\\n        uint256[] compactedMinPrices;\\n        uint256[] compactedMinPricesIndexes;\\n        uint256[] compactedMaxPrices;\\n        uint256[] compactedMaxPricesIndexes;\\n        bytes[] signatures;\\n        address[] priceFeedTokens;\\n    }\\n\\n    // compacted prices have a length of 32 bits\\n    uint256 public constant COMPACTED_PRICE_BIT_LENGTH = 32;\\n    uint256 public constant COMPACTED_PRICE_BITMASK = Bits.BITMASK_32;\\n\\n    // compacted precisions have a length of 8 bits\\n    uint256 public constant COMPACTED_PRECISION_BIT_LENGTH = 8;\\n    uint256 public constant COMPACTED_PRECISION_BITMASK = Bits.BITMASK_8;\\n\\n    // compacted block numbers have a length of 64 bits\\n    uint256 public constant COMPACTED_BLOCK_NUMBER_BIT_LENGTH = 64;\\n    uint256 public constant COMPACTED_BLOCK_NUMBER_BITMASK = Bits.BITMASK_64;\\n\\n    // compacted timestamps have a length of 64 bits\\n    uint256 public constant COMPACTED_TIMESTAMP_BIT_LENGTH = 64;\\n    uint256 public constant COMPACTED_TIMESTAMP_BITMASK = Bits.BITMASK_64;\\n\\n    // compacted price indexes have a length of 8 bits\\n    uint256 public constant COMPACTED_PRICE_INDEX_BIT_LENGTH = 8;\\n    uint256 public constant COMPACTED_PRICE_INDEX_BITMASK = Bits.BITMASK_8;\\n\\n    error EmptyCompactedPrice(uint256 index);\\n    error EmptyCompactedBlockNumber(uint256 index);\\n    error EmptyCompactedTimestamp(uint256 index);\\n\\n    // @dev get the uncompacted price at the specified index\\n    // @param compactedPrices the compacted prices\\n    // @param index the index to get the uncompacted price at\\n    // @return the uncompacted price at the specified index\\n    function getUncompactedPrice(uint256[] memory compactedPrices, uint256 index) internal pure returns (uint256) {\\n        uint256 price = Array.getUncompactedValue(\\n            compactedPrices,\\n            index,\\n            COMPACTED_PRICE_BIT_LENGTH,\\n            COMPACTED_PRICE_BITMASK\\n        );\\n\\n        if (price == 0) { revert EmptyCompactedPrice(index); }\\n\\n        return price;\\n    }\\n\\n    // @dev get the uncompacted decimal at the specified index\\n    // @param compactedDecimals the compacted decimals\\n    // @param index the index to get the uncompacted decimal at\\n    // @return the uncompacted decimal at the specified index\\n    function getUncompactedDecimal(uint256[] memory compactedDecimals, uint256 index) internal pure returns (uint256) {\\n        uint256 decimal = Array.getUncompactedValue(\\n            compactedDecimals,\\n            index,\\n            COMPACTED_PRECISION_BIT_LENGTH,\\n            COMPACTED_PRECISION_BITMASK\\n        );\\n\\n        return decimal;\\n    }\\n\\n\\n    // @dev get the uncompacted price index at the specified index\\n    // @param compactedPriceIndexes the compacted indexes\\n    // @param index the index to get the uncompacted price index at\\n    // @return the uncompacted price index at the specified index\\n    function getUncompactedPriceIndex(uint256[] memory compactedPriceIndexes, uint256 index) internal pure returns (uint256) {\\n        uint256 priceIndex = Array.getUncompactedValue(\\n            compactedPriceIndexes,\\n            index,\\n            COMPACTED_PRICE_INDEX_BIT_LENGTH,\\n            COMPACTED_PRICE_INDEX_BITMASK\\n        );\\n\\n        return priceIndex;\\n\\n    }\\n\\n    // @dev get the uncompacted oracle block numbers\\n    // @param compactedOracleBlockNumbers the compacted oracle block numbers\\n    // @param length the length of the uncompacted oracle block numbers\\n    // @return the uncompacted oracle block numbers\\n    function getUncompactedOracleBlockNumbers(uint256[] memory compactedOracleBlockNumbers, uint256 length) internal pure returns (uint256[] memory) {\\n        uint256[] memory blockNumbers = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            blockNumbers[i] = getUncompactedOracleBlockNumber(compactedOracleBlockNumbers, i);\\n        }\\n\\n        return blockNumbers;\\n    }\\n\\n    // @dev get the uncompacted oracle block number\\n    // @param compactedOracleBlockNumbers the compacted oracle block numbers\\n    // @param index the index to get the uncompacted oracle block number at\\n    // @return the uncompacted oracle block number\\n    function getUncompactedOracleBlockNumber(uint256[] memory compactedOracleBlockNumbers, uint256 index) internal pure returns (uint256) {\\n        uint256 blockNumber = Array.getUncompactedValue(\\n            compactedOracleBlockNumbers,\\n            index,\\n            COMPACTED_BLOCK_NUMBER_BIT_LENGTH,\\n            COMPACTED_BLOCK_NUMBER_BITMASK\\n        );\\n\\n        if (blockNumber == 0) { revert EmptyCompactedBlockNumber(index); }\\n\\n        return blockNumber;\\n    }\\n\\n    // @dev get the uncompacted oracle timestamp\\n    // @param compactedOracleTimestamps the compacted oracle timestamps\\n    // @param index the index to get the uncompacted oracle timestamp at\\n    // @return the uncompacted oracle timestamp\\n    function getUncompactedOracleTimestamp(uint256[] memory compactedOracleTimestamps, uint256 index) internal pure returns (uint256) {\\n        uint256 blockNumber = Array.getUncompactedValue(\\n            compactedOracleTimestamps,\\n            index,\\n            COMPACTED_TIMESTAMP_BIT_LENGTH,\\n            COMPACTED_TIMESTAMP_BITMASK\\n        );\\n\\n        if (blockNumber == 0) { revert EmptyCompactedTimestamp(index); }\\n\\n        return blockNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x3ac7d455a5c1de40e194fbda4110b249aec8a64a1b82a9e43d5f1b2f5d68386f\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\n\\n// @title Order\\n// @dev Struct for orders\\nlibrary Order {\\n    using Order for Props;\\n\\n    enum OrderType {\\n        // @dev for LimitIncrease, LimitDecrease, StopLossDecrease orders, two prices for the\\n        // index token need to be recorded in the oracle\\n        // the price with the smaller block number is stored as the primary price while the price with the\\n        // larger block number is stored as the secondary price\\n        // the triggerPrice must be validated to be between the primary price and secondary price\\n        // LimitDecrease and StopLossDecrease are reduce-only orders\\n\\n        // @dev MarketSwap: swap token A to token B at the current market price\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\n        MarketSwap,\\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\n        LimitSwap,\\n        // @dev MarketIncrease: increase position at the current market price\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\n        MarketIncrease,\\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitIncrease,\\n        // @dev MarketDecrease: decrease position at the curent market price\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\n        MarketDecrease,\\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitDecrease,\\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopLossDecrease,\\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\\n        Liquidation\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // we use sub-structs here to avoid the issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param data for any additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes data;\\n    }\\n\\n    // @param account the account of the order\\n    // @param receiver the receiver for any token transfers\\n    // @param callbackContract the contract to call for callbacks\\n    // @param market the trading market\\n    // @param initialCollateralToken for increase orders, initialCollateralToken\\n    // is the token sent in by the user, the token will be swapped through the\\n    // specified swapPath, before being deposited into the position as collateral\\n    // for decrease orders, initialCollateralToken is the collateral token of the position\\n    // withdrawn collateral from the decrease of the position will be swapped\\n    // through the specified swapPath\\n    // for swaps, initialCollateralToken is the initial token sent it for the swap\\n    // @param swapPath an array of market addresses to swap through\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        address initialCollateralToken;\\n        address[] swapPath;\\n    }\\n\\n    // @param sizeDeltaUsd the requested change in position size\\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\\n    // is the amount of the initialCollateralToken sent in by the user\\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\\n    // collateralToken to withdraw\\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\\n    // in for the swap\\n    // @param triggerPrice the trigger price for non-market orders\\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\\n    // @param updatedAtBlock the block at which the order was last updated\\n    struct Numbers {\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n        uint256 updatedAtBlock;\\n    }\\n\\n    // @param orderType the order type\\n    // @param isLong whether the order is for a long or short\\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\\n    // transferring to the user\\n    // @param isFrozen whether the order is frozen\\n    struct Flags {\\n        OrderType orderType;\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n        bool isFrozen;\\n    }\\n\\n    // @dev the order account\\n    // @param props Props\\n    // @return the order account\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    // @dev the order receiver\\n    // @param props Props\\n    // @return the order receiver\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    // @dev the order callbackContract\\n    // @param props Props\\n    // @return the order callbackContract\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    // @dev the order market\\n    // @param props Props\\n    // @return the order market\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    // @dev the order initialCollateralToken\\n    // @param props Props\\n    // @return the order initialCollateralToken\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialCollateralToken;\\n    }\\n\\n    // @dev the order swapPath\\n    // @param props Props\\n    // @return the order swapPath\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.swapPath;\\n    }\\n\\n    // @dev the order sizeDeltaUsd\\n    // @param props Props\\n    // @return the order sizeDeltaUsd\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeDeltaUsd;\\n    }\\n\\n    // @dev the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @return the order initialCollateralDeltaAmount\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialCollateralDeltaAmount;\\n    }\\n\\n    // @dev the order triggerPrice\\n    // @param props Props\\n    // @return the order triggerPrice\\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.triggerPrice;\\n    }\\n\\n    // @dev the order acceptablePrice\\n    // @param props Props\\n    // @return the order acceptablePrice\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.acceptablePrice;\\n    }\\n\\n    // @dev the order executionFee\\n    // @param props Props\\n    // @return the order executionFee\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    // @dev the order callbackGasLimit\\n    // @param props Props\\n    // @return the order callbackGasLimit\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    // @dev the order minOutputAmount\\n    // @param props Props\\n    // @return the order minOutputAmount\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minOutputAmount;\\n    }\\n\\n    // @dev the order updatedAtBlock\\n    // @param props Props\\n    // @return the order updatedAtBlock\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    // @dev the order type\\n    // @param props Props\\n    // @return the order type\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\n        return props.flags.orderType;\\n    }\\n\\n    // @dev whether the order is for a long or short\\n    // @param props Props\\n    // @return whether the order is for a long or short\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    // @dev whether to unwrap the native token before transfers to the user\\n    // @param props Props\\n    // @return whether to unwrap the native token before transfers to the user\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    // @dev whether the order is frozen\\n    // @param props Props\\n    // @return whether the order is frozen\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\n        return props.flags.isFrozen;\\n    }\\n\\n    // @dev set the order account\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    // @dev set the order receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    // @dev set the order callbackContract\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    // @dev set the order market\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    // @dev set the order initialCollateralToken\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\\n        props.addresses.initialCollateralToken = value;\\n    }\\n\\n    // @dev set the order swapPath\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.swapPath = value;\\n    }\\n\\n    // @dev set the order sizeDeltaUsd\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\\n        props.numbers.sizeDeltaUsd = value;\\n    }\\n\\n    // @dev set the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialCollateralDeltaAmount = value;\\n    }\\n\\n    // @dev set the order triggerPrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.triggerPrice = value;\\n    }\\n\\n    // @dev set the order acceptablePrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.acceptablePrice = value;\\n    }\\n\\n    // @dev set the order executionFee\\n    // @param props Props\\n    // @param value the value to set to\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    // @dev set the order callbackGasLimit\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    // @dev set the order minOutputAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minOutputAmount = value;\\n    }\\n\\n    // @dev set the order updatedAtBlock\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtBlock = value;\\n    }\\n\\n    // @dev set the order type\\n    // @param props Props\\n    // @param value the value to set to\\n    function setOrderType(Props memory props, OrderType value) internal pure {\\n        props.flags.orderType = value;\\n    }\\n\\n    // @dev set whether the order is for a long or short\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsLong(Props memory props, bool value) internal pure {\\n        props.flags.isLong = value;\\n    }\\n\\n    // @dev set whether the native token should be unwrapped before being\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    // @dev set whether the order is frozen\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsFrozen(Props memory props, bool value) internal pure {\\n        props.flags.isFrozen = value;\\n    }\\n\\n    // @dev set the order.updatedAtBlock to the current block number\\n    // @param props Props\\n    function touch(Props memory props) internal view {\\n        props.setUpdatedAtBlock(Chain.currentBlockNumber());\\n    }\\n}\\n\",\"keccak256\":\"0x90db8ffd64ee636f05b585165c50efc2df5878c287ef8af0daf9ba57e01e25f0\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderBaseUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Order.sol\\\";\\nimport \\\"../market/Market.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\nimport \\\"../order/OrderStore.sol\\\";\\nimport \\\"../position/PositionStore.sol\\\";\\n\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../swap/SwapHandler.sol\\\";\\n\\n// @title Order\\n// @dev Libary for common order functions used in OrderUtils, IncreaseOrderUtils\\n// DecreaseOrderUtils, SwapOrderUtils\\nlibrary OrderBaseUtils {\\n    using Order for Order.Props;\\n    using Price for Price.Props;\\n\\n    // @dev CreateOrderParams struct used in createOrder to avoid stack\\n    // too deep errors\\n    //\\n    // @param receiver for order.receiver\\n    // @param callbackContract for order.callbackContract\\n    // @param market for order.market\\n    // @param initialCollateralToken for order.initialCollateralToken\\n    // @param swapPath for order.swapPath\\n    // @param sizeDeltaUsd for order.sizeDeltaUsd\\n    // @param triggerPrice for order.triggerPrice\\n    // @param acceptablePrice for order.acceptablePrice\\n    // @param executionFee for order.executionFee\\n    // @param callbackGasLimit for order.callbackGasLimit\\n    // @param minOutputAmount for order.minOutputAmount\\n    // @param orderType for order.orderType\\n    // @param isLong for order.isLong\\n    // @param shouldUnwrapNativeToken for order.shouldUnwrapNativeToken\\n    struct CreateOrderParams {\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        address initialCollateralToken;\\n        address[] swapPath;\\n\\n        uint256 sizeDeltaUsd;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n\\n        Order.OrderType orderType;\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    // @dev ExecuteOrderParams struct used in executeOrder to avoid stack\\n    // too deep errors\\n    //\\n    // @param key the key of the order to execute\\n    // @param order the order to execute\\n    // @param swapPathMarkets the market values of the markets in the swapPath\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param orderStore OrderStore\\n    // @param positionStore PositionStore\\n    // @param oracle Oracle\\n    // @param swapHandler SwapHandler\\n    // @param feeReceiver FeeReceiver\\n    // @param referralStorage IReferralStorage\\n    // @param oracleBlockNumbers the oracle block numbers for the prices in the oracle\\n    // @param market market values of the trading market\\n    // @param keeper the keeper sending the transaction\\n    // @param startingGas the starting gas\\n    // @param positionKey the key of the order's position\\n    struct ExecuteOrderParams {\\n        bytes32 key;\\n        Order.Props order;\\n        Market.Props[] swapPathMarkets;\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        OrderStore orderStore;\\n        PositionStore positionStore;\\n        Oracle oracle;\\n        SwapHandler swapHandler;\\n        FeeReceiver feeReceiver;\\n        IReferralStorage referralStorage;\\n        uint256[] oracleBlockNumbers;\\n        Market.Props market;\\n        address keeper;\\n        uint256 startingGas;\\n        bytes32 positionKey;\\n    }\\n\\n    error EmptyOrder();\\n    error UnsupportedOrderType();\\n\\n    // @dev check if an orderType is a market order\\n    // @param orderType the order type\\n    // @return whether an orderType is a market order\\n    function isMarketOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketSwap ||\\n               orderType == Order.OrderType.MarketIncrease ||\\n               orderType == Order.OrderType.MarketDecrease ||\\n               orderType == Order.OrderType.Liquidation;\\n    }\\n\\n    // @dev check if an orderType is a limit order\\n    // @param orderType the order type\\n    // @return whether an orderType is a limit order\\n    function isLimitOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.LimitSwap ||\\n               orderType == Order.OrderType.LimitIncrease ||\\n               orderType == Order.OrderType.LimitDecrease;\\n    }\\n\\n    // @dev check if an orderType is a swap order\\n    // @param orderType the order type\\n    // @return whether an orderType is a swap order\\n    function isSwapOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketSwap ||\\n               orderType == Order.OrderType.LimitSwap;\\n    }\\n\\n    // @dev check if an orderType is a position order\\n    // @param orderType the order type\\n    // @return whether an orderType is a position order\\n    function isPositionOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return isIncreaseOrder(orderType) || isDecreaseOrder(orderType);\\n    }\\n\\n    // @dev check if an orderType is an increase order\\n    // @param orderType the order type\\n    // @return whether an orderType is an increase order\\n    function isIncreaseOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketIncrease ||\\n               orderType == Order.OrderType.LimitIncrease;\\n    }\\n\\n    // @dev check if an orderType is a decrease order\\n    // @param orderType the order type\\n    // @return whether an orderType is a decrease order\\n    function isDecreaseOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketDecrease ||\\n               orderType == Order.OrderType.LimitDecrease ||\\n               orderType == Order.OrderType.StopLossDecrease ||\\n               orderType == Order.OrderType.Liquidation;\\n    }\\n\\n    // @dev check if an orderType is a liquidation order\\n    // @param orderType the order type\\n    // @return whether an orderType is a liquidation order\\n    function isLiquidationOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.Liquidation;\\n    }\\n\\n    // @dev set the price for increase / decrease orders\\n    //\\n    // for market orders, set the min and max values of the customPrice for the indexToken\\n    // to either secondaryPrice.min or secondaryPrice.max depending on whether the order\\n    // is an increase or decrease and whether it is for a long or short\\n    //\\n    // customPrice.min and customPrice.max will be equal in this case\\n    // this is because in getExecutionPrice the function will try to use the closest price which can fulfill\\n    // the order, if customPrice.min is set to secondaryPrice.min and customPrice.max is set to secondaryPrice.max\\n    // getExecutionPrice will pick a better price than what should be possible\\n    //\\n    // for limit / stop-loss orders, the min and max value will be set to the triggerPrice\\n    // and latest secondaryPrice value, this represents the price that the user desired the order\\n    // to be fulfilled at and the best oracle price that the order could be fulfilled at\\n    //\\n    // getExecutionPrice handles the logic for selecting the execution price to use\\n    //\\n    // @param oracle Oracle\\n    // @param indexToken the index token\\n    // @param orderType the order type\\n    // @param triggerPrice the order's triggerPrice\\n    // @param isLong whether the order is for a long or short\\n    function setExactOrderPrice(\\n        Oracle oracle,\\n        address indexToken,\\n        Order.OrderType orderType,\\n        uint256 triggerPrice,\\n        bool isLong\\n    ) internal {\\n        if (isSwapOrder(orderType)) {\\n            return;\\n        }\\n\\n        bool isIncrease = isIncreaseOrder(orderType);\\n        // increase order:\\n        //     - long: use the larger price\\n        //     - short: use the smaller price\\n        // decrease order:\\n        //     - long: use the smaller price\\n        //     - short: use the larger price\\n        bool shouldUseMaxPrice = isIncrease ? isLong : !isLong;\\n\\n        // set secondary price to primary price since increase / decrease positions use the secondary price for index token values\\n        if (orderType == Order.OrderType.MarketIncrease ||\\n            orderType == Order.OrderType.MarketDecrease ||\\n            orderType == Order.OrderType.Liquidation) {\\n\\n            Price.Props memory price = oracle.getPrimaryPrice(indexToken);\\n\\n            oracle.setCustomPrice(indexToken, Price.Props(\\n                price.pickPrice(shouldUseMaxPrice),\\n                price.pickPrice(shouldUseMaxPrice)\\n            ));\\n\\n            return;\\n        }\\n\\n        if (orderType == Order.OrderType.LimitIncrease ||\\n            orderType == Order.OrderType.LimitDecrease ||\\n            orderType == Order.OrderType.StopLossDecrease\\n        ) {\\n            uint256 primaryPrice = oracle.getPrimaryPrice(indexToken).pickPrice(shouldUseMaxPrice);\\n            uint256 secondaryPrice = oracle.getSecondaryPrice(indexToken).pickPrice(shouldUseMaxPrice);\\n\\n            // increase order:\\n            //     - long: validate descending price\\n            //     - short: validate ascending price\\n            // decrease order:\\n            //     - long: validate ascending price\\n            //     - short: validate descending price\\n            bool shouldValidateAscendingPrice = isIncrease ? !isLong : isLong;\\n\\n            if (shouldValidateAscendingPrice) {\\n                // check that the earlier price (primaryPrice) is smaller than the triggerPrice\\n                // and that the later price (secondaryPrice) is larger than the triggerPrice\\n                bool ok = primaryPrice <= triggerPrice && triggerPrice <= secondaryPrice;\\n                if (!ok) { revert(Keys.ORACLE_ERROR); }\\n\\n                oracle.setCustomPrice(indexToken, Price.Props(\\n                    triggerPrice, // min price that order can be executed with\\n                    secondaryPrice // max price that order can be executed with\\n                ));\\n            } else {\\n                // check that the earlier price (primaryPrice) is larger than the triggerPrice\\n                // and that the later price (secondaryPrice) is smaller than the triggerPrice\\n                bool ok = primaryPrice >= triggerPrice && triggerPrice >= secondaryPrice;\\n                if (!ok) { revert(Keys.ORACLE_ERROR); }\\n\\n                oracle.setCustomPrice(indexToken, Price.Props(\\n                    secondaryPrice, // min price that order can be executed with\\n                    triggerPrice // max price that order can be executed with\\n                ));\\n            }\\n\\n            return;\\n        }\\n\\n        revertUnsupportedOrderType();\\n    }\\n\\n    // @dev get the execution price for an order\\n    //\\n    // see setExactOrderPrice for information on the customPrice values\\n    //\\n    // for limit / stop-loss orders, the triggerPrice is returned here if it can\\n    // fulfill the acceptablePrice after factoring in price impact\\n    //\\n    // if the triggerPrice cannot fulfill the acceptablePrice, check if the acceptablePrice\\n    // can be fulfilled using the best oracle price after factoring in price impact\\n    // if it can be fulfilled, fulfill the order at the acceptablePrice\\n    //\\n    // @param customIndexTokenPrice the custom price of the index token\\n    // @param sizeDeltaUsd the order.sizeDeltaUsd\\n    // @param priceImpactUsd the price impact of the order\\n    // @param acceptablePrice the order.acceptablePrice\\n    // @param isLong whether this is for a long or short order\\n    // @param isIncrease whether this is for an increase or decrease order\\n    // @return the execution price\\n    function getExecutionPrice(\\n        Price.Props memory customIndexTokenPrice,\\n        uint256 sizeDeltaUsd,\\n        int256 priceImpactUsd,\\n        uint256 acceptablePrice,\\n        bool isLong,\\n        bool isIncrease\\n    ) internal pure returns (uint256) {\\n        // increase order:\\n        //     - long: use the larger price\\n        //     - short: use the smaller price\\n        // decrease order:\\n        //     - long: use the smaller price\\n        //     - short: use the larger price\\n        bool shouldUseMaxPrice = isIncrease ? isLong : !isLong;\\n\\n        // should price be smaller than acceptablePrice\\n        // increase order:\\n        //     - long: price should be smaller than acceptablePrice\\n        //     - short: price should be larger than acceptablePrice\\n        // decrease order:\\n        //     - long: price should be larger than acceptablePrice\\n        //     - short: price should be smaller than acceptablePrice\\n        bool shouldPriceBeSmaller = isIncrease ? isLong : !isLong;\\n\\n        // for market orders, customIndexTokenPrice.min and customIndexTokenPrice.max should be equal, see setExactOrderPrice for more info\\n        // for limit orders, customIndexTokenPrice contains the triggerPrice and the best oracle\\n        // price, we first attempt to fulfill the order using the triggerPrice\\n        uint256 price = customIndexTokenPrice.pickPrice(shouldUseMaxPrice);\\n\\n        // increase order:\\n        //     - long: lower price for positive impact, higher price for negative impact\\n        //     - short: higher price for positive impact, lower price for negative impact\\n        // decrease order:\\n        //     - long: higher price for positive impact, lower price for negative impact\\n        //     - short: lower price for positive impact, higher price for negative impact\\n        bool shouldFlipPriceImpactUsd = isIncrease ? isLong : !isLong;\\n        int256 priceImpactUsdForPriceAdjustment = shouldFlipPriceImpactUsd ? -priceImpactUsd : priceImpactUsd;\\n\\n        // adjust price by price impact\\n        price = price * Calc.sum(sizeDeltaUsd, priceImpactUsdForPriceAdjustment) / sizeDeltaUsd;\\n\\n        if (shouldPriceBeSmaller && price <= acceptablePrice) {\\n            return price;\\n        }\\n\\n        if (!shouldPriceBeSmaller && price >= acceptablePrice) {\\n            return price;\\n        }\\n\\n        // if the order could not be fulfilled using the triggerPrice\\n        // check if the best oracle price can fulfill the order\\n        price = customIndexTokenPrice.pickPrice(!shouldUseMaxPrice);\\n\\n        // adjust price by price impact\\n        price = price * Calc.sum(sizeDeltaUsd, priceImpactUsdForPriceAdjustment) / sizeDeltaUsd;\\n\\n        if (shouldPriceBeSmaller && price <= acceptablePrice) {\\n            return acceptablePrice;\\n        }\\n\\n        if (!shouldPriceBeSmaller && price >= acceptablePrice) {\\n            return acceptablePrice;\\n        }\\n\\n        revert(Keys.UNACCEPTABLE_PRICE_ERROR);\\n    }\\n\\n    // @dev validate that an order exists\\n    // @param order the order to check\\n    function validateNonEmptyOrder(Order.Props memory order) internal pure {\\n        if (order.account() == address(0)) {\\n            revert EmptyOrder();\\n        }\\n    }\\n\\n    // @dev throw an unsupported order type error\\n    function revertUnsupportedOrderType() internal pure {\\n        revert UnsupportedOrderType();\\n    }\\n}\\n\",\"keccak256\":\"0xe6fa443801085dc1630eab765f5ce48c77591bb857d7e205491d50b559286ee0\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Order.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title OrderStore\\n// @dev Store for orders\\ncontract OrderStore is StrictBank {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n    using Order for Order.Props;\\n\\n    mapping(bytes32 => Order.Props) public orders;\\n    EnumerableSet.Bytes32Set internal orderKeys;\\n    mapping(address => EnumerableSet.Bytes32Set) internal accountOrderKeys;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n\\n    // @dev set an order in the store\\n    // @param key the key of the order\\n    // @param order the order values to set\\n    function set(bytes32 key, Order.Props memory order) external onlyController {\\n        orders[key] = order;\\n        accountOrderKeys[order.account()].add(key);\\n        orderKeys.add(key);\\n    }\\n\\n    // @dev remove an order from the store\\n    // @param key the key of the order to remove\\n    // @param account the order's account\\n    function remove(bytes32 key, address account) external onlyController {\\n        delete orders[key];\\n        accountOrderKeys[account].remove(key);\\n        orderKeys.remove(key);\\n    }\\n\\n    // @dev get an order from the store\\n    // @param key the key of the order\\n    // @return the order values\\n    function get(bytes32 key) external view returns (Order.Props memory) {\\n        return orders[key];\\n    }\\n\\n    // @dev get the total number of orders in the store\\n    // @return the total number of orders in the store\\n    function getOrderCount() external view returns (uint256) {\\n        return orderKeys.length();\\n    }\\n\\n    // @dev get the order keys for the given indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the order keys for the given indexes\\n    function getOrderKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return orderKeys.valuesAt(start, end);\\n    }\\n\\n    // @dev get the total number of orders in the store for an account\\n    // @param account the account to check\\n    // @return the total number of orders in the store for an account\\n    function getAccountOrderCount(address account) external view returns (uint256) {\\n        return accountOrderKeys[account].length();\\n    }\\n\\n    // @dev get the order keys for an account for the given indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the order keys for an account for the given indexes\\n    function getAccountOrderKeys(address account, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return accountOrderKeys[account].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x68344fa8f4a23a0a4d3e0055649ea9939bffb1840f217bf7488dafc914fd7ff2\",\"license\":\"BUSL-1.1\"},\"contracts/position/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Position\\n// @dev Stuct for positions\\n//\\n// borrowing fees for position require only a borrowingFactor to track\\n// an example on how this works is if the global cumulativeBorrowingFactor is 10020%\\n// a position would be opened with borrowingFactor as 10020%\\n// after some time, if the cumulativeBorrowingFactor is updated to 10025% the position would\\n// owe 5% of the position size as borrowing fees\\n// the total pending borrowing fees of all positions is factored into the calculation of the pool value for LPs\\n// when a position is increased or decreased, the pending borrowing fees for the position is deducted from the position's\\n// collateral and transferred into the LP pool\\n//\\n// the same borrowing fee factor tracking cannot be applied for funding fees as those calculations consider pending funding fees\\n// based on the fiat value of the position sizes\\n//\\n// for example, if the price of the longToken is $2000 and a long position owes $200 in funding fees, the opposing short position\\n// claims the funding fees of 0.1 longToken ($200), if the price of the longToken changes to $4000 later, the long position would\\n// only owe 0.05 longToken ($200)\\n// this would result in differences between the amounts deducted and amounts paid out, for this reason, the actual token amounts\\n// to be deducted and to be paid out need to be tracked instead\\n//\\n// for funding fees, there are four values to consider:\\n// 1. long positions with market.longToken as collateral\\n// 2. long positions with market.shortToken as collateral\\n// 3. short positions with market.longToken as collateral\\n// 4. short positions with market.shortToken as collateral\\nlibrary Position {\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    // @param isLong whether the position is a long or short\\n    // @param sizeInUsd the position's size in USD\\n    // @param sizeInTokens the position's size in tokens\\n    // @param collateralAmount the amount of collateralToken for collateral\\n    // @param borrowingFactor the position's borrowing factor\\n    // @param longTokenFundingAmountPerSize the position's funding amount per size\\n    // for the market.longToken\\n    // @param shortTokenFundingAmountPerSize the position's funding amount per size\\n    // for the market.shortToken\\n    // @param increasedAtBlock the block at which the position was last increased\\n    // @param decreasedAtBlock the block at which the position was last decreased\\n    // @param data for any additional data\\n    struct Props {\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n        uint256 sizeInUsd;\\n        uint256 sizeInTokens;\\n        uint256 collateralAmount;\\n        uint256 borrowingFactor;\\n        int256 longTokenFundingAmountPerSize;\\n        int256 shortTokenFundingAmountPerSize;\\n        uint256 increasedAtBlock;\\n        uint256 decreasedAtBlock;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xac8147f7875459bd81764ae14effcf785e212a7f43eb679c52ce5a15ca133c64\",\"license\":\"BUSL-1.1\"},\"contracts/position/PositionStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title PositionStore\\n// @dev Store for positions\\ncontract PositionStore is StrictBank {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    mapping(bytes32 => Position.Props) internal positions;\\n    EnumerableSet.Bytes32Set internal positionKeys;\\n    mapping(address => EnumerableSet.Bytes32Set) internal accountPositionKeys;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n\\n    // @dev set a position in the store\\n    // @param key the key of the position\\n    // @param account the position's account\\n    // @param position the position values to set\\n    function set(bytes32 key, address account, Position.Props memory position) external onlyController {\\n        positions[key] = position;\\n        accountPositionKeys[account].add(key);\\n        positionKeys.add(key);\\n    }\\n\\n    // @dev delete a position from the store\\n    // @param key the key of the position to delete\\n    // @param account the position's account\\n    function remove(bytes32 key, address account) external onlyController {\\n        delete positions[key];\\n        accountPositionKeys[account].remove(key);\\n        positionKeys.remove(key);\\n    }\\n\\n    // @dev get a position from the store\\n    // @param key the key of the position\\n    // @return the position for the key\\n    function get(bytes32 key) external view returns (Position.Props memory) {\\n        return positions[key];\\n    }\\n\\n    // @dev get the total number of positions in the store\\n    // @return the total number of positions in the store\\n    function getPositionCount() external view returns (uint256) {\\n        return positionKeys.length();\\n    }\\n\\n    // @dev get the position keys for the given indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the position keys for the given indexes\\n    function getPositionKeys(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return positionKeys.valuesAt(start, end);\\n    }\\n\\n    // @dev get the total number of positions for an account\\n    // @return the total number of positions for an account\\n    function getAccountPositionCount(address account) external view returns (uint256) {\\n        return accountPositionKeys[account].length();\\n    }\\n\\n    // @dev get the position keys for an account for the given indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the position keys for an account for the given indexes\\n    function getAccountPositionKeys(address account, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return accountPositionKeys[account].valuesAt(start, end);\\n    }\\n\\n    // @dev check if a position exists\\n    // @param key the key of the position to check\\n    function contains(bytes32 key) public view returns (bool) {\\n        return positionKeys.contains(key);\\n    }\\n}\\n\",\"keccak256\":\"0x78919fe87f410d557699662a05cd27af236b243f97fe528074805c40132cc6fa\",\"license\":\"BUSL-1.1\"},\"contracts/price/Price.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Price\\n// @dev Struct for prices\\nlibrary Price {\\n    // @param min the min price\\n    // @param max the max price\\n    struct Props {\\n        uint256 min;\\n        uint256 max;\\n    }\\n\\n    // @dev check if a price is empty\\n    // @param props Props\\n    // @return whether a price is empty\\n    function isEmpty(Props memory props) internal pure returns (bool) {\\n        return props.min == 0 || props.max == 0;\\n    }\\n\\n    // @dev get the average of the min and max values\\n    // @param props Props\\n    // @return the average of the min and max values\\n    function midPrice(Props memory props) internal pure returns (uint256) {\\n        return (props.max + props.min) / 2;\\n    }\\n\\n    // @dev pick either the min or max value\\n    // @param props Props\\n    // @param maximize whether to pick the min or max value\\n    // @return either the min or max value\\n    function pickPrice(Props memory props, bool maximize) internal pure returns (uint256) {\\n        return maximize ? props.max : props.min;\\n    }\\n\\n    // @dev pick the min or max price depending on whether it is for a long or short position\\n    // and whether the pending pnl should be maximized or not\\n    // @param props Props\\n    // @param isLong whether it is for a long or short position\\n    // @param maximize whether the pnl should be maximized or not\\n    // @return the min or max price\\n    function pickPriceForPnl(Props memory props, bool isLong, bool maximize) internal pure returns (uint256) {\\n        // for long positions, pick the larger price to maximize pnl\\n        // for short positions, pick the smaller price to maximize pnl\\n        if (isLong) {\\n            return maximize ? props.max : props.min;\\n        }\\n\\n        return maximize ? props.min : props.max;\\n    }\\n}\\n\",\"keccak256\":\"0x39783950d37d565ee3fbff5023206cfb6993bb49523e7fe37f367393cb54bedd\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/PositionPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\nimport \\\"./PricingUtils.sol\\\";\\n\\nimport \\\"../referral/IReferralStorage.sol\\\";\\nimport \\\"../referral/ReferralUtils.sol\\\";\\n\\n// @title PositionPricingUtils\\n// @dev Library for position pricing functions\\nlibrary PositionPricingUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    // @dev GetPriceImpactUsdParams struct used in getPriceImpactUsd to avoid stack\\n    // too deep errors\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the longToken of the market\\n    // @param shortToken the shortToken of the market\\n    // @param usdDelta the change in position size in USD\\n    // @param isLong whether the position is long or short\\n    struct GetPriceImpactUsdParams {\\n        DataStore dataStore;\\n        address market;\\n        address longToken;\\n        address shortToken;\\n        int256 usdDelta;\\n        bool isLong;\\n    }\\n\\n    // @dev OpenInterestParams struct to contain open interest values\\n    // @param longOpenInterest the amount of long open interest\\n    // @param shortOpenInterest the amount of short open interest\\n    // @param nextLongOpenInterest the updated amount of long open interest\\n    // @param nextShortOpenInterest the updated amount of short open interest\\n    struct OpenInterestParams {\\n        uint256 longOpenInterest;\\n        uint256 shortOpenInterest;\\n        uint256 nextLongOpenInterest;\\n        uint256 nextShortOpenInterest;\\n    }\\n\\n    // @dev PositionFees struct to contain fee values\\n    // @param affiliate the referral affiliate of the trader\\n    // @param traderDiscountAmount the discount amount for the trader\\n    // @param affiliateRewardAmount the affiliate reward amount\\n    // @param feeReceiverAmount the amount for the fee receiver\\n    // @param feesForPool the amount of fees for the pool\\n    // @param positionFeeAmountForPool the position fee amount for the pool\\n    // @param positionFeeAmount the fee amount for increasing / decreasing the position\\n    // @param fundingFeeAmount the position's funding fee amount\\n    // @param latestLongTokenFundingAmountPerSize the latest long token funding\\n    // amount per size for the market\\n    // @param latestLongTokenFundingAmountPerSize the latest short token funding\\n    // amount per size for the market\\n    // @param longTokenFundingFeeAmount the funding fee amount in long tokens\\n    // @param shortTokenFundingFeeAmount the funding fee amount in short tokens\\n    // @param borrowingFeeAmount the borrowing fee amount\\n    // @param totalNetCostAmount the total net cost amount in tokens\\n    // @param totalNetCostUsd the total net cost in USD\\n    // @param hasPendingLongTokenFundingFee whether there is a pending long token funding fee\\n    // @param hasPendingShortTokenFundingFee whether there is a pending short token funding fee\\n    struct PositionFees {\\n        address affiliate;\\n        uint256 traderDiscountAmount;\\n        uint256 affiliateRewardAmount;\\n        uint256 feeReceiverAmount;\\n        uint256 feesForPool;\\n        uint256 positionFeeAmountForPool;\\n        uint256 positionFeeAmount;\\n        uint256 fundingFeeAmount;\\n        int256 latestLongTokenFundingAmountPerSize;\\n        int256 latestShortTokenFundingAmountPerSize;\\n        int256 longTokenFundingFeeAmount;\\n        int256 shortTokenFundingFeeAmount;\\n        uint256 borrowingFeeAmount;\\n        uint256 totalNetCostAmount;\\n        uint256 totalNetCostUsd;\\n        bool hasPendingLongTokenFundingFee;\\n        bool hasPendingShortTokenFundingFee;\\n    }\\n\\n    // @dev _GetPositionFeesAfterReferralCache struct used in getPositionFees\\n    // to avoid stack too deep errors\\n    // @param affiliate the referral affiliate\\n    // @param totalRebateFactor the total referral rebate factor\\n    // @param traderDiscountFactor the trader referral discount factor\\n    // @param feeFactor the fee factor\\n    // @param positionFeeAmount the fee amount for increasing / decreasing the position\\n    // @param totalRebateAmount the total referral rebate amount in tokens\\n    // @param traderDiscountAmount the trader discount amount in tokens\\n    // @param affiliateRewardAmount the affiliate reward amount in tokens\\n    // @param protocolFeeAmount the protocol fee\\n    // @param feeReceiverFactor the fee receiver factor\\n    // @param feeReceiverAmount the amount for the fee receiver\\n    // @param positionFeeAmountForPool the position fee amount for the pool in tokens\\n    struct _GetPositionFeesAfterReferralCache {\\n        address affiliate;\\n        uint256 totalRebateFactor;\\n        uint256 traderDiscountFactor;\\n        uint256 feeFactor;\\n        uint256 positionFeeAmount;\\n        uint256 totalRebateAmount;\\n        uint256 traderDiscountAmount;\\n        uint256 affiliateRewardAmount;\\n        uint256 protocolFeeAmount;\\n        uint256 feeReceiverFactor;\\n        uint256 feeReceiverAmount;\\n        uint256 positionFeeAmountForPool;\\n    }\\n\\n    // @dev get the price impact amount for a position increase / decrease\\n    // @param size the change in position size\\n    // @param executionPrice the execution price of the index token\\n    // @param latestPrice the latest price of the index token\\n    // @param isLong whether the position is long or short\\n    // @param isIncrease whether it is an increase or decrease position\\n    // @return the price impact amount for a position increase / decrease\\n    function getPriceImpactAmount(\\n        uint256 size,\\n        uint256 executionPrice,\\n        uint256 latestPrice,\\n        bool isLong,\\n        bool isIncrease\\n    ) internal pure returns (int256) {\\n        // increase order:\\n        //     - long: price impact is size * (latestPrice - executionPrice) / latestPrice\\n        //             when executionPrice is smaller than latestPrice there is a positive price impact\\n        //     - short: price impact is size * (executionPrice - latestPrice) / latestPrice\\n        //              when executionPrice is larger than latestPrice there is a positive price impact\\n        // decrease order:\\n        //     - long: price impact is size * (executionPrice - latestPrice) / latestPrice\\n        //             when executionPrice is larger than latestPrice there is a positive price impact\\n        //     - short: price impact is size * (latestPrice - executionPrice) / latestPrice\\n        //              when executionPrice is smaller than latestPrice there is a positive price impact\\n        int256 priceDiff = latestPrice.toInt256() - executionPrice.toInt256();\\n        bool shouldFlipPriceDiff = isIncrease ? !isLong : isLong;\\n        if (shouldFlipPriceDiff) { priceDiff = -priceDiff; }\\n\\n        int256 priceImpactUsd = size.toInt256() * priceDiff / latestPrice.toInt256();\\n\\n        // round positive price impact up, this will be deducted from the position impact pool\\n        if (priceImpactUsd > 0) {\\n            return Calc.roundUpDivision(priceImpactUsd, latestPrice);\\n        }\\n\\n        // round negative price impact down, this will be stored in the position impact pool\\n        return priceImpactUsd / latestPrice.toInt256();\\n    }\\n\\n    // @dev get the price impact in USD for a position increase / decrease\\n    // @param params GetPriceImpactUsdParams\\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) internal view returns (int256) {\\n        OpenInterestParams memory openInterestParams = getNextOpenInterest(params);\\n\\n        int256 priceImpactUsd = _getPriceImpactUsd(params.dataStore, params.market, openInterestParams);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev get the price impact in USD for a position increase / decrease\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param openInterestParams OpenInterestParams\\n    function _getPriceImpactUsd(DataStore dataStore, address market, OpenInterestParams memory openInterestParams) internal view returns (int256) {\\n        uint256 initialDiffUsd = Calc.diff(openInterestParams.longOpenInterest, openInterestParams.shortOpenInterest);\\n        uint256 nextDiffUsd = Calc.diff(openInterestParams.nextLongOpenInterest, openInterestParams.nextShortOpenInterest);\\n\\n        // check whether an improvement in balance comes from causing the balance to switch sides\\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\\n        bool isSameSideRebalance = openInterestParams.longOpenInterest <= openInterestParams.shortOpenInterest == openInterestParams.nextLongOpenInterest <= openInterestParams.nextShortOpenInterest;\\n        uint256 impactExponentFactor = dataStore.getUint(Keys.positionImpactExponentFactorKey(market));\\n\\n        if (isSameSideRebalance) {\\n            bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\\n            uint256 impactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, hasPositiveImpact));\\n\\n            return PricingUtils.getPriceImpactUsdForSameSideRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                hasPositiveImpact,\\n                impactFactor,\\n                impactExponentFactor\\n            );\\n        } else {\\n            uint256 positiveImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, true));\\n            uint256 negativeImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, false));\\n\\n            return PricingUtils.getPriceImpactUsdForCrossoverRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                positiveImpactFactor,\\n                negativeImpactFactor,\\n                impactExponentFactor\\n            );\\n        }\\n    }\\n\\n    // @dev get the next open interest values\\n    // @param params GetPriceImpactUsdParams\\n    // @return OpenInterestParams\\n    function getNextOpenInterest(\\n        GetPriceImpactUsdParams memory params\\n    ) internal view returns (OpenInterestParams memory) {\\n        uint256 longOpenInterest = MarketUtils.getOpenInterest(\\n            params.dataStore,\\n            params.market,\\n            params.longToken,\\n            params.shortToken,\\n            true);\\n\\n        uint256 shortOpenInterest = MarketUtils.getOpenInterest(\\n            params.dataStore,\\n            params.market,\\n            params.longToken,\\n            params.shortToken,\\n            false\\n        );\\n\\n        uint256 nextLongOpenInterest;\\n        uint256 nextShortOpenInterest;\\n\\n        if (params.isLong) {\\n            nextLongOpenInterest = Calc.sum(longOpenInterest, params.usdDelta);\\n        } else {\\n            nextShortOpenInterest = Calc.sum(shortOpenInterest, params.usdDelta);\\n        }\\n\\n        OpenInterestParams memory openInterestParams = OpenInterestParams(\\n            longOpenInterest,\\n            shortOpenInterest,\\n            nextLongOpenInterest,\\n            nextShortOpenInterest\\n        );\\n\\n        return openInterestParams;\\n    }\\n\\n    // @dev transfer position fees to the feeReceiver\\n    // @param dataStore DataStore\\n    // @param feeReceiver FeeReceiver\\n    // @param marketToken the market token of the market\\n    // @param position the position values\\n    // @param feeType the type of the position fee\\n    // @param fees PositionFees\\n    function transferPositionFees(\\n        DataStore dataStore,\\n        FeeReceiver feeReceiver,\\n        MarketToken marketToken,\\n        Position.Props memory position,\\n        bytes32 feeType,\\n        PositionFees memory fees\\n    ) internal returns (PositionFees memory) {\\n        if (fees.feeReceiverAmount > 0) {\\n            marketToken.transferOut(\\n                dataStore,\\n                position.collateralToken,\\n                fees.feeReceiverAmount,\\n                address(feeReceiver)\\n            );\\n            feeReceiver.notifyFeeReceived(feeType, position.collateralToken, fees.feeReceiverAmount);\\n        }\\n\\n        return fees;\\n    }\\n\\n    // @dev get position fees\\n    // @param dataStore DataStore\\n    // @param referralStorage IReferralStorage\\n    // @param position the position values\\n    // @param collateralTokenPrice the price of the position's collateralToken\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param sizeDeltaUsd the change in position size\\n    // @return PositionFees\\n    function getPositionFees(\\n        DataStore dataStore,\\n        IReferralStorage referralStorage,\\n        Position.Props memory position,\\n        Price.Props memory collateralTokenPrice,\\n        address longToken,\\n        address shortToken,\\n        uint256 sizeDeltaUsd\\n    ) internal view returns (PositionFees memory) {\\n        PositionFees memory fees;\\n\\n        (\\n            fees.affiliate,\\n            fees.traderDiscountAmount,\\n            fees.affiliateRewardAmount,\\n            fees.feeReceiverAmount,\\n            fees.positionFeeAmountForPool\\n        ) = getPositionFeesAfterReferral(\\n            dataStore,\\n            referralStorage,\\n            collateralTokenPrice,\\n            position.account,\\n            position.market,\\n            sizeDeltaUsd\\n        );\\n\\n        fees.borrowingFeeAmount = MarketUtils.getBorrowingFees(dataStore, position) / collateralTokenPrice.min;\\n\\n        fees.feesForPool = fees.positionFeeAmountForPool + fees.borrowingFeeAmount;\\n\\n        fees.latestLongTokenFundingAmountPerSize = MarketUtils.getFundingAmountPerSize(dataStore, position.market, longToken, position.isLong);\\n        fees.latestShortTokenFundingAmountPerSize = MarketUtils.getFundingAmountPerSize(dataStore, position.market, shortToken, position.isLong);\\n\\n        (fees.hasPendingLongTokenFundingFee, fees.longTokenFundingFeeAmount) = MarketUtils.getFundingFeeAmount(fees.latestLongTokenFundingAmountPerSize, position.longTokenFundingAmountPerSize, position.sizeInUsd);\\n        (fees.hasPendingShortTokenFundingFee, fees.shortTokenFundingFeeAmount) = MarketUtils.getFundingFeeAmount(fees.latestShortTokenFundingAmountPerSize, position.shortTokenFundingAmountPerSize, position.sizeInUsd);\\n\\n        if (position.collateralToken == longToken && fees.longTokenFundingFeeAmount > 0) {\\n            fees.fundingFeeAmount = fees.longTokenFundingFeeAmount.toUint256();\\n        }\\n        if (position.collateralToken == shortToken && fees.shortTokenFundingFeeAmount > 0) {\\n            fees.fundingFeeAmount = fees.shortTokenFundingFeeAmount.toUint256();\\n        }\\n\\n        fees.totalNetCostAmount = fees.affiliateRewardAmount + fees.feeReceiverAmount + fees.positionFeeAmountForPool + fees.fundingFeeAmount + fees.borrowingFeeAmount;\\n        fees.totalNetCostUsd = fees.totalNetCostAmount * collateralTokenPrice.max;\\n\\n        return fees;\\n    }\\n\\n    // @dev get position fees after applying referral rebates / discounts\\n    // @param dataStore DataStore\\n    // @param referralStorage IReferralStorage\\n    // @param collateralTokenPrice the price of the position's collateralToken\\n    // @param the position's account\\n    // @param market the position's market\\n    // @param sizeDeltaUsd the change in position size\\n    // @return (affiliate, traderDiscountAmount, affiliateRewardAmount, feeReceiverAmount, positionFeeAmountForPool)\\n    function getPositionFeesAfterReferral(\\n        DataStore dataStore,\\n        IReferralStorage referralStorage,\\n        Price.Props memory collateralTokenPrice,\\n        address account,\\n        address market,\\n        uint256 sizeDeltaUsd\\n    ) internal view returns (address, uint256, uint256, uint256, uint256) {\\n        _GetPositionFeesAfterReferralCache memory cache;\\n\\n        (cache.affiliate, cache.totalRebateFactor, cache.traderDiscountFactor) = ReferralUtils.getReferralInfo(referralStorage, account);\\n\\n        cache.feeFactor = dataStore.getUint(Keys.positionFeeFactorKey(market));\\n        cache.positionFeeAmount = Precision.applyFactor(sizeDeltaUsd, cache.feeFactor) / collateralTokenPrice.min;\\n\\n        cache.totalRebateAmount = Precision.applyFactor(cache.positionFeeAmount, cache.totalRebateFactor);\\n        cache.traderDiscountAmount = Precision.applyFactor(cache.totalRebateAmount, cache.traderDiscountFactor);\\n        cache.affiliateRewardAmount = cache.totalRebateAmount - cache.traderDiscountAmount;\\n\\n        cache.protocolFeeAmount = cache.positionFeeAmount - cache.totalRebateAmount;\\n\\n        cache.feeReceiverFactor = dataStore.getUint(Keys.FEE_RECEIVER_POSITION_FACTOR);\\n\\n        cache.feeReceiverAmount = Precision.applyFactor(cache.protocolFeeAmount, cache.feeReceiverFactor);\\n        cache.positionFeeAmountForPool = cache.protocolFeeAmount - cache.feeReceiverAmount;\\n\\n        return (cache.affiliate, cache.traderDiscountAmount, cache.affiliateRewardAmount, cache.feeReceiverAmount, cache.positionFeeAmountForPool);\\n    }\\n}\\n\",\"keccak256\":\"0x830b86318cf8ce7c73749f43b4ae960160d8026f29830f2331f8257a790a9133\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/PricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../market/MarketUtils.sol\\\";\\nimport \\\"../fee/FeeReceiver.sol\\\";\\n\\n// @title PricingUtils\\n// @dev Library for pricing functions\\n//\\n// Price impact is calculated as:\\n//\\n// ```\\n// (initial imbalance) ^ (price impact exponent) * (price impact factor / 2) - (next imbalance) ^ (price impact exponent) * (price impact factor / 2)\\n// ```\\n//\\n// For spot actions (deposits, withdrawals, swaps), imbalance is calculated as the\\n// difference in the worth of the long tokens and short tokens.\\n//\\n// For example:\\n//\\n// - A pool has 10 long tokens, each long token is worth $5000\\n// - The pool also has 50,000 short tokens, each short token is worth $1\\n// - The `price impact exponent` is set to 2 and `price impact factor` is set\\n// to `0.01 / 50,000`\\n// - The pool is equally balanced with $50,000 of long tokens and $50,000 of\\n// short tokens\\n// - If a user deposits 10 long tokens, the pool would now have $100,000 of long\\n// tokens and $50,000 of short tokens\\n// - The change in imbalance would be from $0 to -$50,000\\n// - There would be negative price impact charged on the user's deposit,\\n// calculated as `0 ^ 2 * (0.01 / 50,000) - 50,000 ^ 2 * (0.01 / 50,000) => -$500`\\n// - If the user now withdraws 5 long tokens, the balance would change\\n// from -$50,000 to -$25,000, a net change of +$25,000\\n// - There would be a positive price impact rebated to the user in the form of\\n// additional long tokens, calculated as `50,000 ^ 2 * (0.01 / 50,000) - 25,000 ^ 2 * (0.01 / 50,000) => $375`\\n//\\n// For position actions (increase / decrease position), imbalance is calculated\\n// as the difference in the long and short open interest.\\n//\\n// `price impact exponents` and `price impact factors` are configured per market\\n// and can differ for spot and position actions.\\n//\\n// The purpose of the price impact is to help reduce the risk of price manipulation,\\n// since the contracts use an oracle price which would be an average or median price\\n// of multiple reference exchanges. Without a price impact, it may be profitable to\\n//  manipulate the prices on reference exchanges while executing orders on the contracts.\\n//\\n// This risk will also be present if the positive and negative price impact values\\n// are similar, for that reason the positive price impact should be set to a low\\n// value in times of volatility or irregular price movements.\\nlibrary PricingUtils {\\n    // @dev get the price impact USD if there is no crossover in balance\\n    // a crossover in balance is for example if the long open interest is larger\\n    // than the short open interest, and a short position is opened such that the\\n    // short open interest becomes larger than the long open interest\\n    // @param initialDiffUsd the initial difference in USD\\n    // @param nextDiffUsd the next difference in USD\\n    // @param hasPositiveImpact whether there is a positive impact on balance\\n    // @param impactFactor the impact factor\\n    // @param impactExponentFactor the impact exponent factor\\n    function getPriceImpactUsdForSameSideRebalance(\\n        uint256 initialDiffUsd,\\n        uint256 nextDiffUsd,\\n        bool hasPositiveImpact,\\n        uint256 impactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (int256) {\\n        uint256 deltaDiffUsd = Calc.diff(\\n            applyImpactFactor(initialDiffUsd, impactFactor, impactExponentFactor),\\n            applyImpactFactor(nextDiffUsd, impactFactor, impactExponentFactor)\\n        );\\n\\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, hasPositiveImpact);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev get the price impact USD if there is a crossover in balance\\n    // a crossover in balance is for example if the long open interest is larger\\n    // than the short open interest, and a short position is opened such that the\\n    // short open interest becomes larger than the long open interest\\n    // @param initialDiffUsd the initial difference in USD\\n    // @param nextDiffUsd the next difference in USD\\n    // @param hasPositiveImpact whether there is a positive impact on balance\\n    // @param impactFactor the impact factor\\n    // @param impactExponentFactor the impact exponent factor\\n    function getPriceImpactUsdForCrossoverRebalance(\\n        uint256 initialDiffUsd,\\n        uint256 nextDiffUsd,\\n        uint256 positiveImpactFactor,\\n        uint256 negativeImpactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (int256) {\\n        uint256 positiveImpactUsd = applyImpactFactor(initialDiffUsd, positiveImpactFactor, impactExponentFactor);\\n        uint256 negativeImpactUsd = applyImpactFactor(nextDiffUsd, negativeImpactFactor, impactExponentFactor);\\n        uint256 deltaDiffUsd = Calc.diff(positiveImpactUsd, negativeImpactUsd);\\n\\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, positiveImpactUsd > negativeImpactUsd);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev apply the impact factor calculation to a USD diff value\\n    // @param diffUsd the difference in USD\\n    // @param impactFactor the impact factor\\n    // @param impactExponentFactor the impact exponent factor\\n    function applyImpactFactor(\\n        uint256 diffUsd,\\n        uint256 impactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (uint256) {\\n        // `PRBMathUD60x18.pow` doesn't work for `x` less than one\\n        if (diffUsd < Precision.FLOAT_PRECISION) {\\n            return 0;\\n        }\\n\\n        // `PRBMathUD60x18.pow` accepts 2 fixed point numbers 60x18\\n        // we need to convert float (30 decimals) to 60x18 (18 decimals) and then back to 30 decimals\\n        uint256 adjustedDiffUsd = PRBMathUD60x18.pow(\\n            Precision.floatToWei(diffUsd),\\n            Precision.floatToWei(impactExponentFactor)\\n        );\\n        adjustedDiffUsd = Precision.weiToFloat(adjustedDiffUsd);\\n\\n        // we divide by 2 here to more easily translate liquidity into the appropriate impactFactor values\\n        // for example, if the impactExponentFactor is 2 and we want to have an impact of 0.1% for $2 million of difference\\n        // we can set the impactFactor to be 0.1% / $2 million\\n        return Precision.applyFactor(adjustedDiffUsd, impactFactor) / 2;\\n    }\\n\\n    // @dev transfer fees to the feeReceiver\\n    // @param dataStore DataStore\\n    // @param feeReceiver FeeReceiver\\n    // @param marketToken the market token of the market\\n    // @param token the fee token to transfer\\n    // @param feeReceiverAmount the amount to transfer\\n    // @param feeType the fee type\\n    function transferFees(\\n        DataStore dataStore,\\n        FeeReceiver feeReceiver,\\n        address marketToken,\\n        address token,\\n        uint256 feeReceiverAmount,\\n        bytes32 feeType\\n    ) internal {\\n        if (feeReceiverAmount == 0) {\\n            return;\\n        }\\n\\n        MarketToken(payable(marketToken)).transferOut(\\n            dataStore,\\n            token,\\n            feeReceiverAmount,\\n            address(feeReceiver)\\n        );\\n\\n        feeReceiver.notifyFeeReceived(feeType, token, feeReceiverAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xe79593137b2142371cfc0845895ad52aad0e56c23a55be1741cae8c65d193dae\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/SwapPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\nimport \\\"./PricingUtils.sol\\\";\\n\\n// @title SwapPricingUtils\\n// @dev Library for pricing functions\\nlibrary SwapPricingUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    // @dev GetPriceImpactUsdParams struct used in getPriceImpactUsd to\\n    // avoid stack too deep errors\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param tokenA the token to check balance for\\n    // @param tokenB the token to check balance for\\n    // @param priceForTokenA the price for tokenA\\n    // @param priceForTokenB the price for tokenB\\n    // @param usdDeltaForTokenA the USD change in amount of tokenA\\n    // @param usdDeltaForTokenB the USD change in amount of tokenB\\n    struct GetPriceImpactUsdParams {\\n        DataStore dataStore;\\n        address market;\\n        address tokenA;\\n        address tokenB;\\n        uint256 priceForTokenA;\\n        uint256 priceForTokenB;\\n        int256 usdDeltaForTokenA;\\n        int256 usdDeltaForTokenB;\\n    }\\n\\n    // @dev PoolParams struct to contain pool values\\n    // @param poolUsdForTokenA the USD value of tokenA in the pool\\n    // @param poolUsdForTokenB the USD value of tokenB in the pool\\n    // @param nextPoolUsdForTokenA the next USD value of tokenA in the pool\\n    // @param nextPoolUsdForTokenB the next USD value of tokenB in the pool\\n    struct PoolParams {\\n        uint256 poolUsdForTokenA;\\n        uint256 poolUsdForTokenB;\\n        uint256 nextPoolUsdForTokenA;\\n        uint256 nextPoolUsdForTokenB;\\n    }\\n\\n    // @dev SwapFees struct to contain swap fee values\\n    // @param feeReceiverAmount the fee amount for the fee receiver\\n    // @param feesForPool the fee amount for the pool\\n    // @param amountAfterFees the output amount after fees\\n    struct SwapFees {\\n        uint256 feeReceiverAmount;\\n        uint256 feesForPool;\\n        uint256 amountAfterFees;\\n    }\\n\\n    // @dev get the price impact in USD\\n    //\\n    // note that there will be some difference between the pool amounts used for\\n    // calculating the price impact and fees vs the actual pool amounts after the\\n    // swap is done, since the pool amounts will be increased / decreased by an amount\\n    // after factoring in the calculated price impact and fees\\n    //\\n    // since the calculations are based on the real-time prices values of the tokens\\n    // if a token price increases, the pool will incentivise swapping out more of that token\\n    // this is useful if prices are ranging, if prices are strongly directional, the pool may\\n    // be selling tokens as the token price increases\\n    //\\n    // @param params GetPriceImpactUsdParams\\n    //\\n    // @return the price impact in USD\\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) internal view returns (int256) {\\n        PoolParams memory poolParams = getNextPoolAmountsUsd(params);\\n\\n        int256 priceImpactUsd = _getPriceImpactUsd(params.dataStore, params.market, poolParams);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev get the price impact in USD\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param poolParams PoolParams\\n    // @return the price impact in USD\\n    function _getPriceImpactUsd(DataStore dataStore, address market, PoolParams memory poolParams) internal view returns (int256) {\\n        uint256 initialDiffUsd = Calc.diff(poolParams.poolUsdForTokenA, poolParams.poolUsdForTokenB);\\n        uint256 nextDiffUsd = Calc.diff(poolParams.nextPoolUsdForTokenA, poolParams.nextPoolUsdForTokenB);\\n\\n        // check whether an improvement in balance comes from causing the balance to switch sides\\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\\n        bool isSameSideRebalance = poolParams.poolUsdForTokenA <= poolParams.poolUsdForTokenB == poolParams.nextPoolUsdForTokenA <= poolParams.nextPoolUsdForTokenB;\\n        uint256 impactExponentFactor = dataStore.getUint(Keys.swapImpactExponentFactorKey(market));\\n\\n        if (isSameSideRebalance) {\\n            bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\\n            uint256 impactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, hasPositiveImpact));\\n\\n            return PricingUtils.getPriceImpactUsdForSameSideRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                hasPositiveImpact,\\n                impactFactor,\\n                impactExponentFactor\\n            );\\n        } else {\\n            uint256 positiveImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, true));\\n            uint256 negativeImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, false));\\n\\n            return PricingUtils.getPriceImpactUsdForCrossoverRebalance(\\n                initialDiffUsd,\\n                nextDiffUsd,\\n                positiveImpactFactor,\\n                negativeImpactFactor,\\n                impactExponentFactor\\n            );\\n        }\\n    }\\n\\n    // @dev get the next pool amounts in USD\\n    // @param params GetPriceImpactUsdParams\\n    // @return PoolParams\\n    function getNextPoolAmountsUsd(\\n        GetPriceImpactUsdParams memory params\\n    ) internal view returns (PoolParams memory) {\\n        uint256 poolAmountForTokenA = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenA);\\n        uint256 poolAmountForTokenB = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenB);\\n\\n        uint256 poolUsdForTokenA = poolAmountForTokenA * params.priceForTokenA;\\n        uint256 poolUsdForTokenB = poolAmountForTokenB * params.priceForTokenB;\\n\\n        uint256 nextPoolUsdForTokenA = Calc.sum(poolUsdForTokenA, params.usdDeltaForTokenA);\\n        uint256 nextPoolUsdForTokenB = Calc.sum(poolUsdForTokenB, params.usdDeltaForTokenB);\\n\\n        PoolParams memory poolParams = PoolParams(\\n            poolUsdForTokenA,\\n            poolUsdForTokenB,\\n            nextPoolUsdForTokenA,\\n            nextPoolUsdForTokenB\\n        );\\n\\n        return poolParams;\\n    }\\n\\n    // @dev get the swap fees\\n    // @param dataStore DataStore\\n    // @param marketToken the address of the market token\\n    // @param amount the total swap fee amount\\n    // @param feeReceiverFactorKey the key for the feeReceiverFactor\\n    function getSwapFees(\\n        DataStore dataStore,\\n        address marketToken,\\n        uint256 amount,\\n        bytes32 feeReceiverFactorKey\\n    ) internal view returns (SwapFees memory) {\\n        SwapFees memory fees;\\n\\n        uint256 feeFactor = dataStore.getUint(Keys.swapFeeFactorKey(marketToken));\\n        uint256 feeReceiverFactor = dataStore.getUint(feeReceiverFactorKey);\\n\\n        uint256 feeAmount = Precision.applyFactor(amount, feeFactor);\\n\\n        fees.feeReceiverAmount = Precision.applyFactor(feeAmount, feeReceiverFactor);\\n        fees.feesForPool = feeAmount - fees.feeReceiverAmount;\\n        fees.amountAfterFees = amount - feeAmount;\\n\\n        return fees;\\n    }\\n}\\n\",\"keccak256\":\"0xc98ffd3802e56168c7301aeb5a7d373b389e75202ce7d7491c1c8002050147b5\",\"license\":\"BUSL-1.1\"},\"contracts/referral/IReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ReferralTier.sol\\\";\\n\\n// @title IReferralStorage\\n// @dev Interface for ReferralStorage\\ninterface IReferralStorage {\\n    // @dev get the owner of a referral code\\n    // @param _code the referral code\\n    // @return the owner of the referral code\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    // @dev get the referral code of a trader\\n    // @param _account the address of the trader\\n    // @return the referral code\\n    function traderReferralCodes(address _account) external view returns (bytes32);\\n    // @dev get the trader discount share for an affiliate\\n    // @param _account the address of the affiliate\\n    // @return the trader discount share\\n    function referrerDiscountShares(address _account) external view returns (uint256);\\n    // @dev get the tier level of an affiliate\\n    // @param _account the address of the affiliate\\n    // @return the tier level of the affiliate\\n    function referrerTiers(address _account) external view returns (uint256);\\n    // @dev get the referral info for a trader\\n    // @param _account the address of the trader\\n    // @return (referral code, affiliate)\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    // @dev set the referral code for a trader\\n    // @param _account the address of the trader\\n    // @param _code the referral code\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    // @dev set the values for a tier\\n    // @param _tierId the tier level\\n    // @param _totalRebate the total rebate for the tier (affiliate reward + trader discount)\\n    // @param _discountShare the share of the totalRebate for traders\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    // @dev set the tier for an affiliate\\n    // @param _tierId the tier level\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    // @dev set the owner for a referral code\\n    // @param _code the referral code\\n    // @param _newAccount the new owner\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n\\n    // @dev get the tier values for a tier level\\n    // @param _tierLevel the tier level\\n    // @return (totalRebate, discountShare)\\n    function tiers(uint256 _tierLevel) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x831c26a3575729b3ca9d4f743d586a49877bd947b7a167afcc81bd3d8fc06a26\",\"license\":\"BUSL-1.1\"},\"contracts/referral/ReferralTier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ReferralTier\\n// @dev Struct for referral tiers\\nlibrary ReferralTier {\\n    // @param totalRebate the total rebate for the tier (affiliate reward + trader discount)\\n    // @param discountShare the share of the totalRebate for traders\\n    struct Props {\\n        uint256 totalRebate;\\n        uint256 discountShare;\\n    }\\n}\\n\",\"keccak256\":\"0xde652c7a4c1dc7935ff509b6acea68a22c80d8500ff72edf1ab51dba2f326a18\",\"license\":\"BUSL-1.1\"},\"contracts/referral/ReferralUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../market/MarketToken.sol\\\";\\n\\nimport \\\"./IReferralStorage.sol\\\";\\nimport \\\"./ReferralTier.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\n\\n// @title ReferralUtils\\n// @dev Library for referral functions\\nlibrary ReferralUtils {\\n    // @dev set the referral code for a trader\\n    // @param referralStorage The referral storage instance to use.\\n    // @param account The account of the trader.\\n    // @param referralCode The referral code.\\n    function setTraderReferralCode(\\n        IReferralStorage referralStorage,\\n        address account,\\n        bytes32 referralCode\\n    ) internal {\\n        if (referralCode == bytes32(0)) {\\n            return;\\n        }\\n\\n        referralStorage.setTraderReferralCode(account, referralCode);\\n    }\\n\\n    // @dev Increments the affiliate's reward balance by the specified delta.\\n    // @param dataStore The data store instance to use.\\n    // @param eventEmitter The event emitter instance to use.\\n    // @param market The market address.\\n    // @param token The token address.\\n    // @param affiliate The affiliate's address.\\n    // @param trader The trader's address.\\n    // @param delta The amount to increment the reward balance by.\\n    function incrementAffiliateReward(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address affiliate,\\n        address trader,\\n        uint256 delta\\n    ) internal {\\n        if (delta == 0) {\\n            return;\\n        }\\n\\n        dataStore.incrementUint(Keys.affiliateRewardKey(market, token, affiliate), delta);\\n        eventEmitter.emitAffiliateRewardEarned(market, token, affiliate, trader, delta);\\n    }\\n\\n    // @dev Gets the referral information for the specified trader.\\n    // @param referralStorage The referral storage instance to use.\\n    // @param trader The trader's address.\\n    // @return The affiliate's address, the total rebate, and the discount share.\\n    function getReferralInfo(\\n        IReferralStorage referralStorage,\\n        address trader\\n    ) internal view returns (address, uint256, uint256) {\\n        bytes32 code = referralStorage.traderReferralCodes(trader);\\n        address affiliate;\\n        uint256 totalRebate;\\n        uint256 discountShare;\\n\\n        if (code != bytes32(0)) {\\n            affiliate = referralStorage.codeOwners(code);\\n            uint256 referralTierLevel = referralStorage.referrerTiers(affiliate);\\n            (totalRebate, discountShare) = referralStorage.tiers(referralTierLevel);\\n\\n            uint256 customDiscountShare = referralStorage.referrerDiscountShares(affiliate);\\n            if (customDiscountShare != 0) {\\n                discountShare = customDiscountShare;\\n            }\\n        }\\n\\n        return (\\n            affiliate,\\n            Precision.basisPointsToFloat(totalRebate),\\n            Precision.basisPointsToFloat(discountShare)\\n        );\\n    }\\n\\n    // @dev Claims the affiliate's reward balance and transfers it to the specified receiver.\\n    // @param dataStore The data store instance to use.\\n    // @param eventEmitter The event emitter instance to use.\\n    // @param market The market address.\\n    // @param token The token address.\\n    // @param account The affiliate's address.\\n    // @param receiver The address to receive the reward.\\n    function claimAffiliateReward(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver\\n    ) internal {\\n        bytes32 key = Keys.affiliateRewardKey(market, token, account);\\n\\n        uint256 rewardAmount = dataStore.getUint(key);\\n        dataStore.setUint(key, 0);\\n\\n        MarketToken(payable(market)).transferOut(\\n            dataStore,\\n            token,\\n            rewardAmount,\\n            receiver\\n        );\\n\\n        eventEmitter.emitAffiliateRewardClaimed(\\n            market,\\n            token,\\n            account,\\n            receiver,\\n            rewardAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd866d85390382727375ff1fb0056b60ed5259b62c48a8001fbba5019d9a20a12\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The CONTROLLER role.\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0x781d51752032707d9fbd87a55835f851bbf2e71fe1fce2cfc497c5cf4fcfc737\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule is Governable {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf80a557194f6ffe8b3c5ffd48f937c24eff541648e62be6b02b2491b909418\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"../gov/Governable.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore is Governable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param key The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 key) external onlyGov {\\n        roles.add(key);\\n        roleMembers[key].add(account);\\n        roleCache[account][key] = true;\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param key The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 key) external onlyGov {\\n        roleMembers[key].remove(account);\\n        roleCache[account][key] = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param key The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 key) external view returns (bool) {\\n        return roleCache[account][key];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param key The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 key) external view returns (uint256) {\\n        return roleMembers[key].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param key The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 key, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[key].valuesAt(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x92e6a7fd2d2adc8e820d0790f0cc20e7a5052821345958122197d2abb737c308\",\"license\":\"BUSL-1.1\"},\"contracts/swap/SwapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./SwapUtils.sol\\\";\\n\\n/**\\n * @title SwapHandler\\n * @dev A contract to help with swap functions\\n */\\ncontract SwapHandler is ReentrancyGuard, RoleModule {\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    /**\\n     * @dev perform a swap based on the given params\\n     * @param params SwapUtils.SwapParams\\n     * @return (outputToken, outputAmount)\\n     */\\n    function swap(SwapUtils.SwapParams memory params)\\n        external\\n        nonReentrant\\n        onlyController\\n        returns (address, uint256)\\n    {\\n        return SwapUtils.swap(params);\\n    }\\n}\\n\",\"keccak256\":\"0x279ab06084f3e4a212a0341868fdece700c54c45c4218c67bc8e85e13d9c0404\",\"license\":\"BUSL-1.1\"},\"contracts/swap/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../pricing/SwapPricingUtils.sol\\\";\\nimport \\\"../token/TokenUtils.sol\\\";\\n\\n/**\\n * @title SwapUtils\\n * @dev Library for swap functions\\n */\\nlibrary SwapUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Price for Price.Props;\\n\\n    /**\\n     * @param dataStore The contract that provides access to data stored on-chain.\\n     * @param eventEmitter The contract that emits events.\\n     * @param oracle The contract that provides access to price data from oracles.\\n     * @param feeReceiver The contract that receives fees for the swap operation.\\n     * @param tokenIn The address of the token that is being swapped.\\n     * @param amountIn The amount of the token that is being swapped.\\n     * @param markets An array of market properties, specifying the markets in which the swap should be executed.\\n     * @param minOutputAmount The minimum amount of tokens that should be received as part of the swap.\\n     * @param receiver The address to which the swapped tokens should be sent.\\n     * @param shouldUnwrapNativeToken A boolean indicating whether the received tokens should be unwrapped from the wrapped native token (WNT) if they are wrapped.\\n     */\\n    struct SwapParams {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        Oracle oracle;\\n        FeeReceiver feeReceiver;\\n        address tokenIn;\\n        uint256 amountIn;\\n        Market.Props[] markets;\\n        uint256 minOutputAmount;\\n        address receiver;\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    /**\\n     * @param market The market in which the swap should be executed.\\n     * @param tokenIn The address of the token that is being swapped.\\n     * @param amountIn The amount of the token that is being swapped.\\n     * @param receiver The address to which the swapped tokens should be sent.\\n     * @param shouldUnwrapNativeToken A boolean indicating whether the received tokens should be unwrapped from the wrapped native token (WNT) if they are wrapped.\\n     */\\n    struct _SwapParams {\\n        Market.Props market;\\n        address tokenIn;\\n        uint256 amountIn;\\n        address receiver;\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    /**\\n     * @param tokenOut The address of the token that is being received as part of the swap.\\n     * @param tokenInPrice The price of the token that is being swapped.\\n     * @param tokenOutPrice The price of the token that is being received as part of the swap.\\n     * @param amountIn The amount of the token that is being swapped.\\n     * @param amountOut The amount of the token that is being received as part of the swap.\\n     * @param poolAmountOut The total amount of the token that is being received by all users in the swap pool.\\n     */\\n    struct _SwapCache {\\n        address tokenOut;\\n        Price.Props tokenInPrice;\\n        Price.Props tokenOutPrice;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        uint256 poolAmountOut;\\n    }\\n\\n    event SwapReverted(string reason);\\n\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n\\n    /**\\n     * @dev Swaps a given amount of a given token for another token based on a\\n     * specified swap path.\\n     * @param params The parameters for the swap.\\n     * @return A tuple containing the address of the token that was received as\\n     * part of the swap and the amount of the received token.\\n     */\\n    function swap(SwapParams memory params) internal returns (address, uint256) {\\n        address tokenOut = params.tokenIn;\\n        uint256 outputAmount = params.amountIn;\\n\\n        for (uint256 i = 0; i < params.markets.length; i++) {\\n            Market.Props memory market = params.markets[i];\\n            uint256 nextIndex = i + 1;\\n            address receiver;\\n            if (nextIndex < params.markets.length) {\\n                receiver = params.markets[nextIndex].marketToken;\\n            } else {\\n                receiver = params.receiver;\\n            }\\n\\n            _SwapParams memory _params = _SwapParams(\\n                market,\\n                tokenOut,\\n                outputAmount,\\n                receiver,\\n                i == params.markets.length - 1 ? params.shouldUnwrapNativeToken : false // only convert ETH on the last swap if needed\\n            );\\n            (tokenOut, outputAmount) = _swap(params, _params);\\n        }\\n\\n        if (outputAmount < params.minOutputAmount) {\\n            revert InsufficientSwapOutputAmount(outputAmount, params.minOutputAmount);\\n        }\\n\\n        return (tokenOut, outputAmount);\\n    }\\n\\n    /**\\n     * Performs a swap on a single market.\\n     *\\n     * @param params  The parameters for the swap.\\n     * @param _params The parameters for the swap on this specific market.\\n     * @return The token and amount that was swapped.\\n     */\\n    function _swap(SwapParams memory params, _SwapParams memory _params) internal returns (address, uint256) {\\n        _SwapCache memory cache;\\n\\n        cache.tokenOut = MarketUtils.getOppositeToken(_params.tokenIn, _params.market);\\n        cache.tokenInPrice = params.oracle.getLatestPrice(_params.tokenIn);\\n        cache.tokenOutPrice = params.oracle.getLatestPrice(cache.tokenOut);\\n\\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\\n            params.dataStore,\\n            _params.market.marketToken,\\n            _params.amountIn,\\n            Keys.FEE_RECEIVER_SWAP_FACTOR\\n        );\\n\\n        PricingUtils.transferFees(\\n            params.dataStore,\\n            params.feeReceiver,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            fees.feeReceiverAmount,\\n            FeeUtils.SWAP_FEE\\n        );\\n\\n        int256 priceImpactUsd = SwapPricingUtils.getPriceImpactUsd(\\n            SwapPricingUtils.GetPriceImpactUsdParams(\\n                params.dataStore,\\n                _params.market.marketToken,\\n                _params.tokenIn,\\n                cache.tokenOut,\\n                cache.tokenInPrice.midPrice(),\\n                cache.tokenOutPrice.midPrice(),\\n                (fees.amountAfterFees * cache.tokenInPrice.midPrice()).toInt256(),\\n                -(fees.amountAfterFees * cache.tokenInPrice.midPrice()).toInt256()\\n            )\\n        );\\n\\n        if (priceImpactUsd > 0) {\\n            // when there is a positive price impact factor, additional tokens from the swap impact pool\\n            // are withdrawn for the user\\n            // for example, if 50,000 USDC is swapped out and there is a positive price impact\\n            // an additional 100 USDC may be sent to the user\\n            // the swap impact pool is decreased by the used amount\\n\\n            cache.amountIn = fees.amountAfterFees;\\n            // round amountOut down\\n            cache.amountOut = cache.amountIn * cache.tokenInPrice.min / cache.tokenOutPrice.max;\\n            cache.poolAmountOut = cache.amountOut;\\n\\n            int256 positiveImpactAmount = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                cache.tokenOut,\\n                cache.tokenOutPrice,\\n                priceImpactUsd\\n            );\\n\\n            cache.amountOut += positiveImpactAmount.toUint256();\\n        } else {\\n            // when there is a negative price impact factor,\\n            // less of the input amount is sent to the pool\\n            // for example, if 10 ETH is swapped in and there is a negative price impact\\n            // only 9.995 ETH may be swapped in\\n            // the remaining 0.005 ETH will be stored in the swap impact pool\\n\\n            int256 negativeImpactAmount = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenIn,\\n                cache.tokenInPrice,\\n                priceImpactUsd\\n            );\\n\\n            cache.amountIn = fees.amountAfterFees - (-negativeImpactAmount).toUint256();\\n            cache.amountOut = cache.amountIn * cache.tokenInPrice.min / cache.tokenOutPrice.max;\\n            cache.poolAmountOut = cache.amountOut;\\n        }\\n\\n        if (_params.receiver != address(0)) {\\n            MarketToken(payable(_params.market.marketToken)).transferOut(\\n                params.dataStore,\\n                cache.tokenOut,\\n                cache.poolAmountOut,\\n                _params.receiver,\\n                _params.shouldUnwrapNativeToken\\n            );\\n        }\\n\\n        MarketUtils.applyDeltaToPoolAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            (cache.amountIn + fees.feesForPool).toInt256()\\n        );\\n\\n        MarketUtils.applyDeltaToPoolAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market.marketToken,\\n            cache.tokenOut,\\n            -cache.poolAmountOut.toInt256()\\n        );\\n\\n        MarketUtils.validateReserve(\\n            params.dataStore,\\n            _params.market,\\n            MarketUtils.MarketPrices(\\n                params.oracle.getLatestPrice(_params.market.indexToken),\\n                _params.tokenIn == _params.market.longToken ? cache.tokenInPrice : cache.tokenOutPrice,\\n                _params.tokenIn == _params.market.shortToken ? cache.tokenInPrice : cache.tokenOutPrice\\n            ),\\n            cache.tokenOut == _params.market.longToken\\n        );\\n\\n        params.eventEmitter.emitSwapFeesCollected(keccak256(abi.encode(\\\"swap\\\")), fees);\\n\\n        return (cache.tokenOut, cache.amountOut);\\n    }\\n}\\n\",\"keccak256\":\"0xd94cc502eb55d6882f5ebcac582d702fa8a4253f922334ed6a1701417fe019f8\",\"license\":\"BUSL-1.1\"},\"contracts/token/IWNT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IWNT\\n * @dev Interface for Wrapped Native Tokens, e.g. WETH\\n * The contract is named WNT instead of WETH for a more general reference name\\n * that can be used on any blockchain\\n */\\ninterface IWNT {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x366f887cceea33dba2247278d3827366cdcc3a3d7a2e3559fae430644ccbee02\",\"license\":\"BUSL-1.1\"},\"contracts/token/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"./IWNT.sol\\\";\\n\\n/**\\n * @title TokenUtils\\n * @dev Library for token functions, helps with transferring of tokens and\\n * native token functions\\n */\\nlibrary TokenUtils {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event TokenTransferReverted(string reason);\\n    event NativeTokenTransferReverted(string reason);\\n\\n    // throw custom errors to prevent spoofing of errors\\n    // this is necessary because contracts like DepositHandler, WithdrawalHandler, OrderHandler\\n    // do not cancel requests for specific errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error NativeTokenTransferError(address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Returns the address of the WNT token.\\n     * @param dataStore DataStore contract instance where the address of the WNT token is stored.\\n     * @return The address of the WNT token.\\n     */\\n    function wnt(DataStore dataStore) internal view returns (address) {\\n        return dataStore.getAddress(Keys.WNT);\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of `token` from the caller to `receiver`.\\n     * limit the amount of gas forwarded so that a user cannot intentionally\\n     * construct a token call that would consume all gas and prevent necessary\\n     * actions like request cancellation from being executed\\n     *\\n     * @param dataStore The data store that contains the `tokenTransferGasLimit` for the specified `token`.\\n     * @param token The address of the ERC20 token that is being transferred.\\n     * @param receiver The address of the recipient of the `token` transfer.\\n     * @param amount The amount of `token` to transfer.\\n     */\\n    function transfer(\\n        DataStore dataStore,\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.tokenTransferGasLimit(token));\\n\\n        (bool success, bytes memory returndata) = nonRevertingTransferWithGasLimit(\\n            IERC20(token),\\n            receiver,\\n            amount,\\n            gasLimit\\n        );\\n\\n        if (success) { return; }\\n\\n        string memory reason = string(abi.encode(returndata));\\n        emit TokenTransferReverted(reason);\\n\\n        revert TokenTransferError(token, receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of native token to the specified receiver address.\\n     * limit the amount of gas forwarded so that a user cannot intentionally\\n     * construct a token call that would consume all gas and prevent necessary\\n     * actions like request cancellation from being executed\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param receiver the address of the recipient of the native token transfer\\n     * @param amount the amount of native token to transfer\\n     */\\n    function transferNativeToken(\\n        DataStore dataStore,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\\n\\n        (bool success, bytes memory data) = payable(receiver).call{ value: amount, gas: gasLimit }(\\\"\\\");\\n\\n        if (success) { return; }\\n\\n        string memory reason = string(abi.encode(data));\\n        emit NativeTokenTransferReverted(reason);\\n\\n        revert NativeTokenTransferError(receiver, amount);\\n    }\\n\\n    /**\\n     * Deposits the specified amount of native token and sends the specified\\n     * amount of wrapped native token to the specified receiver address.\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param receiver the address of the recipient of the wrapped native token transfer\\n     * @param amount the amount of native token to deposit and the amount of wrapped native token to send\\n     */\\n    function depositAndSendWrappedNativeToken(\\n        DataStore dataStore,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n\\n        address _wnt = wnt(dataStore);\\n        IWNT(_wnt).deposit{value: amount}();\\n\\n        transfer(\\n            dataStore,\\n            _wnt,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraws the specified amount of wrapped native token and sends the\\n     * corresponding amount of native token to the specified receiver address.\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param _wnt the address of the WNT contract to withdraw the wrapped native token from\\n     * @param receiver the address of the recipient of the native token transfer\\n     * @param amount the amount of wrapped native token to withdraw and the amount of native token to send\\n     */\\n    function withdrawAndSendNativeToken(\\n        DataStore dataStore,\\n        address _wnt,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n\\n        IWNT(_wnt).withdraw(amount);\\n\\n        transferNativeToken(dataStore, receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of ERC20 token to the specified receiver\\n     * address, with a gas limit to prevent the transfer from consuming all available gas.\\n     * adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\\n     *\\n     * @param token the ERC20 contract to transfer the tokens from\\n     * @param to the address of the recipient of the token transfer\\n     * @param amount the amount of tokens to transfer\\n     * @param gasLimit the maximum amount of gas that the token transfer can consume\\n     * @return a tuple containing a boolean indicating the success or failure of the\\n     * token transfer, and a bytes value containing the return data from the token transfer\\n     */\\n    function nonRevertingTransferWithGasLimit(\\n        IERC20 token,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) internal returns (bool, bytes memory) {\\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n        (bool success, bytes memory returndata) = address(token).call{ gas: gasLimit }(data);\\n\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (!address(token).isContract()) {\\n                    return (false, \\\"Call to non-contract\\\");\\n                }\\n            }\\n\\n            // some tokens do not revert on a failed transfer, they will return a boolean instead\\n            // validate that the returned boolean is true, otherwise indicate that the token transfer failed\\n            if (returndata.length > 0 && !abi.decode(returndata, (bool))) {\\n                return (false, returndata);\\n            }\\n\\n            // transfers on some tokens do not return a boolean value, they will just revert if a transfer fails\\n            // for these tokens, if success is true then the transfer should have completed\\n            return (true, returndata);\\n        }\\n\\n        return (false, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0xa931393271b9d07d0dfa2719b1a8970f1e299cea2a10cc372b89aa8713704732\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title Array\\n * @dev Library for array functions\\n */\\nlibrary Array {\\n    using SafeCast for int256;\\n\\n    /**\\n     * @dev Gets the value of the element at the specified index in the given array. If the index is out of bounds, returns 0.\\n     *\\n     * @param arr the array to get the value from\\n     * @param index the index of the element in the array\\n     * @return the value of the element at the specified index in the array\\n     */\\n    function get(bytes32[] memory arr, uint256 index) internal pure returns (bytes32) {\\n        if (index < arr.length) {\\n            return arr[index];\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are equal to the specified value, false otherwise\\n     */\\n    function areEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] != value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are greater than the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are greater than the specified value, false otherwise\\n     */\\n    function areGreaterThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] <= value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the median value of the elements in the given array. For arrays with an odd number of elements, returns the element at the middle index. For arrays with an even number of elements, returns the average of the two middle elements.\\n     *\\n     * @param arr the array to get the median value from\\n     * @return the median value of the elements in the given array\\n     */\\n    function getMedian(uint256[] memory arr) internal pure returns (uint256) {\\n        if (arr.length % 2 == 1) {\\n            return arr[arr.length / 2];\\n        }\\n\\n        return (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;\\n    }\\n\\n    /**\\n     * @dev Gets the uncompacted value at the specified index in the given array of compacted values.\\n     *\\n     * @param compactedValues the array of compacted values to get the uncompacted value from\\n     * @param index the index of the uncompacted value in the array\\n     * @param compactedValueBitLength the length of each compacted value, in bits\\n     * @param bitmask the bitmask to use to extract the uncompacted value from the compacted value\\n     * @return the uncompacted value at the specified index in the array of compacted values\\n     */\\n    function getUncompactedValue(\\n        uint256[] memory compactedValues,\\n        uint256 index,\\n        uint256 compactedValueBitLength,\\n        uint256 bitmask\\n    ) internal pure returns (uint256) {\\n        uint256 compactedValuesPerSlot = 256 / compactedValueBitLength;\\n\\n        uint256 slotIndex = index / compactedValuesPerSlot;\\n        uint256 slotBits = compactedValues[slotIndex];\\n        uint256 offset = (index - slotIndex * compactedValuesPerSlot) * compactedValueBitLength;\\n\\n        uint256 value = (slotBits >> offset) & bitmask;\\n\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x7883ad022cfe515545d6e8dabb8ef77800a9bb414078a2ac3e80b3cba3cda2cc\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Bits.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Bits\\n * @dev Library for bit values\\n */\\nlibrary Bits {\\n    // @dev uint256(~0) is 256 bits of 1s\\n    // @dev shift the 1s by (256 - 8) to get (256 - 8) 0s followed by 8 1s\\n    uint256 constant public BITMASK_8 = ~uint256(0) >> (256 - 8);\\n    // @dev shift the 1s by (256 - 16) to get (256 - 16) 0s followed by 16 1s\\n    uint256 constant public BITMASK_16 = ~uint256(0) >> (256 - 16);\\n    // @dev shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\\n    uint256 constant public BITMASK_32 = ~uint256(0) >> (256 - 32);\\n    // @dev shift the 1s by (256 - 64) to get (256 - 64) 0s followed by 64 1s\\n    uint256 constant public BITMASK_64 = ~uint256(0) >> (256 - 64);\\n}\\n\",\"keccak256\":\"0x894cff952fd828a0870df69ad280272ab173288042ca49ba34a4a5cb26fedd66\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title Calc\\n * @dev Library for math functions\\n */\\nlibrary Calc {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    /**\\n     * @dev Calculates the absolute difference between two numbers.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the absolute difference between the two numbers\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n\\n    /**\\n     * @dev Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    /**\\n     * Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpDivision(int256 a, uint256 b) internal pure returns (int256) {\\n        if (a < 0) {\\n            return (a - b.toInt256() + 1) / b.toInt256();\\n        }\\n\\n        return (a + b.toInt256() - 1) / b.toInt256();\\n    }\\n\\n    /**\\n     * Adds two numbers together, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sum(uint256 a, int256 b) internal pure returns (uint256) {\\n        if (b > 0) {\\n            return a + b.abs();\\n        }\\n\\n        return a - b.abs();\\n    }\\n\\n    /**\\n     * Adds two numbers together, treating the second number as an unsigned integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sum(int256 a, uint256 b) internal pure returns (int256) {\\n        return a + b.toInt256();\\n    }\\n\\n\\n    /**\\n     * Converts the given unsigned integer to a signed integer, using the given\\n     * flag to determine whether the result should be positive or negative.\\n     *\\n     * @param a the unsigned integer to convert\\n     * @param isPositive whether the result should be positive (if true) or negative (if false)\\n     * @return the signed integer representation of the given unsigned integer\\n     */\\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\\n        if (isPositive) {\\n            return a.toInt256();\\n        } else {\\n            return -a.toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2522238bfe09ba55ed555b37b2c0a0da91195c8838ecd7c2a2baae321df57b1a\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x34d18a8815cbee0ac7b15c0aa856d2f2fac60e400166a54784f53bf55c06f08b\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Null.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Null\\n * @dev Library for empty values\\n */\\nlibrary Null {\\n    bytes public constant BYTES = \\\"\\\";\\n}\\n\",\"keccak256\":\"0xa8befbf4948f0e3c547ca14df00853ec3024788f6b6e07196bb3ddec058465d1\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Precision.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title Precision\\n * @dev Library for precision values and conversions\\n */\\nlibrary Precision {\\n    using SafeCast for uint256;\\n\\n    uint256 public constant FLOAT_PRECISION = 10 ** 30;\\n    uint256 public constant WEI_PRECISION = 10 ** 18;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    uint256 public constant FLOAT_TO_WEI_DIVISOR = 10 ** 12;\\n\\n    /**\\n     * Applies the given factor to the given amount and returns the result.\\n     *\\n     * @param amount The amount to apply the factor to.\\n     * @param factor The factor to apply.\\n     * @return The result of applying the factor to the amount.\\n     */\\n    function applyFactor(uint256 amount, uint256 factor) internal pure returns (uint256) {\\n        return amount * factor / FLOAT_PRECISION;\\n    }\\n\\n    /**\\n     * Applies the given factor to the given amount and returns the result.\\n     *\\n     * @param amount The amount to apply the factor to.\\n     * @param factor The factor to apply.\\n     * @return The result of applying the factor to the amount.\\n     */\\n    function applyFactor(uint256 amount, int256 factor) internal pure returns (int256) {\\n        return amount.toInt256() * factor / FLOAT_PRECISION.toInt256();\\n    }\\n\\n    /**\\n     * Converts the given amount from float to wei.\\n     *\\n     * @param amount The amount to convert.\\n     * @return The converted amount in wei.\\n     */\\n    function floatToWei(uint256 amount) internal pure returns (uint256) {\\n        return amount / FLOAT_TO_WEI_DIVISOR;\\n    }\\n\\n    /**\\n     * Converts the given amount from wei to float.\\n     *\\n     * @param amount The amount to convert.\\n     * @return The converted amount in float.\\n     */\\n    function weiToFloat(uint256 amount) internal pure returns (uint256) {\\n        return amount * FLOAT_TO_WEI_DIVISOR;\\n    }\\n\\n    /**\\n     * Converts the given number of basis points to float.\\n     *\\n     * @param basisPoints The number of basis points to convert.\\n     * @return The converted amount in float.\\n     */\\n    function basisPointsToFloat(uint256 basisPoints) internal pure returns (uint256) {\\n        return basisPoints * FLOAT_PRECISION / BASIS_POINTS_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0x1dd7d55d90c66dc7c430932d3d34d162a476e4def0d3676d6a7e723d1ee85be2\",\"license\":\"BUSL-1.1\"},\"contracts/withdrawal/Withdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Withdrawal\\n * @dev Struct for withdrawals\\n */\\nlibrary Withdrawal {\\n    /**\\n     * @param account The account to withdraw for.\\n     * @param receiver The address that will receive the withdrawn tokens.\\n     * @param callbackContract The contract that will be called back.\\n     * @param market The market on which the withdrawal will be executed.\\n     * @param marketTokensLongAmount The amount of long market tokens that will be withdrawn.\\n     * @param marketTokensShortAmount The amount of short market tokens that will be withdrawn.\\n     * @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\\n     * @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\\n     * @param updatedAtBlock The block at which the withdrawal was last updated.\\n     * @param shouldUnwrapNativeToken Whether the native token should be unwrapped when executing the withdrawal.\\n     * @param executionFee The execution fee for the withdrawal.\\n     * @param callbackGasLimit The gas limit for calling the callback contract.\\n     * @param data Additional data for the withdrawal.\\n     */\\n    struct Props {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address market;\\n        uint256 marketTokensLongAmount;\\n        uint256 marketTokensShortAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtBlock;\\n        bool shouldUnwrapNativeToken;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x1fc60e2254974c5e177696cdf78885773f22ae05735ea0d8d2e1d3612a93e39b\",\"license\":\"BUSL-1.1\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162005eab38038062005eab8339810160408190526200003591620000fe565b6001600055868681620000483362000084565b6001600160a01b0390811660805290811660a05295861660c0525092841660e05290831661010052821661012052166101405250620001a99050565b600180546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b6001600160a01b0381168114620000fb57600080fd5b50565b600080600080600080600060e0888a0312156200011a57600080fd5b87516200012781620000e5565b60208901519097506200013a81620000e5565b60408901519096506200014d81620000e5565b60608901519095506200016081620000e5565b60808901519094506200017381620000e5565b60a08901519093506200018681620000e5565b60c08901519092506200019981620000e5565b8091505092959891949750929550565b60805160a05160c05160e051610100516101205161014051615bf8620002b36000396000818161026e01526105f80152600081816101a40152818161034f01526105c90152600081816102a20152818161059a015281816107fd01528181610aab0152610b4201526000818161023a0152818161056b015281816107dc01528181610a8a0152610b21015260008181610206015281816103910152818161053c015281816107bb01528181610a690152610b0001526000818161015001528181610370015281816104b90152818161050d015281816107020152818161076d0152818161079a01528181610a480152610adf01526000818161011c01526114550152615bf86000f3fe6080604052600436106100a65760003560e01c806312d43a51146100b257806345528d69146100e85780634a4a7b041461010a578063660d0d671461013e5780636bd3d451146101725780637dc0d1d01461019257806396340f4e146101c65780639ff78c30146101f4578063a25dfba714610228578063b3f006741461025c578063b8d2c69314610290578063cfad57a2146102c4578063e46db7d1146102e457600080fd5b366100ad57005b600080fd5b3480156100be57600080fd5b506001546100d2906001600160a01b031681565b6040516100df91906147f9565b60405180910390f35b3480156100f457600080fd5b50610108610103366004614ae9565b610304565b005b34801561011657600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561014a57600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561017e57600080fd5b5061010861018d366004614cce565b6106ad565b34801561019e57600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b3480156101d257600080fd5b506101e66101e1366004614cfa565b61072c565b6040519081526020016100df565b34801561020057600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561023457600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561026857600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561029c57600080fd5b506100d27f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d057600080fd5b506101086102df366004614d3c565b61083d565b3480156102f057600080fd5b506101086102ff366004614d59565b610892565b33301461034d576040805163a35b150b60e01b815233600480830191909152602482019290925260448101919091526329a2a62360e11b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085836001600160a01b0316633608d9e08484846040518463ffffffff1660e01b81526004016103e193929190614ec0565b600060405180830381600087803b1580156103fb57600080fd5b505af192505050801561040c575060015b6104b457610418615010565b806308c379a0036104a8575061042c61502c565b8061043757506104aa565b7f9966b250e13ade3123b5af1743515baa8eaaf09f1e4081aa5e7e66ddd2b1415a8160405161046691906150b5565b60405180910390a1604080518082018252600c81526b27a920a1a622afa2a92927a960a11b6020820152905162461bcd60e51b815261034491906004016150b5565b505b3d6000803e3d6000fd5b6104e67f00000000000000000000000000000000000000000000000000000000000000006104e130610b73565b610bfb565b60006104fb8860400151896020015151610c26565b905060006040518061014001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018b8152602001838152602001896001600160a01b0316815260200188815250905061064f81610cbc565b5050836001600160a01b031662ccf1556040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b505050505050505050505050565b6106fd6040516020016106bf906150c8565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b81525061143e565b6107287f000000000000000000000000000000000000000000000000000000000000000083836114ee565b5050565b60006002600054036107505760405162461bcd60e51b8152600401610344906150ec565b6002600055604051610768906106bf906020016150c8565b6107957f00000000000000000000000000000000000000000000000000000000000000006104e1306116a5565b6108317f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008761082c3689900389018961513c565b6116e1565b60016000559392505050565b6001546001600160a01b03163314610886576040805163a35b150b60e01b81523360048201526024810191909152600360448201526223a7ab60e91b6064820152608401610344565b61088f81611b3a565b50565b6002600054036108b45760405162461bcd60e51b8152600401610344906150ec565b600260005560405161092d906108ed906020016020808252600c908201526b27a92222a92fa5a2a2a822a960a11b604082015260600190565b604051602081830303815290604052805190602001206040518060400160405280600c81526020016b27a92222a92fa5a2a2a822a960a11b81525061143e565b60005a6040516345528d6960e01b815290915030906345528d699061095c908690869033908790600401615349565b600060405180830381600087803b15801561097657600080fd5b505af1925050508015610987575060015b610b6957610993615010565b806308c379a003610ad857506109a761502c565b806109b25750610ada565b6040518060400160405280600c81526020016b27a920a1a622afa2a92927a960a11b8152506040516020016109e791906150b5565b6040516020818303038152906040528051906020012081604051602001610a0e91906150b5565b6040516020818303038152906040528051906020012003610a43578060405162461bcd60e51b815260040161034491906150b5565b610ad27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000883388611b9b565b50610b69565b505b610b697f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000873387611b9b565b5050600160005550565b6000604051602001610bb090602080825260179082015276455845435554455f4445504f5349545f4645415455524560481b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038416908201526060015b604051602081830303815290604052805190602001209050919050565b610c058282611eb8565b1561072857604051630827f79760e41b815260048101829052602401610344565b60606000826001600160401b03811115610c4257610c4261480d565b604051908082528060200260200182016040528015610c6b578160200160208202803683370190505b50905060005b83811015610cb257610c838582611f2b565b828281518110610c9557610c95615515565b602090810291909101015280610caa81615541565b915050610c71565b5090505b92915050565b600081604001516001600160a01b0316638eaa6ac08360c001516040518263ffffffff1660e01b8152600401610cf491815260200190565b600060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3991908101906155bf565b80519091506001600160a01b0316610d635760405162461bcd60e51b8152600401610344906156c4565b60e08082015190830151610d7691611f68565b610db457604080518082018252600c81526b27a920a1a622afa2a92927a960a11b6020820152905162461bcd60e51b815261034491906004016150b5565b610dc28260c0015182611fbb565b600082606001516001600160a01b031663c2bc2efc83606001516040518263ffffffff1660e01b8152600401610df891906147f9565b600060405180830381865afa158015610e15573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e3d91908101906156f9565b9050600083608001516001600160a01b0316635dcf719483604001516040518263ffffffff1660e01b8152600401610e7591906147f9565b6040805180830381865afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb591906157b5565b9050600084608001516001600160a01b0316635dcf719484606001516040518263ffffffff1660e01b8152600401610eed91906147f9565b6040805180830381865afa158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d91906157b5565b90506000610f3a83612049565b8560800151610f499190615803565b90506000610f5683612049565b8660a00151610f659190615803565b90506000806110286040518061010001604052808b600001516001600160a01b0316815260200189600001516001600160a01b0316815260200189604001516001600160a01b0316815260200189606001516001600160a01b03168152602001610fce89612049565b8152602001610fdc88612049565b8152602001611001610fed8a612049565b8c60800151610ffc9190615803565b61206b565b815260200161102161101289612049565b8c60a00151610ffc9190615803565b90526120d9565b608089015190915015611166576040808a01518a518983015160808c01518b519451635789eee760e01b81526001600160a01b0390941694635789eee7946110769493929190600401615822565b600060405180830381600087803b15801561109057600080fd5b505af11580156110a4573d6000803e3d6000fd5b5050505060006040518061012001604052808981526020018a600001516001600160a01b031681526020018a602001516001600160a01b0316815260200189604001516001600160a01b0316815260200189606001516001600160a01b031681526020018881526020018781526020018a60800151815260200161112d8688610ffc919061584d565b6111368861206b565b6111409086615860565b61114a91906158fb565b905290506111588a82612104565b611162908461584d565b9250505b60a0880151156112a2576040808a01518a5160608a015160a08c01518b519451635789eee760e01b81526001600160a01b0390941694635789eee7946111b29493929190600401615822565b600060405180830381600087803b1580156111cc57600080fd5b505af11580156111e0573d6000803e3d6000fd5b5050505060006040518061012001604052808981526020018a600001516001600160a01b031681526020018a602001516001600160a01b0316815260200189606001516001600160a01b0316815260200189604001516001600160a01b031681526020018781526020018881526020018a60a0015181526020016112698688610ffc919061584d565b6112728761206b565b61127c9086615860565b61128691906158fb565b905290506112948a82612104565b61129e908461584d565b9250505b8760c001518210156112ce5760c088015160405163036711a360e51b8152610344918491600401615929565b88604001516001600160a01b03166395bc26738a60c001516040518263ffffffff1660e01b815260040161130491815260200190565b600060405180830381600087803b15801561131e57600080fd5b505af1158015611332573d6000803e3d6000fd5b5050505088602001516001600160a01b0316630380fb798a60c001516040518263ffffffff1660e01b815260040161136c91815260200190565b600060405180830381600087803b15801561138657600080fd5b505af115801561139a573d6000803e3d6000fd5b505050506113ac8960c00151896122a5565b88516040808b0151610120808c0151908d01516101008e01518d519451632d1c88e560e11b815273f07d407B7f9E7dfe8aab1165962B850E64b54E8096635a3911ca96611403969195919491939192600401615937565b60006040518083038186803b15801561141b57600080fd5b505af415801561142f573d6000803e3d6000fd5b50505050505050505050505050565b60405163ac4ab3fb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4ab3fb9061148c9033908690600401615971565b602060405180830381865afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd919061598a565b61072857338160405163a35b150b60e01b81526004016103449291906159a7565b806000036114fb57505050565b6000836001600160a01b031663bd02d0f560405160200161154d906020808252601f908201527f4e41544956455f544f4b454e5f5452414e534645525f4741535f4c494d495400604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161158191815260200190565b602060405180830381865afa15801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c291906159cb565b9050600080846001600160a01b0316848490604051600060405180830381858888f193505050503d8060008114611615576040519150601f19603f3d011682016040523d82523d6000602084013e61161a565b606091505b5091509150811561162d57505050505050565b60008160405160200161164091906150b5565b60405160208183030381529060405290507f6c4e9d88878940a822d239187b8b00d62a80dce222d53bc5f1fb072d9c34b6818160405161168091906150b5565b60405180910390a18585604051633828654560e11b8152600401610344929190615971565b6000604051602001610bb0906020808252601690820152754352454154455f4445504f5349545f4645415455524560501b604082015260600190565b600080846001600160a01b031663c2bc2efc84604001516040518263ffffffff1660e01b815260040161171491906147f9565b600060405180830381865afa158015611731573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261175991908101906156f9565b9050611764816122df565b604080820151905163352f9aed60e01b81526000916001600160a01b0389169163352f9aed91611796916004016147f9565b6020604051808303816000875af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d991906159cb565b90506000876001600160a01b031663352f9aed84606001516040518263ffffffff1660e01b815260040161180d91906147f9565b6020604051808303816000875af115801561182c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185091906159cb565b9050600061185d8b612307565b9050806001600160a01b031684604001516001600160a01b0316036118925760a086015161188b90846159e4565b925061198e565b806001600160a01b031684606001516001600160a01b0316036118c55760a08601516118be90836159e4565b915061198e565b60405163352f9aed60e01b81526000906001600160a01b038b169063352f9aed906118f49085906004016147f9565b6020604051808303816000875af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193791906159cb565b90508660a00151811461198c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369745574696c733a20696e76616c696420776e74416d6f756e74006044820152606401610344565b505b6000604051806101800160405280896001600160a01b0316815260200188600001516001600160a01b0316815260200188602001516001600160a01b0316815260200186600001516001600160a01b0316815260200185815260200184815260200188606001518152602001611a026123b4565b81526020018860800151151581526020018860a0015181526020018860c0015181526020016040518060200160405280600081525081525090506000611a488d8361243a565b9050611a598d828a60a0015161256d565b6000611a648e6125b5565b60405163fabd2ba360e01b81529091506001600160a01b038d169063fabd2ba390611a9590849087906004016159f7565b600060405180830381600087803b158015611aaf57600080fd5b505af1158015611ac3573d6000803e3d6000fd5b505050508c6001600160a01b031663a0240c7f82856040518363ffffffff1660e01b8152600401611af59291906159f7565b600060405180830381600087803b158015611b0f57600080fd5b505af1158015611b23573d6000803e3d6000fd5b509299505050505050505050509695505050505050565b600180546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60405163023aa9ab60e61b8152600481018490526000906001600160a01b03871690638eaa6ac090602401600060405180830381865afa158015611be3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c0b91908101906155bf565b80519091506001600160a01b0316611c355760405162461bcd60e51b8152600401610344906156c4565b60608101516040516330af0bbf60e21b81526000916001600160a01b0388169163c2bc2efc91611c67916004016147f9565b600060405180830381865afa158015611c84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cac91908101906156f9565b608083015190915015611d3157866001600160a01b031663f94989388a8360400151856080015186600001518761010001516040518663ffffffff1660e01b8152600401611cfe959493929190615aca565b600060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b505050505b60a082015115611db357866001600160a01b031663f94989388a83606001518560a0015186600001518761010001516040518663ffffffff1660e01b8152600401611d80959493929190615aca565b600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b505050505b6040516395bc267360e01b8152600481018690526001600160a01b038816906395bc267390602401600060405180830381600087803b158015611df557600080fd5b505af1158015611e09573d6000803e3d6000fd5b50506040516343d9ba2d60e11b8152600481018890526001600160a01b038b1692506387b3745a9150602401600060405180830381600087803b158015611e4f57600080fd5b505af1158015611e63573d6000803e3d6000fd5b50505050611e7185836125f8565b6101208201518251604051632d1c88e560e11b815273f07d407B7f9E7dfe8aab1165962B850E64b54E8092635a3911ca92611403928e928d9290918a918c91600401615937565b604051633d70e7e560e11b8152600481018290526000906001600160a01b03841690637ae1cfca90602401602060405180830381865afa158015611f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f24919061598a565b9392505050565b600080611f42848460406001600160401b03612632565b905080600003611f245760405163349f5fdd60e11b815260048101849052602401610344565b6000805b8351811015611fb15782848281518110611f8857611f88615515565b602002602001015114611f9f576000915050610cb6565b80611fa981615541565b915050611f6c565b5060019392505050565b611fc881604001516126a5565b611fd0575050565b80604001516001600160a01b031663b01c23ba6002836101400151611ff59190615afd565b84846040518463ffffffff1660e01b81526004016120149291906159f7565b600060405180830381600088803b15801561202e57600080fd5b5087f193505050508015612040575060015b15610728575050565b6000600282600001518360200151612061919061584d565b610cb69190615afd565b60006001600160ff1b038211156120d55760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610344565b5090565b6000806120e5836126dc565b905060006120fc84600001518560200151846127b1565b949350505050565b60008061217784600001518460000151600001518560e0015160405160200161215c906020808252601b908201527a2322a2afa922a1a2a4ab22a92fa222a827a9a4aa2fa320a1aa27a960291b604082015260600190565b60405160208183030381529060405280519060200120612a19565b845160a0860151855151606087015184516040519596506121d9956121be906020016020808252600b908201526a4445504f5349545f46454560a81b604082015260600190565b60405160208183030381529060405280519060200120612b59565b83602001516001600160a01b03166347a3b4936040516020016122179060208082526007908201526619195c1bdcda5d60ca1b604082015260600190565b60408051601f1981840301815282825280516020918201206001600160e01b031960e086901b16845260048401528551602484015285015160448301528401516064820152608401600060405180830381600087803b15801561227957600080fd5b505af115801561228d573d6000803e3d6000fd5b505050506120fc848483604001518460200151612c36565b6122b281604001516126a5565b6122ba575050565b80604001516001600160a01b031663b36a1d436002836101400151611ff59190615afd565b80516001600160a01b031661088f576040516302fde0d760e11b815260040160405180910390fd5b6000816001600160a01b03166321f8a72160405160200161233f9060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161237391815260200190565b602060405180830381865afa158015612390573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190615b11565b600061a4b14614806123c8575062066eeb46145b156124355760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561240c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243091906159cb565b905090565b504390565b6000816080015160001480612451575060a0820151155b156124e557816101400151836001600160a01b031663bd02d0f56124756001612ed4565b6040518263ffffffff1660e01b815260040161249391815260200190565b602060405180830381865afa1580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d491906159cb565b6124de919061584d565b9050610cb6565b816101400151836001600160a01b031663bd02d0f56125046000612ed4565b6040518263ffffffff1660e01b815260040161252291815260200190565b602060405180830381865afa15801561253f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256391906159cb565b611f24919061584d565b60006125798484612f36565b905060006125873a83615803565b9050808310156125ae578083604051635dac504d60e01b8152600401610344929190615929565b5050505050565b6000806125c1836130e8565b90506000816040516020016125d891815260200190565b60408051601f198184030181529190528051602090910120949350505050565b61260581604001516126a5565b61260d575050565b80604001516001600160a01b031663f79e3de36002836101400151611ff59190615afd565b60008061264184610100615afd565b9050600061264f8287615afd565b9050600087828151811061266557612665615515565b60200260200101519050600086848461267e9190615803565b612688908a6159e4565b6126929190615803565b9190911c85169350505050949350505050565b60006001600160a01b0382166126bd57506000919050565b6001600160a01b0382163b6126d457506000919050565b506001919050565b6127076040518060800160405280600081526020016000815260200160008152602001600081525090565b600061272083600001518460200151856040015161319a565b9050600061273b84600001518560200151866060015161319a565b9050600084608001518361274f9190615803565b905060008560a00151836127639190615803565b90506000612775838860c00151613214565b90506000612787838960e00151613214565b60408051608081018252958652602086019490945292840191909152506060820152949350505050565b6000806127c683600001518460200151613244565b905060006127dc84604001518560600151613244565b6060850151604086015160208701518751939450909211159111151460006001600160a01b03881663bd02d0f561281289613266565b6040518263ffffffff1660e01b815260040161283091815260200190565b602060405180830381865afa15801561284d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287191906159cb565b905081156129125783831060006001600160a01b038a1663bd02d0f56128978b856132a7565b6040518263ffffffff1660e01b81526004016128b591815260200190565b602060405180830381865afa1580156128d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f691906159cb565b90506129058686848487613333565b9650505050505050611f24565b6000886001600160a01b031663bd02d0f561292e8a60016132a7565b6040518263ffffffff1660e01b815260040161294c91815260200190565b602060405180830381865afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d91906159cb565b90506000896001600160a01b031663bd02d0f56129ab8b60006132a7565b6040518263ffffffff1660e01b81526004016129c991815260200190565b602060405180830381865afa1580156129e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0a91906159cb565b9050612905868684848761336e565b612a216147cb565b612a296147cb565b6000866001600160a01b031663bd02d0f5612a43886133b7565b6040518263ffffffff1660e01b8152600401612a6191815260200190565b602060405180830381865afa158015612a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa291906159cb565b60405163bd02d0f560e01b8152600481018690529091506000906001600160a01b0389169063bd02d0f590602401602060405180830381865afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1191906159cb565b90506000612b1f87846133ec565b9050612b2b81836133ec565b808552612b3890826159e4565b6020850152612b4781886159e4565b60408501525091979650505050505050565b8115612c2e57604051635789eee760e01b81526001600160a01b03851690635789eee790612b91908990879087908b90600401615822565b600060405180830381600087803b158015612bab57600080fd5b505af1158015612bbf573d6000803e3d6000fd5b50506040516302002bf360e31b8152600481018490526001600160a01b03868116602483015260448201869052881692506310015f9891506064015b600060405180830381600087803b158015612c1557600080fd5b505af1158015612c29573d6000803e3d6000fd5b505050505b505050505050565b835183516040810151606086015160009384938493612d23936001600160a01b03908116911614612c6b578860c00151612c71565b8860a001515b8960000151606001516001600160a01b03168a606001516001600160a01b031614612ca0578960c00151612ca6565b8960a001515b60808c01518b5160200151604051631773dc6560e21b81526001600160a01b0390921691635dcf719491612cdc916004016147f9565b6040805180830381865afa158015612cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1c91906157b5565b600161340f565b865151909150600090612d3590613535565b905060008761010001511315612dc6576000612d7289600001518a602001518a60000151600001518b608001518c60c001518d6101000151613575565b9050612d9a8860c0015160000151612d89836135f4565b612d939190615803565b8484613646565b612da4908561584d565b895160208b01518a515160808c0151939750612dc0938561367d565b50612e14565b6000612df389600001518a602001518a60000151600001518b606001518c60a001518d6101000151613575565b9050612e06612e0182615b2e565b6135f4565b612e1090886159e4565b9650505b60a087015151612e2f90612e289088615803565b8383613646565b612e39908461584d565b885160208a015189515160608b0151939650612e6193612e5c610ffc8b8d61584d565b61367d565b86515160408089015190516340c10f1960e01b81526001600160a01b03909216916340c10f1991612e96918790600401615971565b600060405180830381600087803b158015612eb057600080fd5b505af1158015612ec4573d6000803e3d6000fd5b50949a9950505050505050505050565b6000604051602001612f0b9060208082526011908201527011115413d4d25517d1d054d7d312535255607a1b604082015260600190565b60408051601f1981840301815282825280516020918201209083015283151590820152606001610bde565b600080836001600160a01b031663bd02d0f5604051602001612f88906020808252601c908201527b1154d512535055115117d1915157d09054d157d1d054d7d31253525560221b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612fbc91815260200190565b602060405180830381865afa158015612fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffd91906159cb565b90506000846001600160a01b031663bd02d0f5604051602001613051906020808252601f908201527f455354494d415445445f4645455f4d554c5449504c4945525f464143544f5200604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161308591815260200190565b602060405180830381865afa1580156130a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c691906159cb565b905060006130d485836133ec565b6130de908461584d565b9695505050505050565b6000816001600160a01b031663340dbab3604051602001613122906020808252600590820152644e4f4e434560d81b604082015260600190565b6040516020818303038152906040528051906020012060016040518363ffffffff1660e01b8152600401613157929190615929565b6020604051808303816000875af1158015613176573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb691906159cb565b6000836001600160a01b031663bd02d0f56131b5858561372e565b6040518263ffffffff1660e01b81526004016131d391815260200190565b602060405180830381865afa1580156131f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fc91906159cb565b600080821315613231576132278261379c565b6124de908461584d565b61323a8261379c565b611f2490846159e4565b600081831161325c5761325783836159e4565b611f24565b611f2482846159e4565b6000604051602001610bb0906020808252601b908201527a29aba0a82fa4a6a820a1aa2fa2ac2827a722a72a2fa320a1aa27a960291b604082015260600190565b60006040516020016132df9060208082526012908201527129aba0a82fa4a6a820a1aa2fa320a1aa27a960711b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015282151560608201526080015b60405160208183030381529060405280519060200120905092915050565b6000806133546133448886866137af565b61334f8887876137af565b613244565b905060006133628287613815565b98975050505050505050565b60008061337c8786856137af565b9050600061338b8786866137af565b905060006133998383613244565b905060006133a982848611613815565b9a9950505050505050505050565b6000604051602001610bb0906020808252600f908201526e29aba0a82fa322a2afa320a1aa27a960891b604082015260600190565b600068327cb2734119d3b7a9601e1b6134058385615803565b611f249190615afd565b600080613425888860000151896040015161319a565b9050600061343c8989600001518a6060015161319a565b9050600061344a8886613838565b6134549084615803565b90506134608786613838565b61346a9083615803565b613474908261584d565b90506134908a8a600001518b604001518c60600151600161384f565b61349a908261584d565b90506134b68a8a600001518b604001518c60600151600061384f565b6134c0908261584d565b905060006134d28b8b600001516138a1565b90506134de8787613838565b6134e89082615803565b6134f2908361584d565b915060006135118c8c600001518d604001518e606001518c8c1561391a565b90506135258361352083615b2e565b613214565b9c9b505050505050505050505050565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613176573d6000803e3d6000fd5b6000806000831361358757835161358d565b83602001515b90506000808413156135d2576135a28261206b565b6135ac90856158fb565b905060006135be610ffc8b8a8a61394d565b9050808213156135cc578091505b506135df565b6135dc8483613968565b90505b613362898989896135ef86615b2e565b6139d5565b6000808212156120d55760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610344565b6000811580613653575082155b156136685761366184613a86565b9050611f24565b826136738584615803565b6120fc9190615afd565b6000856001600160a01b0316639deed1c8613698868661372e565b846040518363ffffffff1660e01b81526004016136b6929190615929565b6020604051808303816000875af11580156136d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f991906159cb565b60405163f79a52b760e01b81529091506001600160a01b0386169063f79a52b790612bfb908790879087908790600401615b4a565b600060405160200161375f906020808252600b908201526a1413d3d317d05353d5539560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038086169183019190915283166060820152608001613315565b6000808212156120d55781600003610cb6565b600068327cb2734119d3b7a9601e1b8410156137cd57506000611f24565b60006137e96137db86613a86565b6137e485613a86565b613a97565b90506137f481613ad7565b9050600261380282866133ec565b61380c9190615afd565b95945050505050565b60008115613826576124de8361206b565b61382f8361206b565b6124de90615b2e565b600081613846578251611f24565b50506020015190565b60008061385f8787878787613ae8565b9050600061386e888886613b13565b9050600061387d898987613b2e565b90508061388a8385615803565b61389491906159e4565b9998505050505050505050565b6000826001600160a01b031663bd02d0f56138bb84613b49565b6040518263ffffffff1660e01b81526004016138d991815260200190565b602060405180830381865afa1580156138f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2491906159cb565b60008061392d8888888888600189613b8a565b90506000613941898989898960008a613b8a565b90506138948183615b73565b6000836001600160a01b031663bd02d0f56131b58585613c1e565b6000808312156139a35761397b8261206b565b6139848361206b565b61398e9085615b9b565b613999906001615b73565b6124de91906158fb565b6139ac8261206b565b60016139b78461206b565b6139c19086615b73565b6139cb9190615b9b565b611f2491906158fb565b6000856001600160a01b0316639deed1c86139f08686613c1e565b846040518363ffffffff1660e01b8152600401613a0e929190615929565b6020604051808303816000875af1158015613a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5191906159cb565b60405163eb59c7c160e01b81529091506001600160a01b0386169063eb59c7c190612bfb908790879087908790600401615b4a565b6000610cb664e8d4a5100083615afd565b600082600003613abd578115613aae5760006124de565b50670de0b6b3a7640000610cb6565b611f24613ad2613acc85613c5b565b84613d11565b613d1d565b6000610cb664e8d4a5100083615803565b600080613af787878786613d63565b90506000613b0788888787613d63565b9050613362818361584d565b6000836001600160a01b031663bd02d0f56131b58585613dde565b6000836001600160a01b031663bd02d0f56131b58585613e1f565b6000604051602001610bb0906020808252601b908201527a1413d4d2551253d397d253541050d517d413d3d317d05353d55395602a1b604082015260600190565b600080613b9d610ffc8a8a8a8a89613ae8565b90506000613bae8a8a8a8a89613e54565b9050811580613bbb575080155b15613bcb57600092505050613c13565b6000613bd8878787613e73565b90506000613be9610ffc8385615803565b9050600087613c0157613bfc8286615b9b565b613c0b565b613c0b8583615b9b565b955050505050505b979650505050505050565b600060405160200161375f9060208082526017908201527614d5d05417d253541050d517d413d3d317d05353d55395604a1b604082015260600190565b6000670de0b6b3a7640000821015613c8957604051633621413760e21b815260048101839052602401610344565b6000613c9e670de0b6b3a76400008404613eaa565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff198101613cc7575050919050565b6706f05b59d3b200005b8015613d0957670de0b6b3a7640000828002049150671bc16d674ec800008210613d01579283019260019190911c905b60011c613cd1565b505050919050565b6000611f248383613f8d565b6000680a688906bd8b0000008210613d4b57604051634a4f26f160e01b815260048101839052602401610344565b670de0b6b3a7640000604083901b04611f2481614053565b6000846001600160a01b031663bd02d0f5613d7f8686866146e5565b6040518263ffffffff1660e01b8152600401613d9d91815260200190565b602060405180830381865afa158015613dba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380c91906159cb565b60006040516020016132df906020808252601b908201527a21aaa6aaa620aa24ab22afa127a92927aba4a723afa320a1aa27a960291b604082015260600190565b60006040516020016132df906020808252600f908201526e544f54414c5f424f52524f57494e4760881b604082015260600190565b600080613e6387878786614777565b90506000613b0788888787614777565b60008215613e925781613e87578351613661565b506020830151611f24565b81613ea15783602001516120fc565b50509051919050565b6000600160801b8210613eca57608091821c91613ec7908261584d565b90505b600160401b8210613ee857604091821c91613ee5908261584d565b90505b600160201b8210613f0657602091821c91613f03908261584d565b90505b620100008210613f2357601091821c91613f20908261584d565b90505b6101008210613f3f57600891821c91613f3c908261584d565b90505b60108210613f5a57600491821c91613f57908261584d565b90505b60048210613f7557600291821c91613f72908261584d565b90505b60028210613f8857610cb660018261584d565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110613fd15760405163698d9a0160e11b815260048101829052602401610344565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff821190508260000361400f5780670de0b6b3a7640000850401945050505050610cb6565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b8216156140735768016a09e667f3bcc9090260401c5b6001603e1b82161561408e576801306fe0a31b7152df0260401c5b6001603d1b8216156140a9576801172b83c7d517adce0260401c5b6001603c1b8216156140c45768010b5586cf9890f62a0260401c5b6001603b1b8216156140df576801059b0d31585743ae0260401c5b6001603a1b8216156140fa57680102c9a3e778060ee70260401c5b600160391b8216156141155768010163da9fb33356d80260401c5b600160381b82161561413057680100b1afa5abcbed610260401c5b600160371b82161561414b5768010058c86da1c09ea20260401c5b600160361b821615614166576801002c605e2e8cec500260401c5b600160351b82161561418157680100162f3904051fa10260401c5b600160341b82161561419c576801000b175effdc76ba0260401c5b600160331b8216156141b757680100058ba01fb9f96d0260401c5b600160321b8216156141d25768010002c5cc37da94920260401c5b600160311b8216156141ed576801000162e525ee05470260401c5b600160301b8216156142085768010000b17255775c040260401c5b6001602f1b821615614223576801000058b91b5bc9ae0260401c5b6001602e1b82161561423e57680100002c5c89d5ec6d0260401c5b6001602d1b8216156142595768010000162e43f4f8310260401c5b6001602c1b82161561427457680100000b1721bcfc9a0260401c5b6001602b1b82161561428f5768010000058b90cf1e6e0260401c5b6001602a1b8216156142aa576801000002c5c863b73f0260401c5b600160291b8216156142c557680100000162e430e5a20260401c5b600160281b8216156142e0576801000000b1721835510260401c5b600160271b8216156142fb57680100000058b90c0b490260401c5b600160261b8216156143165768010000002c5c8601cc0260401c5b600160251b821615614331576801000000162e42fff00260401c5b600160241b82161561434c5768010000000b17217fbb0260401c5b600160231b821615614367576801000000058b90bfce0260401c5b600160221b82161561438257680100000002c5c85fe30260401c5b600160211b82161561439d5768010000000162e42ff10260401c5b600160201b8216156143b857680100000000b17217f80260401c5b63800000008216156143d35768010000000058b90bfc0260401c5b63400000008216156143ee576801000000002c5c85fe0260401c5b632000000082161561440957680100000000162e42ff0260401c5b6310000000821615614424576801000000000b17217f0260401c5b630800000082161561443f57680100000000058b90c00260401c5b630400000082161561445a5768010000000002c5c8600260401c5b6302000000821615614475576801000000000162e4300260401c5b63010000008216156144905768010000000000b172180260401c5b628000008216156144aa576801000000000058b90c0260401c5b624000008216156144c457680100000000002c5c860260401c5b622000008216156144de5768010000000000162e430260401c5b621000008216156144f857680100000000000b17210260401c5b620800008216156145125768010000000000058b910260401c5b6204000082161561452c576801000000000002c5c80260401c5b6202000082161561454657680100000000000162e40260401c5b6201000082161561455f5761b172600160401b010260401c5b618000821615614577576158b9600160401b010260401c5b61400082161561458f57612c5d600160401b010260401c5b6120008216156145a75761162e600160401b010260401c5b6110008216156145bf57610b17600160401b010260401c5b6108008216156145d75761058c600160401b010260401c5b6104008216156145ef576102c6600160401b010260401c5b61020082161561460757610163600160401b010260401c5b61010082161561461e5760b1600160401b010260401c5b6080821615614634576059600160401b010260401c5b604082161561464a57602c600160401b010260401c5b6020821615614660576016600160401b010260401c5b601082161561467657600b600160401b010260401c5b600882161561468c576006600160401b010260401c5b60048216156146a2576003600160401b010260401c5b60028216156146b8576001600160401b010260401c5b60018216156146ce576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6000604051602001614718906020808252600d908201526c13d4115397d2539511549154d5609a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038087169183019190915284166060820152821515608082015260a0016040516020818303038152906040528051906020012090509392505050565b6000846001600160a01b031663bd02d0f5613d7f8686866000604051602001614718906020808252601790820152764f50454e5f494e5445524553545f494e5f544f4b454e5360481b604082015260600190565b60405180606001604052806000815260200160008152602001600081525090565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60a081016001600160401b03811182821017156148425761484261480d565b60405250565b601f8201601f191681016001600160401b038111828210171561486d5761486d61480d565b6040525050565b60405161016081016001600160401b03811182821017156148975761489761480d565b60405290565b60405161018081016001600160401b03811182821017156148975761489761480d565b60006001600160401b038211156148d9576148d961480d565b5060051b60200190565b6001600160a01b038116811461088f57600080fd5b8035613f88816148e3565b600082601f83011261491457600080fd5b81356020614921826148c0565b60405161492e8282614848565b83815260059390931b850182019282810191508684111561494e57600080fd5b8286015b84811015614972578035614965816148e3565b8352918301918301614952565b509695505050505050565b600082601f83011261498e57600080fd5b8135602061499b826148c0565b6040516149a88282614848565b83815260059390931b85018201928281019150868411156149c857600080fd5b8286015b8481101561497257803583529183019183016149cc565b60006001600160401b038211156149fc576149fc61480d565b50601f01601f191660200190565b600082601f830112614a1b57600080fd5b81356020614a28826148c0565b60408051614a368382614848565b84815260059490941b8601830193838101925087851115614a5657600080fd5b8387015b85811015614add5780356001600160401b03811115614a795760008081fd5b8801603f81018a13614a8b5760008081fd5b85810135614a98816149e3565b8551614aa48282614848565b8281528c87848601011115614abb57600091508182fd5b828785018a830137600092810189019290925250855250928401928401614a5a565b50979650505050505050565b60008060008060808587031215614aff57600080fd5b8435935060208501356001600160401b0380821115614b1d57600080fd5b908601906101608289031215614b3257600080fd5b614b3a614874565b82358152602083013582811115614b5057600080fd5b614b5c8a828601614903565b602083015250604083013582811115614b7457600080fd5b614b808a82860161497d565b604083015250606083013582811115614b9857600080fd5b614ba48a82860161497d565b606083015250608083013582811115614bbc57600080fd5b614bc88a82860161497d565b60808301525060a083013582811115614be057600080fd5b614bec8a82860161497d565b60a08301525060c083013582811115614c0457600080fd5b614c108a82860161497d565b60c08301525060e083013582811115614c2857600080fd5b614c348a82860161497d565b60e0830152506101008084013583811115614c4e57600080fd5b614c5a8b82870161497d565b8284015250506101208084013583811115614c7457600080fd5b614c808b828701614a0a565b8284015250506101408084013583811115614c9a57600080fd5b614ca68b828701614903565b828401525050809550505050614cbe604086016148f8565b9396929550929360600135925050565b60008060408385031215614ce157600080fd5b8235614cec816148e3565b946020939093013593505050565b600080828403610100811215614d0f57600080fd5b8335614d1a816148e3565b925060e0601f1982011215614d2e57600080fd5b506020830190509250929050565b600060208284031215614d4e57600080fd5b8135611f24816148e3565b60008060408385031215614d6c57600080fd5b8235915060208301356001600160401b03811115614d8957600080fd5b83016101608186031215614d9c57600080fd5b809150509250929050565b600081518084526020808501945080840160005b83811015614de05781516001600160a01b031687529582019590820190600101614dbb565b509495945050505050565b600081518084526020808501945080840160005b83811015614de057815187529582019590820190600101614dff565b60005b83811015614e36578181015183820152602001614e1e565b50506000910152565b60008151808452614e57816020860160208601614e1b565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015614eb3578284038952614ea1848351614e3f565b98850198935090840190600101614e89565b5091979650505050505050565b600060018060a01b03808616835280851660208401525060606040830152825160608301526020830151610160806080850152614f016101c0850183614da7565b91506040850151605f19808685030160a0870152614f1f8483614deb565b935060608701519150808685030160c0870152614f3c8483614deb565b935060808701519150808685030160e0870152614f598483614deb565b935060a08701519150610100818786030181880152614f788584614deb565b945060c08801519250610120828887030181890152614f978685614deb565b955060e089015193506101408389880301818a0152614fb68786614deb565b9650828a015194508389880301868a0152614fd18786614deb565b9650818a0151955083898803016101808a0152614fee8787614e6b565b9650808a0151955050505080868503016101a08701525050613c138282614da7565b600060033d11156150295760046000803e5060005160e01c5b90565b600060443d101561503a5790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561506957505050505090565b82850191508151818111156150815750505050505090565b843d870101602082850101111561509b5750505050505090565b6150aa60208286010187614848565b509095945050505050565b602081526000611f246020830184614e3f565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b801515811461088f57600080fd5b8035613f8881615123565b600060e0828403121561514e57600080fd5b60405160e081016001600160401b03811182821017156151705761517061480d565b604052823561517e816148e3565b8152602083013561518e816148e3565b602082015261519f604084016148f8565b6040820152606083013560608201526151ba60808401615131565b608082015260a083013560a082015260c083013560c08201528091505092915050565b6000808335601e198436030181126151f457600080fd5b83016020810192503590506001600160401b0381111561521357600080fd5b8060051b360382131561522557600080fd5b9250929050565b8183526000602080850194508260005b85811015614de057813561524f816148e3565b6001600160a01b03168752958201959082019060010161523c565b81835260006001600160fb1b0383111561528357600080fd5b8260051b80836020870137939093016020019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015614eb35782840389528135601e1988360301811261530057600080fd5b870185810190356001600160401b0381111561531b57600080fd5b80360382131561532a57600080fd5b61533586828461529c565b9a87019a95505050908401906001016152df565b8481526080602082015283356080820152600061536960208601866151dd565b6101608060a08601526153816101e08601838561522c565b925061539060408901896151dd565b9250607f19808786030160c08801526153aa85858461526a565b94506153b960608b018b6151dd565b94509150808786030160e08801526153d285858461526a565b94506153e160808b018b6151dd565b945091506101008188870301818901526153fc86868561526a565b955061540b60a08c018c6151dd565b955092506101208289880301818a015261542687878661526a565b965061543560c08d018d6151dd565b96509350610140838a890301818b015261545088888761526a565b975061545f60e08e018e6151dd565b97509450838a890301868b015261547788888761526a565b9750615485838e018e6151dd565b97509550838a8903016101808b015261549f88888861526a565b97506154ad828e018e6151dd565b97509550838a8903016101a08b01526154c78888886152c5565b97506154d5818e018e6151dd565b9750955050505080878603016101c088015250506154f483838361522c565b935050505061550660408301856147ec565b82606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016155535761555361552b565b5060010190565b8051613f88816148e3565b8051613f8881615123565b600082601f83011261558157600080fd5b815161558c816149e3565b6040516155998282614848565b8281528560208487010111156155ae57600080fd5b61380c836020830160208801614e1b565b6000602082840312156155d157600080fd5b81516001600160401b03808211156155e857600080fd5b9083019061018082860312156155fd57600080fd5b61560561489d565b61560e8361555a565b815261561c6020840161555a565b602082015261562d6040840161555a565b604082015261563e6060840161555a565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100615679818501615565565b908201526101208381015190820152610140808401519082015261016080840151838111156156a757600080fd5b6156b388828701615570565b918301919091525095945050505050565b6020808252601b908201527a11195c1bdcda5d155d1a5b1cce88195b5c1d1e4819195c1bdcda5d602a1b604082015260600190565b60006020828403121561570b57600080fd5b81516001600160401b038082111561572257600080fd5b9083019060a0828603121561573657600080fd5b60405161574281614823565b825161574d816148e3565b8152602083015161575d816148e3565b60208201526040830151615770816148e3565b60408201526060830151615783816148e3565b606082015260808301518281111561579a57600080fd5b6157a687828601615570565b60808301525095945050505050565b6000604082840312156157c757600080fd5b604080519081016001600160401b03811182821017156157e9576157e961480d565b604052825181526020928301519281019290925250919050565b600081600019048311821515161561581d5761581d61552b565b500290565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b80820180821115610cb657610cb661552b565b60006001600160ff1b03818413828413808216868404861116156158865761588661552b565b600160ff1b60008712828116878305891216156158a5576158a561552b565b600087129250878205871284841616156158c1576158c161552b565b878505871281841616156158d7576158d761552b565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b60008261590a5761590a6158e5565b600160ff1b8214600019841416156159245761592461552b565b500590565b918252602082015260400190565b6001600160a01b0396871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561599c57600080fd5b8151611f2481615123565b6001600160a01b03831681526040602082018190526000906120fc90830184614e3f565b6000602082840312156159dd57600080fd5b5051919050565b81810381811115610cb657610cb661552b565b82815260406020820152615a0f6040820183516147ec565b60006020830151615a2360608401826147ec565b506040830151615a3660808401826147ec565b506060830151615a4960a08401826147ec565b50608083015160c083015260a083015160e083015260c0830151610100818185015260e0850151915061012082818601528186015192506101409150615a928286018415159052565b850151610160858101919091529085015161018080860191909152908501516101a0850191909152905061380c6101c0840182614e3f565b6001600160a01b039586168152938516602085015260408401929092529092166060820152901515608082015260a00190565b600082615b0c57615b0c6158e5565b500490565b600060208284031215615b2357600080fd5b8151611f24816148e3565b6000600160ff1b8201615b4357615b4361552b565b5060000390565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b8082018281126000831280158216821582161715615b9357615b9361552b565b505092915050565b8181036000831280158383131683831282161715615bbb57615bbb61552b565b509291505056fea26469706673582212206117f5f458815afed0b3173ca06df2d4505e50cd5719b66ea1fc35e42fa5e29a64736f6c63430008100033",
  "deployedBytecode": "$60bb1dd4670b1e26e5010aaaf2f65694d3$__96635a3911ca96611403969195919491939192600401615937565b60006040518083038186803b15801561141b57600080fd5b505af415801561142f573d6000803e3d6000fd5b50505050505050505050505050565b60405163ac4ab3fb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4ab3fb9061148c9033908690600401615971565b602060405180830381865afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd919061598a565b61072857338160405163a35b150b60e01b81526004016103449291906159a7565b806000036114fb57505050565b6000836001600160a01b031663bd02d0f560405160200161154d906020808252601f908201527f4e41544956455f544f4b454e5f5452414e534645525f4741535f4c494d495400604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161158191815260200190565b602060405180830381865afa15801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c291906159cb565b9050600080846001600160a01b0316848490604051600060405180830381858888f193505050503d8060008114611615576040519150601f19603f3d011682016040523d82523d6000602084013e61161a565b606091505b5091509150811561162d57505050505050565b60008160405160200161164091906150b5565b60405160208183030381529060405290507f6c4e9d88878940a822d239187b8b00d62a80dce222d53bc5f1fb072d9c34b6818160405161168091906150b5565b60405180910390a18585604051633828654560e11b8152600401610344929190615971565b6000604051602001610bb0906020808252601690820152754352454154455f4445504f5349545f4645415455524560501b604082015260600190565b600080846001600160a01b031663c2bc2efc84604001516040518263ffffffff1660e01b815260040161171491906147f9565b600060405180830381865afa158015611731573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261175991908101906156f9565b9050611764816122df565b604080820151905163352f9aed60e01b81526000916001600160a01b0389169163352f9aed91611796916004016147f9565b6020604051808303816000875af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d991906159cb565b90506000876001600160a01b031663352f9aed84606001516040518263ffffffff1660e01b815260040161180d91906147f9565b6020604051808303816000875af115801561182c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185091906159cb565b9050600061185d8b612307565b9050806001600160a01b031684604001516001600160a01b0316036118925760a086015161188b90846159e4565b925061198e565b806001600160a01b031684606001516001600160a01b0316036118c55760a08601516118be90836159e4565b915061198e565b60405163352f9aed60e01b81526000906001600160a01b038b169063352f9aed906118f49085906004016147f9565b6020604051808303816000875af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193791906159cb565b90508660a00151811461198c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369745574696c733a20696e76616c696420776e74416d6f756e74006044820152606401610344565b505b6000604051806101800160405280896001600160a01b0316815260200188600001516001600160a01b0316815260200188602001516001600160a01b0316815260200186600001516001600160a01b0316815260200185815260200184815260200188606001518152602001611a026123b4565b81526020018860800151151581526020018860a0015181526020018860c0015181526020016040518060200160405280600081525081525090506000611a488d8361243a565b9050611a598d828a60a0015161256d565b6000611a648e6125b5565b60405163fabd2ba360e01b81529091506001600160a01b038d169063fabd2ba390611a9590849087906004016159f7565b600060405180830381600087803b158015611aaf57600080fd5b505af1158015611ac3573d6000803e3d6000fd5b505050508c6001600160a01b031663a0240c7f82856040518363ffffffff1660e01b8152600401611af59291906159f7565b600060405180830381600087803b158015611b0f57600080fd5b505af1158015611b23573d6000803e3d6000fd5b509299505050505050505050509695505050505050565b600180546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b60405163023aa9ab60e61b8152600481018490526000906001600160a01b03871690638eaa6ac090602401600060405180830381865afa158015611be3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c0b91908101906155bf565b80519091506001600160a01b0316611c355760405162461bcd60e51b8152600401610344906156c4565b60608101516040516330af0bbf60e21b81526000916001600160a01b0388169163c2bc2efc91611c67916004016147f9565b600060405180830381865afa158015611c84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cac91908101906156f9565b608083015190915015611d3157866001600160a01b031663f94989388a8360400151856080015186600001518761010001516040518663ffffffff1660e01b8152600401611cfe959493929190615aca565b600060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b505050505b60a082015115611db357866001600160a01b031663f94989388a83606001518560a0015186600001518761010001516040518663ffffffff1660e01b8152600401611d80959493929190615aca565b600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b505050505b6040516395bc267360e01b8152600481018690526001600160a01b038816906395bc267390602401600060405180830381600087803b158015611df557600080fd5b505af1158015611e09573d6000803e3d6000fd5b50506040516343d9ba2d60e11b8152600481018890526001600160a01b038b1692506387b3745a9150602401600060405180830381600087803b158015611e4f57600080fd5b505af1158015611e63573d6000803e3d6000fd5b50505050611e7185836125f8565b6101208201518251604051632d1c88e560e11b815273__$60bb1dd4670b1e26e5010aaaf2f65694d3$__92635a3911ca92611403928e928d9290918a918c91600401615937565b604051633d70e7e560e11b8152600481018290526000906001600160a01b03841690637ae1cfca90602401602060405180830381865afa158015611f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f24919061598a565b9392505050565b600080611f42848460406001600160401b03612632565b905080600003611f245760405163349f5fdd60e11b815260048101849052602401610344565b6000805b8351811015611fb15782848281518110611f8857611f88615515565b602002602001015114611f9f576000915050610cb6565b80611fa981615541565b915050611f6c565b5060019392505050565b611fc881604001516126a5565b611fd0575050565b80604001516001600160a01b031663b01c23ba6002836101400151611ff59190615afd565b84846040518463ffffffff1660e01b81526004016120149291906159f7565b600060405180830381600088803b15801561202e57600080fd5b5087f193505050508015612040575060015b15610728575050565b6000600282600001518360200151612061919061584d565b610cb69190615afd565b60006001600160ff1b038211156120d55760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610344565b5090565b6000806120e5836126dc565b905060006120fc84600001518560200151846127b1565b949350505050565b60008061217784600001518460000151600001518560e0015160405160200161215c906020808252601b908201527a2322a2afa922a1a2a4ab22a92fa222a827a9a4aa2fa320a1aa27a960291b604082015260600190565b60405160208183030381529060405280519060200120612a19565b845160a0860151855151606087015184516040519596506121d9956121be906020016020808252600b908201526a4445504f5349545f46454560a81b604082015260600190565b60405160208183030381529060405280519060200120612b59565b83602001516001600160a01b03166347a3b4936040516020016122179060208082526007908201526619195c1bdcda5d60ca1b604082015260600190565b60408051601f1981840301815282825280516020918201206001600160e01b031960e086901b16845260048401528551602484015285015160448301528401516064820152608401600060405180830381600087803b15801561227957600080fd5b505af115801561228d573d6000803e3d6000fd5b505050506120fc848483604001518460200151612c36565b6122b281604001516126a5565b6122ba575050565b80604001516001600160a01b031663b36a1d436002836101400151611ff59190615afd565b80516001600160a01b031661088f576040516302fde0d760e11b815260040160405180910390fd5b6000816001600160a01b03166321f8a72160405160200161233f9060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161237391815260200190565b602060405180830381865afa158015612390573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190615b11565b600061a4b14614806123c8575062066eeb46145b156124355760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561240c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243091906159cb565b905090565b504390565b6000816080015160001480612451575060a0820151155b156124e557816101400151836001600160a01b031663bd02d0f56124756001612ed4565b6040518263ffffffff1660e01b815260040161249391815260200190565b602060405180830381865afa1580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d491906159cb565b6124de919061584d565b9050610cb6565b816101400151836001600160a01b031663bd02d0f56125046000612ed4565b6040518263ffffffff1660e01b815260040161252291815260200190565b602060405180830381865afa15801561253f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256391906159cb565b611f24919061584d565b60006125798484612f36565b905060006125873a83615803565b9050808310156125ae578083604051635dac504d60e01b8152600401610344929190615929565b5050505050565b6000806125c1836130e8565b90506000816040516020016125d891815260200190565b60408051601f198184030181529190528051602090910120949350505050565b61260581604001516126a5565b61260d575050565b80604001516001600160a01b031663f79e3de36002836101400151611ff59190615afd565b60008061264184610100615afd565b9050600061264f8287615afd565b9050600087828151811061266557612665615515565b60200260200101519050600086848461267e9190615803565b612688908a6159e4565b6126929190615803565b9190911c85169350505050949350505050565b60006001600160a01b0382166126bd57506000919050565b6001600160a01b0382163b6126d457506000919050565b506001919050565b6127076040518060800160405280600081526020016000815260200160008152602001600081525090565b600061272083600001518460200151856040015161319a565b9050600061273b84600001518560200151866060015161319a565b9050600084608001518361274f9190615803565b905060008560a00151836127639190615803565b90506000612775838860c00151613214565b90506000612787838960e00151613214565b60408051608081018252958652602086019490945292840191909152506060820152949350505050565b6000806127c683600001518460200151613244565b905060006127dc84604001518560600151613244565b6060850151604086015160208701518751939450909211159111151460006001600160a01b03881663bd02d0f561281289613266565b6040518263ffffffff1660e01b815260040161283091815260200190565b602060405180830381865afa15801561284d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287191906159cb565b905081156129125783831060006001600160a01b038a1663bd02d0f56128978b856132a7565b6040518263ffffffff1660e01b81526004016128b591815260200190565b602060405180830381865afa1580156128d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f691906159cb565b90506129058686848487613333565b9650505050505050611f24565b6000886001600160a01b031663bd02d0f561292e8a60016132a7565b6040518263ffffffff1660e01b815260040161294c91815260200190565b602060405180830381865afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d91906159cb565b90506000896001600160a01b031663bd02d0f56129ab8b60006132a7565b6040518263ffffffff1660e01b81526004016129c991815260200190565b602060405180830381865afa1580156129e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0a91906159cb565b9050612905868684848761336e565b612a216147cb565b612a296147cb565b6000866001600160a01b031663bd02d0f5612a43886133b7565b6040518263ffffffff1660e01b8152600401612a6191815260200190565b602060405180830381865afa158015612a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa291906159cb565b60405163bd02d0f560e01b8152600481018690529091506000906001600160a01b0389169063bd02d0f590602401602060405180830381865afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1191906159cb565b90506000612b1f87846133ec565b9050612b2b81836133ec565b808552612b3890826159e4565b6020850152612b4781886159e4565b60408501525091979650505050505050565b8115612c2e57604051635789eee760e01b81526001600160a01b03851690635789eee790612b91908990879087908b90600401615822565b600060405180830381600087803b158015612bab57600080fd5b505af1158015612bbf573d6000803e3d6000fd5b50506040516302002bf360e31b8152600481018490526001600160a01b03868116602483015260448201869052881692506310015f9891506064015b600060405180830381600087803b158015612c1557600080fd5b505af1158015612c29573d6000803e3d6000fd5b505050505b505050505050565b835183516040810151606086015160009384938493612d23936001600160a01b03908116911614612c6b578860c00151612c71565b8860a001515b8960000151606001516001600160a01b03168a606001516001600160a01b031614612ca0578960c00151612ca6565b8960a001515b60808c01518b5160200151604051631773dc6560e21b81526001600160a01b0390921691635dcf719491612cdc916004016147f9565b6040805180830381865afa158015612cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1c91906157b5565b600161340f565b865151909150600090612d3590613535565b905060008761010001511315612dc6576000612d7289600001518a602001518a60000151600001518b608001518c60c001518d6101000151613575565b9050612d9a8860c0015160000151612d89836135f4565b612d939190615803565b8484613646565b612da4908561584d565b895160208b01518a515160808c0151939750612dc0938561367d565b50612e14565b6000612df389600001518a602001518a60000151600001518b606001518c60a001518d6101000151613575565b9050612e06612e0182615b2e565b6135f4565b612e1090886159e4565b9650505b60a087015151612e2f90612e289088615803565b8383613646565b612e39908461584d565b885160208a015189515160608b0151939650612e6193612e5c610ffc8b8d61584d565b61367d565b86515160408089015190516340c10f1960e01b81526001600160a01b03909216916340c10f1991612e96918790600401615971565b600060405180830381600087803b158015612eb057600080fd5b505af1158015612ec4573d6000803e3d6000fd5b50949a9950505050505050505050565b6000604051602001612f0b9060208082526011908201527011115413d4d25517d1d054d7d312535255607a1b604082015260600190565b60408051601f1981840301815282825280516020918201209083015283151590820152606001610bde565b600080836001600160a01b031663bd02d0f5604051602001612f88906020808252601c908201527b1154d512535055115117d1915157d09054d157d1d054d7d31253525560221b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612fbc91815260200190565b602060405180830381865afa158015612fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffd91906159cb565b90506000846001600160a01b031663bd02d0f5604051602001613051906020808252601f908201527f455354494d415445445f4645455f4d554c5449504c4945525f464143544f5200604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161308591815260200190565b602060405180830381865afa1580156130a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c691906159cb565b905060006130d485836133ec565b6130de908461584d565b9695505050505050565b6000816001600160a01b031663340dbab3604051602001613122906020808252600590820152644e4f4e434560d81b604082015260600190565b6040516020818303038152906040528051906020012060016040518363ffffffff1660e01b8152600401613157929190615929565b6020604051808303816000875af1158015613176573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb691906159cb565b6000836001600160a01b031663bd02d0f56131b5858561372e565b6040518263ffffffff1660e01b81526004016131d391815260200190565b602060405180830381865afa1580156131f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fc91906159cb565b600080821315613231576132278261379c565b6124de908461584d565b61323a8261379c565b611f2490846159e4565b600081831161325c5761325783836159e4565b611f24565b611f2482846159e4565b6000604051602001610bb0906020808252601b908201527a29aba0a82fa4a6a820a1aa2fa2ac2827a722a72a2fa320a1aa27a960291b604082015260600190565b60006040516020016132df9060208082526012908201527129aba0a82fa4a6a820a1aa2fa320a1aa27a960711b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015282151560608201526080015b60405160208183030381529060405280519060200120905092915050565b6000806133546133448886866137af565b61334f8887876137af565b613244565b905060006133628287613815565b98975050505050505050565b60008061337c8786856137af565b9050600061338b8786866137af565b905060006133998383613244565b905060006133a982848611613815565b9a9950505050505050505050565b6000604051602001610bb0906020808252600f908201526e29aba0a82fa322a2afa320a1aa27a960891b604082015260600190565b600068327cb2734119d3b7a9601e1b6134058385615803565b611f249190615afd565b600080613425888860000151896040015161319a565b9050600061343c8989600001518a6060015161319a565b9050600061344a8886613838565b6134549084615803565b90506134608786613838565b61346a9083615803565b613474908261584d565b90506134908a8a600001518b604001518c60600151600161384f565b61349a908261584d565b90506134b68a8a600001518b604001518c60600151600061384f565b6134c0908261584d565b905060006134d28b8b600001516138a1565b90506134de8787613838565b6134e89082615803565b6134f2908361584d565b915060006135118c8c600001518d604001518e606001518c8c1561391a565b90506135258361352083615b2e565b613214565b9c9b505050505050505050505050565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613176573d6000803e3d6000fd5b6000806000831361358757835161358d565b83602001515b90506000808413156135d2576135a28261206b565b6135ac90856158fb565b905060006135be610ffc8b8a8a61394d565b9050808213156135cc578091505b506135df565b6135dc8483613968565b90505b613362898989896135ef86615b2e565b6139d5565b6000808212156120d55760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610344565b6000811580613653575082155b156136685761366184613a86565b9050611f24565b826136738584615803565b6120fc9190615afd565b6000856001600160a01b0316639deed1c8613698868661372e565b846040518363ffffffff1660e01b81526004016136b6929190615929565b6020604051808303816000875af11580156136d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f991906159cb565b60405163f79a52b760e01b81529091506001600160a01b0386169063f79a52b790612bfb908790879087908790600401615b4a565b600060405160200161375f906020808252600b908201526a1413d3d317d05353d5539560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038086169183019190915283166060820152608001613315565b6000808212156120d55781600003610cb6565b600068327cb2734119d3b7a9601e1b8410156137cd57506000611f24565b60006137e96137db86613a86565b6137e485613a86565b613a97565b90506137f481613ad7565b9050600261380282866133ec565b61380c9190615afd565b95945050505050565b60008115613826576124de8361206b565b61382f8361206b565b6124de90615b2e565b600081613846578251611f24565b50506020015190565b60008061385f8787878787613ae8565b9050600061386e888886613b13565b9050600061387d898987613b2e565b90508061388a8385615803565b61389491906159e4565b9998505050505050505050565b6000826001600160a01b031663bd02d0f56138bb84613b49565b6040518263ffffffff1660e01b81526004016138d991815260200190565b602060405180830381865afa1580156138f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2491906159cb565b60008061392d8888888888600189613b8a565b90506000613941898989898960008a613b8a565b90506138948183615b73565b6000836001600160a01b031663bd02d0f56131b58585613c1e565b6000808312156139a35761397b8261206b565b6139848361206b565b61398e9085615b9b565b613999906001615b73565b6124de91906158fb565b6139ac8261206b565b60016139b78461206b565b6139c19086615b73565b6139cb9190615b9b565b611f2491906158fb565b6000856001600160a01b0316639deed1c86139f08686613c1e565b846040518363ffffffff1660e01b8152600401613a0e929190615929565b6020604051808303816000875af1158015613a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5191906159cb565b60405163eb59c7c160e01b81529091506001600160a01b0386169063eb59c7c190612bfb908790879087908790600401615b4a565b6000610cb664e8d4a5100083615afd565b600082600003613abd578115613aae5760006124de565b50670de0b6b3a7640000610cb6565b611f24613ad2613acc85613c5b565b84613d11565b613d1d565b6000610cb664e8d4a5100083615803565b600080613af787878786613d63565b90506000613b0788888787613d63565b9050613362818361584d565b6000836001600160a01b031663bd02d0f56131b58585613dde565b6000836001600160a01b031663bd02d0f56131b58585613e1f565b6000604051602001610bb0906020808252601b908201527a1413d4d2551253d397d253541050d517d413d3d317d05353d55395602a1b604082015260600190565b600080613b9d610ffc8a8a8a8a89613ae8565b90506000613bae8a8a8a8a89613e54565b9050811580613bbb575080155b15613bcb57600092505050613c13565b6000613bd8878787613e73565b90506000613be9610ffc8385615803565b9050600087613c0157613bfc8286615b9b565b613c0b565b613c0b8583615b9b565b955050505050505b979650505050505050565b600060405160200161375f9060208082526017908201527614d5d05417d253541050d517d413d3d317d05353d55395604a1b604082015260600190565b6000670de0b6b3a7640000821015613c8957604051633621413760e21b815260048101839052602401610344565b6000613c9e670de0b6b3a76400008404613eaa565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff198101613cc7575050919050565b6706f05b59d3b200005b8015613d0957670de0b6b3a7640000828002049150671bc16d674ec800008210613d01579283019260019190911c905b60011c613cd1565b505050919050565b6000611f248383613f8d565b6000680a688906bd8b0000008210613d4b57604051634a4f26f160e01b815260048101839052602401610344565b670de0b6b3a7640000604083901b04611f2481614053565b6000846001600160a01b031663bd02d0f5613d7f8686866146e5565b6040518263ffffffff1660e01b8152600401613d9d91815260200190565b602060405180830381865afa158015613dba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380c91906159cb565b60006040516020016132df906020808252601b908201527a21aaa6aaa620aa24ab22afa127a92927aba4a723afa320a1aa27a960291b604082015260600190565b60006040516020016132df906020808252600f908201526e544f54414c5f424f52524f57494e4760881b604082015260600190565b600080613e6387878786614777565b90506000613b0788888787614777565b60008215613e925781613e87578351613661565b506020830151611f24565b81613ea15783602001516120fc565b50509051919050565b6000600160801b8210613eca57608091821c91613ec7908261584d565b90505b600160401b8210613ee857604091821c91613ee5908261584d565b90505b600160201b8210613f0657602091821c91613f03908261584d565b90505b620100008210613f2357601091821c91613f20908261584d565b90505b6101008210613f3f57600891821c91613f3c908261584d565b90505b60108210613f5a57600491821c91613f57908261584d565b90505b60048210613f7557600291821c91613f72908261584d565b90505b60028210613f8857610cb660018261584d565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110613fd15760405163698d9a0160e11b815260048101829052602401610344565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff821190508260000361400f5780670de0b6b3a7640000850401945050505050610cb6565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b8216156140735768016a09e667f3bcc9090260401c5b6001603e1b82161561408e576801306fe0a31b7152df0260401c5b6001603d1b8216156140a9576801172b83c7d517adce0260401c5b6001603c1b8216156140c45768010b5586cf9890f62a0260401c5b6001603b1b8216156140df576801059b0d31585743ae0260401c5b6001603a1b8216156140fa57680102c9a3e778060ee70260401c5b600160391b8216156141155768010163da9fb33356d80260401c5b600160381b82161561413057680100b1afa5abcbed610260401c5b600160371b82161561414b5768010058c86da1c09ea20260401c5b600160361b821615614166576801002c605e2e8cec500260401c5b600160351b82161561418157680100162f3904051fa10260401c5b600160341b82161561419c576801000b175effdc76ba0260401c5b600160331b8216156141b757680100058ba01fb9f96d0260401c5b600160321b8216156141d25768010002c5cc37da94920260401c5b600160311b8216156141ed576801000162e525ee05470260401c5b600160301b8216156142085768010000b17255775c040260401c5b6001602f1b821615614223576801000058b91b5bc9ae0260401c5b6001602e1b82161561423e57680100002c5c89d5ec6d0260401c5b6001602d1b8216156142595768010000162e43f4f8310260401c5b6001602c1b82161561427457680100000b1721bcfc9a0260401c5b6001602b1b82161561428f5768010000058b90cf1e6e0260401c5b6001602a1b8216156142aa576801000002c5c863b73f0260401c5b600160291b8216156142c557680100000162e430e5a20260401c5b600160281b8216156142e0576801000000b1721835510260401c5b600160271b8216156142fb57680100000058b90c0b490260401c5b600160261b8216156143165768010000002c5c8601cc0260401c5b600160251b821615614331576801000000162e42fff00260401c5b600160241b82161561434c5768010000000b17217fbb0260401c5b600160231b821615614367576801000000058b90bfce0260401c5b600160221b82161561438257680100000002c5c85fe30260401c5b600160211b82161561439d5768010000000162e42ff10260401c5b600160201b8216156143b857680100000000b17217f80260401c5b63800000008216156143d35768010000000058b90bfc0260401c5b63400000008216156143ee576801000000002c5c85fe0260401c5b632000000082161561440957680100000000162e42ff0260401c5b6310000000821615614424576801000000000b17217f0260401c5b630800000082161561443f57680100000000058b90c00260401c5b630400000082161561445a5768010000000002c5c8600260401c5b6302000000821615614475576801000000000162e4300260401c5b63010000008216156144905768010000000000b172180260401c5b628000008216156144aa576801000000000058b90c0260401c5b624000008216156144c457680100000000002c5c860260401c5b622000008216156144de5768010000000000162e430260401c5b621000008216156144f857680100000000000b17210260401c5b620800008216156145125768010000000000058b910260401c5b6204000082161561452c576801000000000002c5c80260401c5b6202000082161561454657680100000000000162e40260401c5b6201000082161561455f5761b172600160401b010260401c5b618000821615614577576158b9600160401b010260401c5b61400082161561458f57612c5d600160401b010260401c5b6120008216156145a75761162e600160401b010260401c5b6110008216156145bf57610b17600160401b010260401c5b6108008216156145d75761058c600160401b010260401c5b6104008216156145ef576102c6600160401b010260401c5b61020082161561460757610163600160401b010260401c5b61010082161561461e5760b1600160401b010260401c5b6080821615614634576059600160401b010260401c5b604082161561464a57602c600160401b010260401c5b6020821615614660576016600160401b010260401c5b601082161561467657600b600160401b010260401c5b600882161561468c576006600160401b010260401c5b60048216156146a2576003600160401b010260401c5b60028216156146b8576001600160401b010260401c5b60018216156146ce576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6000604051602001614718906020808252600d908201526c13d4115397d2539511549154d5609a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038087169183019190915284166060820152821515608082015260a0016040516020818303038152906040528051906020012090509392505050565b6000846001600160a01b031663bd02d0f5613d7f8686866000604051602001614718906020808252601790820152764f50454e5f494e5445524553545f494e5f544f4b454e5360481b604082015260600190565b60405180606001604052806000815260200160008152602001600081525090565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60a081016001600160401b03811182821017156148425761484261480d565b60405250565b601f8201601f191681016001600160401b038111828210171561486d5761486d61480d565b6040525050565b60405161016081016001600160401b03811182821017156148975761489761480d565b60405290565b60405161018081016001600160401b03811182821017156148975761489761480d565b60006001600160401b038211156148d9576148d961480d565b5060051b60200190565b6001600160a01b038116811461088f57600080fd5b8035613f88816148e3565b600082601f83011261491457600080fd5b81356020614921826148c0565b60405161492e8282614848565b83815260059390931b850182019282810191508684111561494e57600080fd5b8286015b84811015614972578035614965816148e3565b8352918301918301614952565b509695505050505050565b600082601f83011261498e57600080fd5b8135602061499b826148c0565b6040516149a88282614848565b83815260059390931b85018201928281019150868411156149c857600080fd5b8286015b8481101561497257803583529183019183016149cc565b60006001600160401b038211156149fc576149fc61480d565b50601f01601f191660200190565b600082601f830112614a1b57600080fd5b81356020614a28826148c0565b60408051614a368382614848565b84815260059490941b8601830193838101925087851115614a5657600080fd5b8387015b85811015614add5780356001600160401b03811115614a795760008081fd5b8801603f81018a13614a8b5760008081fd5b85810135614a98816149e3565b8551614aa48282614848565b8281528c87848601011115614abb57600091508182fd5b828785018a830137600092810189019290925250855250928401928401614a5a565b50979650505050505050565b60008060008060808587031215614aff57600080fd5b8435935060208501356001600160401b0380821115614b1d57600080fd5b908601906101608289031215614b3257600080fd5b614b3a614874565b82358152602083013582811115614b5057600080fd5b614b5c8a828601614903565b602083015250604083013582811115614b7457600080fd5b614b808a82860161497d565b604083015250606083013582811115614b9857600080fd5b614ba48a82860161497d565b606083015250608083013582811115614bbc57600080fd5b614bc88a82860161497d565b60808301525060a083013582811115614be057600080fd5b614bec8a82860161497d565b60a08301525060c083013582811115614c0457600080fd5b614c108a82860161497d565b60c08301525060e083013582811115614c2857600080fd5b614c348a82860161497d565b60e0830152506101008084013583811115614c4e57600080fd5b614c5a8b82870161497d565b8284015250506101208084013583811115614c7457600080fd5b614c808b828701614a0a565b8284015250506101408084013583811115614c9a57600080fd5b614ca68b828701614903565b828401525050809550505050614cbe604086016148f8565b9396929550929360600135925050565b60008060408385031215614ce157600080fd5b8235614cec816148e3565b946020939093013593505050565b600080828403610100811215614d0f57600080fd5b8335614d1a816148e3565b925060e0601f1982011215614d2e57600080fd5b506020830190509250929050565b600060208284031215614d4e57600080fd5b8135611f24816148e3565b60008060408385031215614d6c57600080fd5b8235915060208301356001600160401b03811115614d8957600080fd5b83016101608186031215614d9c57600080fd5b809150509250929050565b600081518084526020808501945080840160005b83811015614de05781516001600160a01b031687529582019590820190600101614dbb565b509495945050505050565b600081518084526020808501945080840160005b83811015614de057815187529582019590820190600101614dff565b60005b83811015614e36578181015183820152602001614e1e565b50506000910152565b60008151808452614e57816020860160208601614e1b565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015614eb3578284038952614ea1848351614e3f565b98850198935090840190600101614e89565b5091979650505050505050565b600060018060a01b03808616835280851660208401525060606040830152825160608301526020830151610160806080850152614f016101c0850183614da7565b91506040850151605f19808685030160a0870152614f1f8483614deb565b935060608701519150808685030160c0870152614f3c8483614deb565b935060808701519150808685030160e0870152614f598483614deb565b935060a08701519150610100818786030181880152614f788584614deb565b945060c08801519250610120828887030181890152614f978685614deb565b955060e089015193506101408389880301818a0152614fb68786614deb565b9650828a015194508389880301868a0152614fd18786614deb565b9650818a0151955083898803016101808a0152614fee8787614e6b565b9650808a0151955050505080868503016101a08701525050613c138282614da7565b600060033d11156150295760046000803e5060005160e01c5b90565b600060443d101561503a5790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561506957505050505090565b82850191508151818111156150815750505050505090565b843d870101602082850101111561509b5750505050505090565b6150aa60208286010187614848565b509095945050505050565b602081526000611f246020830184614e3f565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b801515811461088f57600080fd5b8035613f8881615123565b600060e0828403121561514e57600080fd5b60405160e081016001600160401b03811182821017156151705761517061480d565b604052823561517e816148e3565b8152602083013561518e816148e3565b602082015261519f604084016148f8565b6040820152606083013560608201526151ba60808401615131565b608082015260a083013560a082015260c083013560c08201528091505092915050565b6000808335601e198436030181126151f457600080fd5b83016020810192503590506001600160401b0381111561521357600080fd5b8060051b360382131561522557600080fd5b9250929050565b8183526000602080850194508260005b85811015614de057813561524f816148e3565b6001600160a01b03168752958201959082019060010161523c565b81835260006001600160fb1b0383111561528357600080fd5b8260051b80836020870137939093016020019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015614eb35782840389528135601e1988360301811261530057600080fd5b870185810190356001600160401b0381111561531b57600080fd5b80360382131561532a57600080fd5b61533586828461529c565b9a87019a95505050908401906001016152df565b8481526080602082015283356080820152600061536960208601866151dd565b6101608060a08601526153816101e08601838561522c565b925061539060408901896151dd565b9250607f19808786030160c08801526153aa85858461526a565b94506153b960608b018b6151dd565b94509150808786030160e08801526153d285858461526a565b94506153e160808b018b6151dd565b945091506101008188870301818901526153fc86868561526a565b955061540b60a08c018c6151dd565b955092506101208289880301818a015261542687878661526a565b965061543560c08d018d6151dd565b96509350610140838a890301818b015261545088888761526a565b975061545f60e08e018e6151dd565b97509450838a890301868b015261547788888761526a565b9750615485838e018e6151dd565b97509550838a8903016101808b015261549f88888861526a565b97506154ad828e018e6151dd565b97509550838a8903016101a08b01526154c78888886152c5565b97506154d5818e018e6151dd565b9750955050505080878603016101c088015250506154f483838361522c565b935050505061550660408301856147ec565b82606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016155535761555361552b565b5060010190565b8051613f88816148e3565b8051613f8881615123565b600082601f83011261558157600080fd5b815161558c816149e3565b6040516155998282614848565b8281528560208487010111156155ae57600080fd5b61380c836020830160208801614e1b565b6000602082840312156155d157600080fd5b81516001600160401b03808211156155e857600080fd5b9083019061018082860312156155fd57600080fd5b61560561489d565b61560e8361555a565b815261561c6020840161555a565b602082015261562d6040840161555a565b604082015261563e6060840161555a565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100615679818501615565565b908201526101208381015190820152610140808401519082015261016080840151838111156156a757600080fd5b6156b388828701615570565b918301919091525095945050505050565b6020808252601b908201527a11195c1bdcda5d155d1a5b1cce88195b5c1d1e4819195c1bdcda5d602a1b604082015260600190565b60006020828403121561570b57600080fd5b81516001600160401b038082111561572257600080fd5b9083019060a0828603121561573657600080fd5b60405161574281614823565b825161574d816148e3565b8152602083015161575d816148e3565b60208201526040830151615770816148e3565b60408201526060830151615783816148e3565b606082015260808301518281111561579a57600080fd5b6157a687828601615570565b60808301525095945050505050565b6000604082840312156157c757600080fd5b604080519081016001600160401b03811182821017156157e9576157e961480d565b604052825181526020928301519281019290925250919050565b600081600019048311821515161561581d5761581d61552b565b500290565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b80820180821115610cb657610cb661552b565b60006001600160ff1b03818413828413808216868404861116156158865761588661552b565b600160ff1b60008712828116878305891216156158a5576158a561552b565b600087129250878205871284841616156158c1576158c161552b565b878505871281841616156158d7576158d761552b565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b60008261590a5761590a6158e5565b600160ff1b8214600019841416156159245761592461552b565b500590565b918252602082015260400190565b6001600160a01b0396871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561599c57600080fd5b8151611f2481615123565b6001600160a01b03831681526040602082018190526000906120fc90830184614e3f565b6000602082840312156159dd57600080fd5b5051919050565b81810381811115610cb657610cb661552b565b82815260406020820152615a0f6040820183516147ec565b60006020830151615a2360608401826147ec565b506040830151615a3660808401826147ec565b506060830151615a4960a08401826147ec565b50608083015160c083015260a083015160e083015260c0830151610100818185015260e0850151915061012082818601528186015192506101409150615a928286018415159052565b850151610160858101919091529085015161018080860191909152908501516101a0850191909152905061380c6101c0840182614e3f565b6001600160a01b039586168152938516602085015260408401929092529092166060820152901515608082015260a00190565b600082615b0c57615b0c6158e5565b500490565b600060208284031215615b2357600080fd5b8151611f24816148e3565b6000600160ff1b8201615b4357615b4361552b565b5060000390565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b8082018281126000831280158216821582161715615b9357615b9361552b565b505092915050565b8181036000831280158383131683831282161715615bbb57615bbb61552b565b509291505056fea26469706673582212206117f5f458815afed0b3173ca06df2d4505e50cd5719b66ea1fc35e42fa5e29a64736f6c63430008100033",
  "libraries": {
    "GasUtils": "0xf07d407B7f9E7dfe8aab1165962B850E64b54E80"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathUD60x18__Exp2InputTooBig(uint256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathUD60x18__LogInputTooSmall(uint256)": [
        {
          "notice": "Emitted when the input is less than 1."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/exchange/DepositHandler.sol:DepositHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11956,
        "contract": "contracts/exchange/DepositHandler.sol:DepositHandler",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}